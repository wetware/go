// Code generated by MockGen. DO NOT EDIT.
// Source: auth.go

// Package auth_test is a generated GoMock package.
package auth_test

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	crypto "github.com/libp2p/go-libp2p/core/crypto"
	auth "github.com/wetware/go/auth"
)

// MockPolicy is a mock of Policy interface.
type MockPolicy struct {
	ctrl     *gomock.Controller
	recorder *MockPolicyMockRecorder
}

// MockPolicyMockRecorder is the mock recorder for MockPolicy.
type MockPolicyMockRecorder struct {
	mock *MockPolicy
}

// NewMockPolicy creates a new mock instance.
func NewMockPolicy(ctrl *gomock.Controller) *MockPolicy {
	mock := &MockPolicy{ctrl: ctrl}
	mock.recorder = &MockPolicyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPolicy) EXPECT() *MockPolicyMockRecorder {
	return m.recorder
}

// NewStdio mocks base method.
func (m *MockPolicy) NewStdio() (auth.Socket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewStdio")
	ret0, _ := ret[0].(auth.Socket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewStdio indicates an expected call of NewStdio.
func (mr *MockPolicyMockRecorder) NewStdio() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewStdio", reflect.TypeOf((*MockPolicy)(nil).NewStdio))
}

// SetStdio mocks base method.
func (m *MockPolicy) SetStdio(arg0 auth.Socket) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStdio", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetStdio indicates an expected call of SetStdio.
func (mr *MockPolicyMockRecorder) SetStdio(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStdio", reflect.TypeOf((*MockPolicy)(nil).SetStdio), arg0)
}

// Stdio mocks base method.
func (m *MockPolicy) Stdio() (auth.Socket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stdio")
	ret0, _ := ret[0].(auth.Socket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stdio indicates an expected call of Stdio.
func (mr *MockPolicyMockRecorder) Stdio() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stdio", reflect.TypeOf((*MockPolicy)(nil).Stdio))
}

// MockProvider is a mock of Provider interface.
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
}

// MockProviderMockRecorder is the mock recorder for MockProvider.
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance.
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// BindPolicy mocks base method.
func (m *MockProvider) BindPolicy(user crypto.PubKey, policy auth.Policy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindPolicy", user, policy)
	ret0, _ := ret[0].(error)
	return ret0
}

// BindPolicy indicates an expected call of BindPolicy.
func (mr *MockProviderMockRecorder) BindPolicy(user, policy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindPolicy", reflect.TypeOf((*MockProvider)(nil).BindPolicy), user, policy)
}
