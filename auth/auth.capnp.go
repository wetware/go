// Code generated by capnpc-go. DO NOT EDIT.

package auth

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type Signer capnp.Client

// Signer_TypeID is the unique identifier for the type Signer.
const Signer_TypeID = 0xfdfb2b517fd7915f

func (c Signer) Sign(ctx context.Context, params func(Signer_sign_Params) error) (Signer_sign_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xfdfb2b517fd7915f,
			MethodID:      0,
			InterfaceName: "auth.capnp:Signer",
			MethodName:    "sign",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Signer_sign_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Signer_sign_Results_Future{Future: ans.Future()}, release

}

func (c Signer) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Signer) String() string {
	return "Signer(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Signer) AddRef() Signer {
	return Signer(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Signer) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Signer) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Signer) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Signer) DecodeFromPtr(p capnp.Ptr) Signer {
	return Signer(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Signer) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Signer) IsSame(other Signer) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Signer) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Signer) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Signer_Server is a Signer with a local implementation.
type Signer_Server interface {
	Sign(context.Context, Signer_sign) error
}

// Signer_NewServer creates a new Server from an implementation of Signer_Server.
func Signer_NewServer(s Signer_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Signer_Methods(nil, s), s, c)
}

// Signer_ServerToClient creates a new Client from an implementation of Signer_Server.
// The caller is responsible for calling Release on the returned Client.
func Signer_ServerToClient(s Signer_Server) Signer {
	return Signer(capnp.NewClient(Signer_NewServer(s)))
}

// Signer_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Signer_Methods(methods []server.Method, s Signer_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfdfb2b517fd7915f,
			MethodID:      0,
			InterfaceName: "auth.capnp:Signer",
			MethodName:    "sign",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Sign(ctx, Signer_sign{call})
		},
	})

	return methods
}

// Signer_sign holds the state for a server call to Signer.sign.
// See server.Call for documentation.
type Signer_sign struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Signer_sign) Args() Signer_sign_Params {
	return Signer_sign_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Signer_sign) AllocResults() (Signer_sign_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Signer_sign_Results(r), err
}

// Signer_List is a list of Signer.
type Signer_List = capnp.CapList[Signer]

// NewSigner creates a new list of Signer.
func NewSigner_List(s *capnp.Segment, sz int32) (Signer_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Signer](l), err
}

type Signer_sign_Params capnp.Struct

// Signer_sign_Params_TypeID is the unique identifier for the type Signer_sign_Params.
const Signer_sign_Params_TypeID = 0x935e427d5cc4f53e

func NewSigner_sign_Params(s *capnp.Segment) (Signer_sign_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Signer_sign_Params(st), err
}

func NewRootSigner_sign_Params(s *capnp.Segment) (Signer_sign_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Signer_sign_Params(st), err
}

func ReadRootSigner_sign_Params(msg *capnp.Message) (Signer_sign_Params, error) {
	root, err := msg.Root()
	return Signer_sign_Params(root.Struct()), err
}

func (s Signer_sign_Params) String() string {
	str, _ := text.Marshal(0x935e427d5cc4f53e, capnp.Struct(s))
	return str
}

func (s Signer_sign_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Signer_sign_Params) DecodeFromPtr(p capnp.Ptr) Signer_sign_Params {
	return Signer_sign_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Signer_sign_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Signer_sign_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Signer_sign_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Signer_sign_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Signer_sign_Params) Data() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s Signer_sign_Params) HasData() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Signer_sign_Params) SetData(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// Signer_sign_Params_List is a list of Signer_sign_Params.
type Signer_sign_Params_List = capnp.StructList[Signer_sign_Params]

// NewSigner_sign_Params creates a new list of Signer_sign_Params.
func NewSigner_sign_Params_List(s *capnp.Segment, sz int32) (Signer_sign_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Signer_sign_Params](l), err
}

// Signer_sign_Params_Future is a wrapper for a Signer_sign_Params promised by a client call.
type Signer_sign_Params_Future struct{ *capnp.Future }

func (f Signer_sign_Params_Future) Struct() (Signer_sign_Params, error) {
	p, err := f.Future.Ptr()
	return Signer_sign_Params(p.Struct()), err
}

type Signer_sign_Results capnp.Struct

// Signer_sign_Results_TypeID is the unique identifier for the type Signer_sign_Results.
const Signer_sign_Results_TypeID = 0xec51981217dfdc10

func NewSigner_sign_Results(s *capnp.Segment) (Signer_sign_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Signer_sign_Results(st), err
}

func NewRootSigner_sign_Results(s *capnp.Segment) (Signer_sign_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Signer_sign_Results(st), err
}

func ReadRootSigner_sign_Results(msg *capnp.Message) (Signer_sign_Results, error) {
	root, err := msg.Root()
	return Signer_sign_Results(root.Struct()), err
}

func (s Signer_sign_Results) String() string {
	str, _ := text.Marshal(0xec51981217dfdc10, capnp.Struct(s))
	return str
}

func (s Signer_sign_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Signer_sign_Results) DecodeFromPtr(p capnp.Ptr) Signer_sign_Results {
	return Signer_sign_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Signer_sign_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Signer_sign_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Signer_sign_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Signer_sign_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Signer_sign_Results) RawEnvelope() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s Signer_sign_Results) HasRawEnvelope() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Signer_sign_Results) SetRawEnvelope(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// Signer_sign_Results_List is a list of Signer_sign_Results.
type Signer_sign_Results_List = capnp.StructList[Signer_sign_Results]

// NewSigner_sign_Results creates a new list of Signer_sign_Results.
func NewSigner_sign_Results_List(s *capnp.Segment, sz int32) (Signer_sign_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Signer_sign_Results](l), err
}

// Signer_sign_Results_Future is a wrapper for a Signer_sign_Results promised by a client call.
type Signer_sign_Results_Future struct{ *capnp.Future }

func (f Signer_sign_Results_Future) Struct() (Signer_sign_Results, error) {
	p, err := f.Future.Ptr()
	return Signer_sign_Results(p.Struct()), err
}

type Terminal capnp.Client

// Terminal_TypeID is the unique identifier for the type Terminal.
const Terminal_TypeID = 0xc0c1a3f1fdbabdfd

func (c Terminal) Login(ctx context.Context, params func(Terminal_login_Params) error) (Terminal_login_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc0c1a3f1fdbabdfd,
			MethodID:      0,
			InterfaceName: "auth.capnp:Terminal",
			MethodName:    "login",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Terminal_login_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Terminal_login_Results_Future{Future: ans.Future()}, release

}

func (c Terminal) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Terminal) String() string {
	return "Terminal(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Terminal) AddRef() Terminal {
	return Terminal(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Terminal) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Terminal) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Terminal) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Terminal) DecodeFromPtr(p capnp.Ptr) Terminal {
	return Terminal(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Terminal) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Terminal) IsSame(other Terminal) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Terminal) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Terminal) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Terminal_Server is a Terminal with a local implementation.
type Terminal_Server interface {
	Login(context.Context, Terminal_login) error
}

// Terminal_NewServer creates a new Server from an implementation of Terminal_Server.
func Terminal_NewServer(s Terminal_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Terminal_Methods(nil, s), s, c)
}

// Terminal_ServerToClient creates a new Client from an implementation of Terminal_Server.
// The caller is responsible for calling Release on the returned Client.
func Terminal_ServerToClient(s Terminal_Server) Terminal {
	return Terminal(capnp.NewClient(Terminal_NewServer(s)))
}

// Terminal_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Terminal_Methods(methods []server.Method, s Terminal_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc0c1a3f1fdbabdfd,
			MethodID:      0,
			InterfaceName: "auth.capnp:Terminal",
			MethodName:    "login",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Login(ctx, Terminal_login{call})
		},
	})

	return methods
}

// Terminal_login holds the state for a server call to Terminal.login.
// See server.Call for documentation.
type Terminal_login struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Terminal_login) Args() Terminal_login_Params {
	return Terminal_login_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Terminal_login) AllocResults() (Terminal_login_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Terminal_login_Results(r), err
}

// Terminal_List is a list of Terminal.
type Terminal_List = capnp.CapList[Terminal]

// NewTerminal creates a new list of Terminal.
func NewTerminal_List(s *capnp.Segment, sz int32) (Terminal_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Terminal](l), err
}

type Terminal_login_Params capnp.Struct

// Terminal_login_Params_TypeID is the unique identifier for the type Terminal_login_Params.
const Terminal_login_Params_TypeID = 0xf7531ef46740370e

func NewTerminal_login_Params(s *capnp.Segment) (Terminal_login_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Terminal_login_Params(st), err
}

func NewRootTerminal_login_Params(s *capnp.Segment) (Terminal_login_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Terminal_login_Params(st), err
}

func ReadRootTerminal_login_Params(msg *capnp.Message) (Terminal_login_Params, error) {
	root, err := msg.Root()
	return Terminal_login_Params(root.Struct()), err
}

func (s Terminal_login_Params) String() string {
	str, _ := text.Marshal(0xf7531ef46740370e, capnp.Struct(s))
	return str
}

func (s Terminal_login_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Terminal_login_Params) DecodeFromPtr(p capnp.Ptr) Terminal_login_Params {
	return Terminal_login_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Terminal_login_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Terminal_login_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Terminal_login_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Terminal_login_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Terminal_login_Params) Account() Signer {
	p, _ := capnp.Struct(s).Ptr(0)
	return Signer(p.Interface().Client())
}

func (s Terminal_login_Params) HasAccount() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Terminal_login_Params) SetAccount(v Signer) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Terminal_login_Params_List is a list of Terminal_login_Params.
type Terminal_login_Params_List = capnp.StructList[Terminal_login_Params]

// NewTerminal_login_Params creates a new list of Terminal_login_Params.
func NewTerminal_login_Params_List(s *capnp.Segment, sz int32) (Terminal_login_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Terminal_login_Params](l), err
}

// Terminal_login_Params_Future is a wrapper for a Terminal_login_Params promised by a client call.
type Terminal_login_Params_Future struct{ *capnp.Future }

func (f Terminal_login_Params_Future) Struct() (Terminal_login_Params, error) {
	p, err := f.Future.Ptr()
	return Terminal_login_Params(p.Struct()), err
}
func (p Terminal_login_Params_Future) Account() Signer {
	return Signer(p.Future.Field(0, nil).Client())
}

type Terminal_login_Results capnp.Struct

// Terminal_login_Results_TypeID is the unique identifier for the type Terminal_login_Results.
const Terminal_login_Results_TypeID = 0x9baeae5a95f57921

func NewTerminal_login_Results(s *capnp.Segment) (Terminal_login_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Terminal_login_Results(st), err
}

func NewRootTerminal_login_Results(s *capnp.Segment) (Terminal_login_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Terminal_login_Results(st), err
}

func ReadRootTerminal_login_Results(msg *capnp.Message) (Terminal_login_Results, error) {
	root, err := msg.Root()
	return Terminal_login_Results(root.Struct()), err
}

func (s Terminal_login_Results) String() string {
	str, _ := text.Marshal(0x9baeae5a95f57921, capnp.Struct(s))
	return str
}

func (s Terminal_login_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Terminal_login_Results) DecodeFromPtr(p capnp.Ptr) Terminal_login_Results {
	return Terminal_login_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Terminal_login_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Terminal_login_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Terminal_login_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Terminal_login_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Terminal_login_Results) Stdio() (Socket, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Socket(p.Struct()), err
}

func (s Terminal_login_Results) HasStdio() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Terminal_login_Results) SetStdio(v Socket) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewStdio sets the stdio field to a newly
// allocated Socket struct, preferring placement in s's segment.
func (s Terminal_login_Results) NewStdio() (Socket, error) {
	ss, err := NewSocket(capnp.Struct(s).Segment())
	if err != nil {
		return Socket{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Terminal_login_Results_List is a list of Terminal_login_Results.
type Terminal_login_Results_List = capnp.StructList[Terminal_login_Results]

// NewTerminal_login_Results creates a new list of Terminal_login_Results.
func NewTerminal_login_Results_List(s *capnp.Segment, sz int32) (Terminal_login_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Terminal_login_Results](l), err
}

// Terminal_login_Results_Future is a wrapper for a Terminal_login_Results promised by a client call.
type Terminal_login_Results_Future struct{ *capnp.Future }

func (f Terminal_login_Results_Future) Struct() (Terminal_login_Results, error) {
	p, err := f.Future.Ptr()
	return Terminal_login_Results(p.Struct()), err
}
func (p Terminal_login_Results_Future) Stdio() Socket_Future {
	return Socket_Future{Future: p.Future.Field(0, nil)}
}

type Socket capnp.Struct

// Socket_TypeID is the unique identifier for the type Socket.
const Socket_TypeID = 0xe9d276f95e86c439

func NewSocket(s *capnp.Segment) (Socket, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Socket(st), err
}

func NewRootSocket(s *capnp.Segment) (Socket, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Socket(st), err
}

func ReadRootSocket(msg *capnp.Message) (Socket, error) {
	root, err := msg.Root()
	return Socket(root.Struct()), err
}

func (s Socket) String() string {
	str, _ := text.Marshal(0xe9d276f95e86c439, capnp.Struct(s))
	return str
}

func (s Socket) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Socket) DecodeFromPtr(p capnp.Ptr) Socket {
	return Socket(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Socket) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Socket) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Socket) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Socket) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Socket) Reader() ReadPipe {
	p, _ := capnp.Struct(s).Ptr(0)
	return ReadPipe(p.Interface().Client())
}

func (s Socket) HasReader() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Socket) SetReader(v ReadPipe) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

func (s Socket) Writer() WritePipe {
	p, _ := capnp.Struct(s).Ptr(1)
	return WritePipe(p.Interface().Client())
}

func (s Socket) HasWriter() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Socket) SetWriter(v WritePipe) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(1, in.ToPtr())
}

func (s Socket) Error() WritePipe {
	p, _ := capnp.Struct(s).Ptr(2)
	return WritePipe(p.Interface().Client())
}

func (s Socket) HasError() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Socket) SetError(v WritePipe) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(2, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(2, in.ToPtr())
}

// Socket_List is a list of Socket.
type Socket_List = capnp.StructList[Socket]

// NewSocket creates a new list of Socket.
func NewSocket_List(s *capnp.Segment, sz int32) (Socket_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[Socket](l), err
}

// Socket_Future is a wrapper for a Socket promised by a client call.
type Socket_Future struct{ *capnp.Future }

func (f Socket_Future) Struct() (Socket, error) {
	p, err := f.Future.Ptr()
	return Socket(p.Struct()), err
}
func (p Socket_Future) Reader() ReadPipe {
	return ReadPipe(p.Future.Field(0, nil).Client())
}

func (p Socket_Future) Writer() WritePipe {
	return WritePipe(p.Future.Field(1, nil).Client())
}

func (p Socket_Future) Error() WritePipe {
	return WritePipe(p.Future.Field(2, nil).Client())
}

type ReadPipe capnp.Client

// ReadPipe_TypeID is the unique identifier for the type ReadPipe.
const ReadPipe_TypeID = 0x966ff0807a81207f

func (c ReadPipe) Read(ctx context.Context, params func(ReadPipe_read_Params) error) (ReadPipe_read_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x966ff0807a81207f,
			MethodID:      0,
			InterfaceName: "auth.capnp:ReadPipe",
			MethodName:    "read",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ReadPipe_read_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return ReadPipe_read_Results_Future{Future: ans.Future()}, release

}

func (c ReadPipe) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c ReadPipe) String() string {
	return "ReadPipe(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c ReadPipe) AddRef() ReadPipe {
	return ReadPipe(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c ReadPipe) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c ReadPipe) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c ReadPipe) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (ReadPipe) DecodeFromPtr(p capnp.Ptr) ReadPipe {
	return ReadPipe(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c ReadPipe) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c ReadPipe) IsSame(other ReadPipe) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c ReadPipe) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c ReadPipe) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A ReadPipe_Server is a ReadPipe with a local implementation.
type ReadPipe_Server interface {
	Read(context.Context, ReadPipe_read) error
}

// ReadPipe_NewServer creates a new Server from an implementation of ReadPipe_Server.
func ReadPipe_NewServer(s ReadPipe_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(ReadPipe_Methods(nil, s), s, c)
}

// ReadPipe_ServerToClient creates a new Client from an implementation of ReadPipe_Server.
// The caller is responsible for calling Release on the returned Client.
func ReadPipe_ServerToClient(s ReadPipe_Server) ReadPipe {
	return ReadPipe(capnp.NewClient(ReadPipe_NewServer(s)))
}

// ReadPipe_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func ReadPipe_Methods(methods []server.Method, s ReadPipe_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x966ff0807a81207f,
			MethodID:      0,
			InterfaceName: "auth.capnp:ReadPipe",
			MethodName:    "read",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Read(ctx, ReadPipe_read{call})
		},
	})

	return methods
}

// ReadPipe_read holds the state for a server call to ReadPipe.read.
// See server.Call for documentation.
type ReadPipe_read struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ReadPipe_read) Args() ReadPipe_read_Params {
	return ReadPipe_read_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c ReadPipe_read) AllocResults() (ReadPipe_read_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ReadPipe_read_Results(r), err
}

// ReadPipe_List is a list of ReadPipe.
type ReadPipe_List = capnp.CapList[ReadPipe]

// NewReadPipe creates a new list of ReadPipe.
func NewReadPipe_List(s *capnp.Segment, sz int32) (ReadPipe_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[ReadPipe](l), err
}

type ReadPipe_read_Params capnp.Struct

// ReadPipe_read_Params_TypeID is the unique identifier for the type ReadPipe_read_Params.
const ReadPipe_read_Params_TypeID = 0xc8be2460b12985d8

func NewReadPipe_read_Params(s *capnp.Segment) (ReadPipe_read_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ReadPipe_read_Params(st), err
}

func NewRootReadPipe_read_Params(s *capnp.Segment) (ReadPipe_read_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ReadPipe_read_Params(st), err
}

func ReadRootReadPipe_read_Params(msg *capnp.Message) (ReadPipe_read_Params, error) {
	root, err := msg.Root()
	return ReadPipe_read_Params(root.Struct()), err
}

func (s ReadPipe_read_Params) String() string {
	str, _ := text.Marshal(0xc8be2460b12985d8, capnp.Struct(s))
	return str
}

func (s ReadPipe_read_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ReadPipe_read_Params) DecodeFromPtr(p capnp.Ptr) ReadPipe_read_Params {
	return ReadPipe_read_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ReadPipe_read_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ReadPipe_read_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ReadPipe_read_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ReadPipe_read_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ReadPipe_read_Params) Size() int64 {
	return int64(capnp.Struct(s).Uint64(0))
}

func (s ReadPipe_read_Params) SetSize(v int64) {
	capnp.Struct(s).SetUint64(0, uint64(v))
}

// ReadPipe_read_Params_List is a list of ReadPipe_read_Params.
type ReadPipe_read_Params_List = capnp.StructList[ReadPipe_read_Params]

// NewReadPipe_read_Params creates a new list of ReadPipe_read_Params.
func NewReadPipe_read_Params_List(s *capnp.Segment, sz int32) (ReadPipe_read_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[ReadPipe_read_Params](l), err
}

// ReadPipe_read_Params_Future is a wrapper for a ReadPipe_read_Params promised by a client call.
type ReadPipe_read_Params_Future struct{ *capnp.Future }

func (f ReadPipe_read_Params_Future) Struct() (ReadPipe_read_Params, error) {
	p, err := f.Future.Ptr()
	return ReadPipe_read_Params(p.Struct()), err
}

type ReadPipe_read_Results capnp.Struct

// ReadPipe_read_Results_TypeID is the unique identifier for the type ReadPipe_read_Results.
const ReadPipe_read_Results_TypeID = 0xd919dc773f131641

func NewReadPipe_read_Results(s *capnp.Segment) (ReadPipe_read_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ReadPipe_read_Results(st), err
}

func NewRootReadPipe_read_Results(s *capnp.Segment) (ReadPipe_read_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ReadPipe_read_Results(st), err
}

func ReadRootReadPipe_read_Results(msg *capnp.Message) (ReadPipe_read_Results, error) {
	root, err := msg.Root()
	return ReadPipe_read_Results(root.Struct()), err
}

func (s ReadPipe_read_Results) String() string {
	str, _ := text.Marshal(0xd919dc773f131641, capnp.Struct(s))
	return str
}

func (s ReadPipe_read_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ReadPipe_read_Results) DecodeFromPtr(p capnp.Ptr) ReadPipe_read_Results {
	return ReadPipe_read_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ReadPipe_read_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ReadPipe_read_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ReadPipe_read_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ReadPipe_read_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ReadPipe_read_Results) Data() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s ReadPipe_read_Results) HasData() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ReadPipe_read_Results) SetData(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s ReadPipe_read_Results) Eof() bool {
	return capnp.Struct(s).Bit(0)
}

func (s ReadPipe_read_Results) SetEof(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// ReadPipe_read_Results_List is a list of ReadPipe_read_Results.
type ReadPipe_read_Results_List = capnp.StructList[ReadPipe_read_Results]

// NewReadPipe_read_Results creates a new list of ReadPipe_read_Results.
func NewReadPipe_read_Results_List(s *capnp.Segment, sz int32) (ReadPipe_read_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[ReadPipe_read_Results](l), err
}

// ReadPipe_read_Results_Future is a wrapper for a ReadPipe_read_Results promised by a client call.
type ReadPipe_read_Results_Future struct{ *capnp.Future }

func (f ReadPipe_read_Results_Future) Struct() (ReadPipe_read_Results, error) {
	p, err := f.Future.Ptr()
	return ReadPipe_read_Results(p.Struct()), err
}

type WritePipe capnp.Client

// WritePipe_TypeID is the unique identifier for the type WritePipe.
const WritePipe_TypeID = 0xe799f0f6902560e1

func (c WritePipe) Write(ctx context.Context, params func(WritePipe_write_Params) error) (WritePipe_write_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe799f0f6902560e1,
			MethodID:      0,
			InterfaceName: "auth.capnp:WritePipe",
			MethodName:    "write",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WritePipe_write_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return WritePipe_write_Results_Future{Future: ans.Future()}, release

}

func (c WritePipe) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c WritePipe) String() string {
	return "WritePipe(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c WritePipe) AddRef() WritePipe {
	return WritePipe(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c WritePipe) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c WritePipe) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c WritePipe) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (WritePipe) DecodeFromPtr(p capnp.Ptr) WritePipe {
	return WritePipe(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c WritePipe) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c WritePipe) IsSame(other WritePipe) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c WritePipe) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c WritePipe) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A WritePipe_Server is a WritePipe with a local implementation.
type WritePipe_Server interface {
	Write(context.Context, WritePipe_write) error
}

// WritePipe_NewServer creates a new Server from an implementation of WritePipe_Server.
func WritePipe_NewServer(s WritePipe_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(WritePipe_Methods(nil, s), s, c)
}

// WritePipe_ServerToClient creates a new Client from an implementation of WritePipe_Server.
// The caller is responsible for calling Release on the returned Client.
func WritePipe_ServerToClient(s WritePipe_Server) WritePipe {
	return WritePipe(capnp.NewClient(WritePipe_NewServer(s)))
}

// WritePipe_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func WritePipe_Methods(methods []server.Method, s WritePipe_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe799f0f6902560e1,
			MethodID:      0,
			InterfaceName: "auth.capnp:WritePipe",
			MethodName:    "write",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Write(ctx, WritePipe_write{call})
		},
	})

	return methods
}

// WritePipe_write holds the state for a server call to WritePipe.write.
// See server.Call for documentation.
type WritePipe_write struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WritePipe_write) Args() WritePipe_write_Params {
	return WritePipe_write_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c WritePipe_write) AllocResults() (WritePipe_write_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return WritePipe_write_Results(r), err
}

// WritePipe_List is a list of WritePipe.
type WritePipe_List = capnp.CapList[WritePipe]

// NewWritePipe creates a new list of WritePipe.
func NewWritePipe_List(s *capnp.Segment, sz int32) (WritePipe_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[WritePipe](l), err
}

type WritePipe_write_Params capnp.Struct

// WritePipe_write_Params_TypeID is the unique identifier for the type WritePipe_write_Params.
const WritePipe_write_Params_TypeID = 0xea7a87eb81dfc7da

func NewWritePipe_write_Params(s *capnp.Segment) (WritePipe_write_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WritePipe_write_Params(st), err
}

func NewRootWritePipe_write_Params(s *capnp.Segment) (WritePipe_write_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WritePipe_write_Params(st), err
}

func ReadRootWritePipe_write_Params(msg *capnp.Message) (WritePipe_write_Params, error) {
	root, err := msg.Root()
	return WritePipe_write_Params(root.Struct()), err
}

func (s WritePipe_write_Params) String() string {
	str, _ := text.Marshal(0xea7a87eb81dfc7da, capnp.Struct(s))
	return str
}

func (s WritePipe_write_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WritePipe_write_Params) DecodeFromPtr(p capnp.Ptr) WritePipe_write_Params {
	return WritePipe_write_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WritePipe_write_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WritePipe_write_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WritePipe_write_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WritePipe_write_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WritePipe_write_Params) Data() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s WritePipe_write_Params) HasData() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WritePipe_write_Params) SetData(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// WritePipe_write_Params_List is a list of WritePipe_write_Params.
type WritePipe_write_Params_List = capnp.StructList[WritePipe_write_Params]

// NewWritePipe_write_Params creates a new list of WritePipe_write_Params.
func NewWritePipe_write_Params_List(s *capnp.Segment, sz int32) (WritePipe_write_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[WritePipe_write_Params](l), err
}

// WritePipe_write_Params_Future is a wrapper for a WritePipe_write_Params promised by a client call.
type WritePipe_write_Params_Future struct{ *capnp.Future }

func (f WritePipe_write_Params_Future) Struct() (WritePipe_write_Params, error) {
	p, err := f.Future.Ptr()
	return WritePipe_write_Params(p.Struct()), err
}

type WritePipe_write_Results capnp.Struct

// WritePipe_write_Results_TypeID is the unique identifier for the type WritePipe_write_Results.
const WritePipe_write_Results_TypeID = 0xf174c999479d29d6

func NewWritePipe_write_Results(s *capnp.Segment) (WritePipe_write_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return WritePipe_write_Results(st), err
}

func NewRootWritePipe_write_Results(s *capnp.Segment) (WritePipe_write_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return WritePipe_write_Results(st), err
}

func ReadRootWritePipe_write_Results(msg *capnp.Message) (WritePipe_write_Results, error) {
	root, err := msg.Root()
	return WritePipe_write_Results(root.Struct()), err
}

func (s WritePipe_write_Results) String() string {
	str, _ := text.Marshal(0xf174c999479d29d6, capnp.Struct(s))
	return str
}

func (s WritePipe_write_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WritePipe_write_Results) DecodeFromPtr(p capnp.Ptr) WritePipe_write_Results {
	return WritePipe_write_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WritePipe_write_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WritePipe_write_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WritePipe_write_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WritePipe_write_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WritePipe_write_Results) N() int64 {
	return int64(capnp.Struct(s).Uint64(0))
}

func (s WritePipe_write_Results) SetN(v int64) {
	capnp.Struct(s).SetUint64(0, uint64(v))
}

// WritePipe_write_Results_List is a list of WritePipe_write_Results.
type WritePipe_write_Results_List = capnp.StructList[WritePipe_write_Results]

// NewWritePipe_write_Results creates a new list of WritePipe_write_Results.
func NewWritePipe_write_Results_List(s *capnp.Segment, sz int32) (WritePipe_write_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[WritePipe_write_Results](l), err
}

// WritePipe_write_Results_Future is a wrapper for a WritePipe_write_Results promised by a client call.
type WritePipe_write_Results_Future struct{ *capnp.Future }

func (f WritePipe_write_Results_Future) Struct() (WritePipe_write_Results, error) {
	p, err := f.Future.Ptr()
	return WritePipe_write_Results(p.Struct()), err
}

const schema_e82706a772b0927b = "x\xda\x94\x94_\x88\x1bU\x14\xc6\xcfw\xefL#\xb6" +
	"q\xf7\xee\xec\xfa\xef\xc1X\xc9\xa2\xa9\x1ajU\xa4\x01" +
	"M,-\xb1\xe0B\xeenA\x10\xa9\x1d\x931\x0ef" +
	"g\xc2d\xd2\xe0\x8a\xac\xfb\xa0\xe2\x9b\xae(\x16\xf1\xa5" +
	">\x88\x82U_\x05E\xa1\xa0>V\xa8\x1a),>" +
	"\x88\xad\x7f\xa0\x15\xab\xac\x12F\xee\xcdN&\x7fV\xc1" +
	"\xb70\xf7\xe4w\xbe\xef\x9c\xef\xde\xbd\xe7Q2\xeeH" +
	"o\x98\xc4\xe4AsGt\xdf\xe5\xd3\x8f<s\xe0\xe8" +
	"+$f@d\"Ed\x9de\xbf\x11\xac.+\x12" +
	"\xa2\xd5\x1b\xd7V\x9e\xbd\xe8\xbfFb'\x8f\x9e^\xff" +
	" x{\xc7\xcd\xe7\x89`m\xb2\x93\x16\xb8*\xef\xb1" +
	"\xb25\xaf~E\xbb\x9f\xba\xfc\xea\xc3\xa7N\xbdAb" +
	"6\x86\xdd\x99\xe63 Xs\\\xd1z\x1f\x7f\xd4\xbb" +
	"\xf4\xd6g\x9fN\xd0\xee\xe6'\xad{5m?/[" +
	"\xb6\xa6}\xfb\\\xee\xc3c\xd9O\xbe 9\x0b\x10\x19" +
	"\x8av\x983E[\xd0\xb4\xfb\xaf\xb6\x8a\x9ds\xd7u" +
	"\xb7\x0a\xfa\xfd\x96\xf9\x95\xaa\xa2\xcd;\x84\xe8\xfbc\xf3" +
	"/\xfdq\xf1\xc4\x8f\x13\xfd\xce\xf0w\xad\xae\xeew\x96" +
	"\x97\xad\x9e\xee\xb7\xff\xf4\xf3G7\x8f\x7fu\x81\xc4N" +
	"$\xc5\xa6\xae\xfa\x81\xaf[\xbf\xea_\x17\xf8\xfb\x84\xe8" +
	"\xbb\xcf7\xd6~~a\xe5'\x12s\x83\xcek\x86v" +
	"\xfa\xa2\xa1\xb4M\x9f\xdb\xb8f\xe6u\xf9\xcb\xf0\\\xdf" +
	"1\xfe\"X\xef\xe9\xf3\xafso\x96O|\x19^\"" +
	"970w\xc6\xb8^\x01\xba\xba\xe0\xaa{J\xf5\xdf" +
	"oX\xfasx\x96\x9b\x86\xf6\x06S\x15<\xfa\xf27" +
	"\xab\xf2\xd6\xbf{\x13\xdev\x9b\xebV\xceT\x0d\xe7\xcd" +
	"\xb2\xb5`\xa6\xe8\xb6\xc8n\x87O\xe4\xabv\x93y\xcd" +
	"\xc2\x92[\xf7\x9c \xdfr\xeb^\xb6\x92\xb1\x03{\xb9" +
	"%\x0dn\x10\x19 \x12\xe9=D\xf2\x0a\x0e9\xcb0" +
	"U\xb3C\x1bibH\x13\x06\x0cx\xcd\xc2\xa2c\xd7" +
	"*)\xb7\xe9T\x00ipsh]\x88\xd7\"\xc4\x1e" +
	"b\xc2LM\x05\x8e]+\xa1\x82\x04\xc1\xbdf\xe1\x88" +
	"\x13,\xbb\x9e\xdd\xc87\xfc\xba\xebe\x17\x9dV\xbb\x11" +
	"bD\xca\xbeDJ\xa6\x15\xd6\\\x1f\xd3\xc9\x96\x08\x98" +
	"\x1eS\xa5\x91)\xcfn$\xaa\xe21\"\xce\xa6\x10\xfb" +
	"\xb4\xaa\x8cn;)K;s\x9bN^\xa9\xceV\xf4" +
	"x\xe8\xdf\xe6\xd3rW\x1c\x98\xc4`\xd2\x7fQ\xfa\xde" +
	"Z\xfa\x8f1'\xa78Y\x0e\xb9\x97\x01\xd0\x01\x16\xb7" +
	"\xdfD$o\xe1\x90w\x8d\xcd>\xe5\xf8\x8f\x03\xc4\x80" +
	"1\xc7\x0f\x05n\xe8LUF\x16\x11g\x13q\xc6\x06" +
	"\x96;\xaaz\xd4\xb2\x82,\xf9\xd5'\x1d\x84\x8a\xb0k" +
	"\xa0\xefP\x81H\x968\xe4\x83\x0c\"\x16xX}<" +
	"\xc8!+\x0c\x82\xb1Y0\"\xb1\xa0\xd6\xf4\x00\x87<" +
	"\xc2PT~\x9d\x00\"y8\x08\x10\x84\xa2\xee\xad\x0e" +
	"\x06w\xb2\x7f\x90q\x82\xc0\xdf\xe6\xfb\xc88\xb5M=" +
	"O\x8d\xe9\xaf\x05\xff/\xb6\xe3\xd1_,\xf6\xb72\x0c" +
	"y\x8cH\xee\xe2\x90\xd72D\x81\xdd9\xe4\x1dw\x1a" +
	"\x94\xf2\x9b\xce\x04m;Uz\xcd|\x948\x93\xc8\x82" +
	"\xb7mT\xc6\xee\xc1V\xe2F\"w \x81\xac\xda\xd5" +
	"\xaa\xdf\xf6B\x88\xe4\x01\x18\x1b\x18b\xa3\x08\x92P\xc4" +
	"\xef<\xe2\x87ip;\xd50t&\xfe\x09\x00\x00\xff" +
	"\xff\xb9\x02\x9b\x1d"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_e82706a772b0927b,
		Nodes: []uint64{
			0x935e427d5cc4f53e,
			0x966ff0807a81207f,
			0x9baeae5a95f57921,
			0xc0c1a3f1fdbabdfd,
			0xc8be2460b12985d8,
			0xd919dc773f131641,
			0xe799f0f6902560e1,
			0xe9d276f95e86c439,
			0xea7a87eb81dfc7da,
			0xec51981217dfdc10,
			0xf174c999479d29d6,
			0xf7531ef46740370e,
			0xfdfb2b517fd7915f,
		},
		Compressed: true,
	})
}
