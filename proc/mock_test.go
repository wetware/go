// Code generated by MockGen. DO NOT EDIT.
// Source: proc.go
//
// Generated by this command:
//
//	mockgen -source=proc.go -destination=mock_test.go -package=proc_test
//

// Package proc_test is a generated GoMock package.
package proc_test

import (
	context "context"
	reflect "reflect"

	api "github.com/tetratelabs/wazero/api"
	gomock "go.uber.org/mock/gomock"
)

// MockMethod is a mock of Method interface.
type MockMethod struct {
	ctrl     *gomock.Controller
	recorder *MockMethodMockRecorder
	isgomock struct{}
}

// MockMethodMockRecorder is the mock recorder for MockMethod.
type MockMethodMockRecorder struct {
	mock *MockMethod
}

// NewMockMethod creates a new mock instance.
func NewMockMethod(ctrl *gomock.Controller) *MockMethod {
	mock := &MockMethod{ctrl: ctrl}
	mock.recorder = &MockMethodMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMethod) EXPECT() *MockMethodMockRecorder {
	return m.recorder
}

// CallWithStack mocks base method.
func (m *MockMethod) CallWithStack(arg0 context.Context, arg1 []uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallWithStack", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallWithStack indicates an expected call of CallWithStack.
func (mr *MockMethodMockRecorder) CallWithStack(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallWithStack", reflect.TypeOf((*MockMethod)(nil).CallWithStack), arg0, arg1)
}

// MockModule is a mock of Module interface.
type MockModule struct {
	ctrl     *gomock.Controller
	recorder *MockModuleMockRecorder
	isgomock struct{}
}

// MockModuleMockRecorder is the mock recorder for MockModule.
type MockModuleMockRecorder struct {
	mock *MockModule
}

// NewMockModule creates a new mock instance.
func NewMockModule(ctrl *gomock.Controller) *MockModule {
	mock := &MockModule{ctrl: ctrl}
	mock.recorder = &MockModuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModule) EXPECT() *MockModuleMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockModule) Close(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockModuleMockRecorder) Close(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockModule)(nil).Close), arg0)
}

// ExportedFunction mocks base method.
func (m *MockModule) ExportedFunction(arg0 string) api.Function {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportedFunction", arg0)
	ret0, _ := ret[0].(api.Function)
	return ret0
}

// ExportedFunction indicates an expected call of ExportedFunction.
func (mr *MockModuleMockRecorder) ExportedFunction(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportedFunction", reflect.TypeOf((*MockModule)(nil).ExportedFunction), arg0)
}

// Name mocks base method.
func (m *MockModule) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockModuleMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockModule)(nil).Name))
}
