// Code generated by capnpc-go. DO NOT EDIT.

package glia

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
)

type Status uint16

// Status_TypeID is the unique identifier for the type Status.
const Status_TypeID = 0xa522fe15565ea6a9

// Values of Status.
const (
	Status_unset          Status = 0
	Status_ok             Status = 1
	Status_invalidRequest Status = 2
	Status_routingError   Status = 3
	Status_procNotFound   Status = 4
	Status_invalidMethod  Status = 5
	Status_methodNotFound Status = 6
	Status_guestError     Status = 7
)

// String returns the enum's constant name.
func (c Status) String() string {
	switch c {
	case Status_unset:
		return "unset"
	case Status_ok:
		return "ok"
	case Status_invalidRequest:
		return "invalidRequest"
	case Status_routingError:
		return "routingError"
	case Status_procNotFound:
		return "procNotFound"
	case Status_invalidMethod:
		return "invalidMethod"
	case Status_methodNotFound:
		return "methodNotFound"
	case Status_guestError:
		return "guestError"

	default:
		return ""
	}
}

// StatusFromString returns the enum value with a name,
// or the zero value if there's no such value.
func StatusFromString(c string) Status {
	switch c {
	case "unset":
		return Status_unset
	case "ok":
		return Status_ok
	case "invalidRequest":
		return Status_invalidRequest
	case "routingError":
		return Status_routingError
	case "procNotFound":
		return Status_procNotFound
	case "invalidMethod":
		return Status_invalidMethod
	case "methodNotFound":
		return Status_methodNotFound
	case "guestError":
		return Status_guestError

	default:
		return 0
	}
}

type Status_List = capnp.EnumList[Status]

func NewStatus_List(s *capnp.Segment, sz int32) (Status_List, error) {
	return capnp.NewEnumList[Status](s, sz)
}

type CallData capnp.Struct

// CallData_TypeID is the unique identifier for the type CallData.
const CallData_TypeID = 0xb063cb51875ce2d8

func NewCallData(s *capnp.Segment) (CallData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CallData(st), err
}

func NewRootCallData(s *capnp.Segment) (CallData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CallData(st), err
}

func ReadRootCallData(msg *capnp.Message) (CallData, error) {
	root, err := msg.Root()
	return CallData(root.Struct()), err
}

func (s CallData) String() string {
	str, _ := text.Marshal(0xb063cb51875ce2d8, capnp.Struct(s))
	return str
}

func (s CallData) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CallData) DecodeFromPtr(p capnp.Ptr) CallData {
	return CallData(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CallData) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CallData) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CallData) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CallData) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CallData) Stack() (capnp.UInt64List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.UInt64List(p.List()), err
}

func (s CallData) HasStack() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CallData) SetStack(v capnp.UInt64List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewStack sets the stack field to a newly
// allocated capnp.UInt64List, preferring placement in s's segment.
func (s CallData) NewStack(n int32) (capnp.UInt64List, error) {
	l, err := capnp.NewUInt64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.UInt64List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s CallData) Method() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s CallData) HasMethod() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CallData) MethodBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s CallData) SetMethod(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// CallData_List is a list of CallData.
type CallData_List = capnp.StructList[CallData]

// NewCallData creates a new list of CallData.
func NewCallData_List(s *capnp.Segment, sz int32) (CallData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[CallData](l), err
}

// CallData_Future is a wrapper for a CallData promised by a client call.
type CallData_Future struct{ *capnp.Future }

func (f CallData_Future) Struct() (CallData, error) {
	p, err := f.Future.Ptr()
	return CallData(p.Struct()), err
}

type Result capnp.Struct

// Result_TypeID is the unique identifier for the type Result.
const Result_TypeID = 0x85366ce08c8fc52b

func NewResult(s *capnp.Segment) (Result, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Result(st), err
}

func NewRootResult(s *capnp.Segment) (Result, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Result(st), err
}

func ReadRootResult(msg *capnp.Message) (Result, error) {
	root, err := msg.Root()
	return Result(root.Struct()), err
}

func (s Result) String() string {
	str, _ := text.Marshal(0x85366ce08c8fc52b, capnp.Struct(s))
	return str
}

func (s Result) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Result) DecodeFromPtr(p capnp.Ptr) Result {
	return Result(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Result) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Result) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Result) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Result) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Result) Stack() (capnp.UInt64List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.UInt64List(p.List()), err
}

func (s Result) HasStack() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Result) SetStack(v capnp.UInt64List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewStack sets the stack field to a newly
// allocated capnp.UInt64List, preferring placement in s's segment.
func (s Result) NewStack(n int32) (capnp.UInt64List, error) {
	l, err := capnp.NewUInt64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.UInt64List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Result) Status() Status {
	return Status(capnp.Struct(s).Uint16(0))
}

func (s Result) SetStatus(v Status) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s Result) Info() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Result) HasInfo() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Result) InfoBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Result) SetInfo(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// Result_List is a list of Result.
type Result_List = capnp.StructList[Result]

// NewResult creates a new list of Result.
func NewResult_List(s *capnp.Segment, sz int32) (Result_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[Result](l), err
}

// Result_Future is a wrapper for a Result promised by a client call.
type Result_Future struct{ *capnp.Future }

func (f Result_Future) Struct() (Result, error) {
	p, err := f.Future.Ptr()
	return Result(p.Struct()), err
}

const schema_f381800d6f8057ad = "x\xdat\x90\xc1k\x13A\x14\xc6\xbfo&i\x94\xa4" +
	"\xae\xc3\xd6\x8b(Q\xd1\x83\x8a\x82\x05E\x0b%\x11\x9b" +
	"B\x0f-\x9d*j\xa5\x8aK\xb2\xc6\xb5\xebN\xdc\x9d" +
	"U\xf0T\x0f\xe2E\x10\xfa'\x08\x0a\x1eD\xff\x09\x11" +
	"\x11\x0f\xde\x04/\xe2\xbf\xe0\xdd\x91Y\x89\xa5HO\xef" +
	"c\xe6{\xef}\xef\xb7\xf7{\xb7vf\xd2\x08\x08}" +
	"\xa0>\xe1N~x\xf1\xfcGz\xee)t\x93to" +
	"\xafm\x98\xc9\x8d'\xbfP\x17\x0d <\xc8\xcd\xf0\x18" +
	"\xbd:\xccw\xa0{\xf3\xfa\xd6\xd5}\xbf\x8f\xbc\x82j" +
	"\x8a-/\x18~\xe2f\xf8\xb52~\xe1G\xd0}\xfb" +
	"\xb9\xf6L\x7f\xee\xbf\x87j\xfe7tA\xbc\x0cu\xa5" +
	"\x16\xc5#\x9cr\xc34\x89N\xf7\xa3\x11\xb3\xd1\xccJ" +
	"\\\x94)\xed2\xa9[\xb2\x06\xd4\x08\xa8\xde4\xa0\xbb" +
	"\x92zM\x90\x9c\xa2\x7f[\x9d\x01\xf4\x15I}[P" +
	"\x09NQ\x00\xea\xe6\x09@_\x97\xd4\x03\xc1va\xa3" +
	"\xfe:\xf7\x80\xcb\x92\xdc\x0d\xe1e\xa7\xb0\x91-\x0b\x06" +
	"[\x97\x80\x0c\xc0 \xc9\xee\x18\xb6 \xd8\x02\xb7%\xba" +
	"\xec;X\xf8D\x87\xaa%\xab\xd3\xbeG\xe9\xfd\x00\x85" +
	"Zx\x0cP\xaa\xde=\x805u\xd1\x97\xba\x9a\xcd\x01" +
	"N\xa8\x0b\xfe\xaf\xa1\xce\xde\x00\xdaeV\xc4V\x9au" +
	"\x97d\x0f\xa34\x19\xac\xa0\x13?(\xe3\xc2\xba\xdc\x94" +
	"6\xc9\x86=\x04ynr7\xcaM\x7f\xc9\xd8y\x04" +
	"\xa6\xcc\x06c\xfb\"\xda\xb1\xbdk\x06\xee~U\x96\x0c" +
	":v\xbe2\x0c\xfd\x90^\x9eC\x9a|[\xf0KQ" +
	"\x9a\xce5\"\x1b\xf9\xe8\xbb\xfe\xc1<\xeea\x1e\x95\xd4" +
	"]A5\xa69\xebi\x9e\x97\xd4s;\x81\xfb\xbbw" +
	"L\xe8O\x00\x00\x00\xff\xff\xdb\xc7\x8dX"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_f381800d6f8057ad,
		Nodes: []uint64{
			0x85366ce08c8fc52b,
			0xa522fe15565ea6a9,
			0xb063cb51875ce2d8,
		},
		Compressed: true,
	})
}
