// Code generated by capnpc-go. DO NOT EDIT.

package glia

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
)

type CallData capnp.Struct

// CallData_TypeID is the unique identifier for the type CallData.
const CallData_TypeID = 0xb063cb51875ce2d8

func NewCallData(s *capnp.Segment) (CallData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CallData(st), err
}

func NewRootCallData(s *capnp.Segment) (CallData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CallData(st), err
}

func ReadRootCallData(msg *capnp.Message) (CallData, error) {
	root, err := msg.Root()
	return CallData(root.Struct()), err
}

func (s CallData) String() string {
	str, _ := text.Marshal(0xb063cb51875ce2d8, capnp.Struct(s))
	return str
}

func (s CallData) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CallData) DecodeFromPtr(p capnp.Ptr) CallData {
	return CallData(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CallData) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CallData) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CallData) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CallData) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CallData) Stack() (capnp.UInt64List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.UInt64List(p.List()), err
}

func (s CallData) HasStack() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CallData) SetStack(v capnp.UInt64List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewStack sets the stack field to a newly
// allocated capnp.UInt64List, preferring placement in s's segment.
func (s CallData) NewStack(n int32) (capnp.UInt64List, error) {
	l, err := capnp.NewUInt64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.UInt64List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s CallData) Method() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s CallData) HasMethod() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CallData) MethodBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s CallData) SetMethod(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// CallData_List is a list of CallData.
type CallData_List = capnp.StructList[CallData]

// NewCallData creates a new list of CallData.
func NewCallData_List(s *capnp.Segment, sz int32) (CallData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[CallData](l), err
}

// CallData_Future is a wrapper for a CallData promised by a client call.
type CallData_Future struct{ *capnp.Future }

func (f CallData_Future) Struct() (CallData, error) {
	p, err := f.Future.Ptr()
	return CallData(p.Struct()), err
}

type Header capnp.Struct

// Header_TypeID is the unique identifier for the type Header.
const Header_TypeID = 0xb00b0243e9bd824d

func NewHeader(s *capnp.Segment) (Header, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Header(st), err
}

func NewRootHeader(s *capnp.Segment) (Header, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Header(st), err
}

func ReadRootHeader(msg *capnp.Message) (Header, error) {
	root, err := msg.Root()
	return Header(root.Struct()), err
}

func (s Header) String() string {
	str, _ := text.Marshal(0xb00b0243e9bd824d, capnp.Struct(s))
	return str
}

func (s Header) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Header) DecodeFromPtr(p capnp.Ptr) Header {
	return Header(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Header) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Header) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Header) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Header) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Header) Proc() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Header) HasProc() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Header) ProcBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Header) SetProc(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Header) Method() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Header) HasMethod() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Header) MethodBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Header) SetMethod(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Header) Stack() (capnp.UInt64List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.UInt64List(p.List()), err
}

func (s Header) HasStack() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Header) SetStack(v capnp.UInt64List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewStack sets the stack field to a newly
// allocated capnp.UInt64List, preferring placement in s's segment.
func (s Header) NewStack(n int32) (capnp.UInt64List, error) {
	l, err := capnp.NewUInt64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.UInt64List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}

// Header_List is a list of Header.
type Header_List = capnp.StructList[Header]

// NewHeader creates a new list of Header.
func NewHeader_List(s *capnp.Segment, sz int32) (Header_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[Header](l), err
}

// Header_Future is a wrapper for a Header promised by a client call.
type Header_Future struct{ *capnp.Future }

func (f Header_Future) Struct() (Header, error) {
	p, err := f.Future.Ptr()
	return Header(p.Struct()), err
}

type Result capnp.Struct

// Result_TypeID is the unique identifier for the type Result.
const Result_TypeID = 0x85366ce08c8fc52b

func NewResult(s *capnp.Segment) (Result, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Result(st), err
}

func NewRootResult(s *capnp.Segment) (Result, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Result(st), err
}

func ReadRootResult(msg *capnp.Message) (Result, error) {
	root, err := msg.Root()
	return Result(root.Struct()), err
}

func (s Result) String() string {
	str, _ := text.Marshal(0x85366ce08c8fc52b, capnp.Struct(s))
	return str
}

func (s Result) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Result) DecodeFromPtr(p capnp.Ptr) Result {
	return Result(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Result) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Result) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Result) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Result) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Result) Stack() (capnp.UInt64List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.UInt64List(p.List()), err
}

func (s Result) HasStack() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Result) SetStack(v capnp.UInt64List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewStack sets the stack field to a newly
// allocated capnp.UInt64List, preferring placement in s's segment.
func (s Result) NewStack(n int32) (capnp.UInt64List, error) {
	l, err := capnp.NewUInt64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.UInt64List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Result) Status() Result_Status {
	return Result_Status(capnp.Struct(s).Uint16(0))
}

func (s Result) SetStatus(v Result_Status) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s Result) Info() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Result) HasInfo() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Result) InfoBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Result) SetInfo(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// Result_List is a list of Result.
type Result_List = capnp.StructList[Result]

// NewResult creates a new list of Result.
func NewResult_List(s *capnp.Segment, sz int32) (Result_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[Result](l), err
}

// Result_Future is a wrapper for a Result promised by a client call.
type Result_Future struct{ *capnp.Future }

func (f Result_Future) Struct() (Result, error) {
	p, err := f.Future.Ptr()
	return Result(p.Struct()), err
}

type Result_Status uint16

// Result_Status_TypeID is the unique identifier for the type Result_Status.
const Result_Status_TypeID = 0xe56103a0267e998a

// Values of Result_Status.
const (
	Result_Status_unset          Result_Status = 0
	Result_Status_ok             Result_Status = 1
	Result_Status_invalidRequest Result_Status = 2
	Result_Status_routingError   Result_Status = 3
	Result_Status_procNotFound   Result_Status = 4
	Result_Status_invalidMethod  Result_Status = 5
	Result_Status_methodNotFound Result_Status = 6
	Result_Status_guestError     Result_Status = 7
)

// String returns the enum's constant name.
func (c Result_Status) String() string {
	switch c {
	case Result_Status_unset:
		return "unset"
	case Result_Status_ok:
		return "ok"
	case Result_Status_invalidRequest:
		return "invalidRequest"
	case Result_Status_routingError:
		return "routingError"
	case Result_Status_procNotFound:
		return "procNotFound"
	case Result_Status_invalidMethod:
		return "invalidMethod"
	case Result_Status_methodNotFound:
		return "methodNotFound"
	case Result_Status_guestError:
		return "guestError"

	default:
		return ""
	}
}

// Result_StatusFromString returns the enum value with a name,
// or the zero value if there's no such value.
func Result_StatusFromString(c string) Result_Status {
	switch c {
	case "unset":
		return Result_Status_unset
	case "ok":
		return Result_Status_ok
	case "invalidRequest":
		return Result_Status_invalidRequest
	case "routingError":
		return Result_Status_routingError
	case "procNotFound":
		return Result_Status_procNotFound
	case "invalidMethod":
		return Result_Status_invalidMethod
	case "methodNotFound":
		return Result_Status_methodNotFound
	case "guestError":
		return Result_Status_guestError

	default:
		return 0
	}
}

type Result_Status_List = capnp.EnumList[Result_Status]

func NewResult_Status_List(s *capnp.Segment, sz int32) (Result_Status_List, error) {
	return capnp.NewEnumList[Result_Status](s, sz)
}

const schema_f381800d6f8057ad = "x\xdat\xd1Ak\xd4@\x1c\x05\xf0\xf7fv[K" +
	"[\xc3\x98\x82 H{P\xa1\x15\x8b\x16\x14-\x94\xad" +
	"\xb4[\xba\xe0\x96\x9d*\xe8J\x05\xc3n\\\xd7\xc6d" +
	"M&\x0a\x1e\xa4\x0a\"\x88 \xf4\xe6M\xbc\x17\xf5\xe0" +
	"\xd1\xa3\x14\xf4\x0bx\x14\xc1\x83g?@d\xb2n\xbb" +
	"+z\xca$y\xf9\xbf_fNOq\xb1pf|" +
	"W@\xe8\xa9\xe2Pv\xf2\xd3\xcb\x17\xdf\x82sO\xa1" +
	"G\xc9l\xe7\xeaV4\xbe\xf5\xf8\x17\x8ab\x18p+" +
	"\xdcv5\x0f\x03n\x9do\xc1\xac\xfa\xe4\xe3\xcf%1" +
	"\xfa\x0ej\xb4?+m\x96b\xdb\x1d\xc9\xbf*\x0a\x9b" +
	"\xfd\xfa}\xe3\x99\xfe\xd2\xf8;\x9b'v\xc4\x1b\xf7C" +
	"\xbez/\x1e\x80\xd9\xf3W\x8fN\xbc\x96\xde\x0f\xa8C" +
	"b_\x04\xbaG\xe5gw:\x1f\x7f\\\xee\xe2T\xd6" +
	"\x0a\xda\xdel\xc3\xeb0\xec\xcc\xaf\xfbI\x1a\xd0\xe8\x02" +
	"\xfb\x07p\xbet\xd9x&M\xf4\x98,\x00\x05\x02\xaa" +
	"<\x07\xe8EI\xbd!HN\xd0>\xab\xcf\x03\xfa\x8a" +
	"\xa4\xbe)\xa8\x04'(\x00uc\x06\xd0\xd7$uS" +
	"p21^c\x93\x07\xc1\x9a$G \xec\xb2\x94\xe4" +
	"\xb3\xe9\xec7\x82t@\xa7\x1d\xde\x8a8\x06\xc11p" +
	"\x80\xb9\xea{M\x9fq\x8d\xec\x17\xcd\xfc\x11]\x12T" +
	"=R\xc5\x92\x96%u\xcd\x92D\x97T\xb5\xf6\xd5." +
	"\xc9\xe9\xc4Q\xa3WR\xba\xeb\x9b\xdbQ\xb3w\xfbO" +
	"\xee\x00d\xc9\x0b\x82\xe5a\xcfx\x96r`\x8f2m" +
	"\x0b\x8eI\xea\xc5>\xca\x82\xa5\x9c\x97\xd4\xcb\xff\xdb\x88" +
	"\xc1\xf6\xbd\"\xd1;\x183\xdb=\x06\xc0\xd6M\xe5\xff" +
	"R\x9f\xb3\xbb\xa5\xf4\x11\x80BU\x1e\x02\x94\xaa|\x07" +
	"`A]\xb4\x97\xa2Z\x88\x01\x0e\xa9\x0b\xf6\xdd\xb0:" +
	"{\x1d\x98L\xc3\xc472\xda\xcc\xda\xe1}/h7" +
	"\xd7Q\xf2\xef\xa5~b\xb28JM;l\x95\xe1\xc4" +
	"q\x14gvw\xd6\"\xb3\x02'J\xc3f/^\xc5" +
	"dN\xcd\xba\xe2\xb5\x08%\xb3\x92\x07ZvH9\x8e" +
	"!\xa3\xf8w\x00\x00\x00\xff\xff{\x85\xb7\xdb"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_f381800d6f8057ad,
		Nodes: []uint64{
			0x85366ce08c8fc52b,
			0xb00b0243e9bd824d,
			0xb063cb51875ce2d8,
			0xe56103a0267e998a,
		},
		Compressed: true,
	})
}
