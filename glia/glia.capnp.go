// Code generated by capnpc-go. DO NOT EDIT.

package glia

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
)

type Header capnp.Struct

// Header_TypeID is the unique identifier for the type Header.
const Header_TypeID = 0xb00b0243e9bd824d

func NewHeader(s *capnp.Segment) (Header, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Header(st), err
}

func NewRootHeader(s *capnp.Segment) (Header, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Header(st), err
}

func ReadRootHeader(msg *capnp.Message) (Header, error) {
	root, err := msg.Root()
	return Header(root.Struct()), err
}

func (s Header) String() string {
	str, _ := text.Marshal(0xb00b0243e9bd824d, capnp.Struct(s))
	return str
}

func (s Header) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Header) DecodeFromPtr(p capnp.Ptr) Header {
	return Header(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Header) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Header) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Header) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Header) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Header) Peer() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s Header) HasPeer() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Header) SetPeer(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s Header) Proc() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Header) HasProc() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Header) ProcBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Header) SetProc(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Header) Method() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s Header) HasMethod() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Header) MethodBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s Header) SetMethod(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s Header) Stack() (capnp.UInt64List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return capnp.UInt64List(p.List()), err
}

func (s Header) HasStack() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Header) SetStack(v capnp.UInt64List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewStack sets the stack field to a newly
// allocated capnp.UInt64List, preferring placement in s's segment.
func (s Header) NewStack(n int32) (capnp.UInt64List, error) {
	l, err := capnp.NewUInt64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.UInt64List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}

// Header_List is a list of Header.
type Header_List = capnp.StructList[Header]

// NewHeader creates a new list of Header.
func NewHeader_List(s *capnp.Segment, sz int32) (Header_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return capnp.StructList[Header](l), err
}

// Header_Future is a wrapper for a Header promised by a client call.
type Header_Future struct{ *capnp.Future }

func (f Header_Future) Struct() (Header, error) {
	p, err := f.Future.Ptr()
	return Header(p.Struct()), err
}

type Result capnp.Struct

// Result_TypeID is the unique identifier for the type Result.
const Result_TypeID = 0x85366ce08c8fc52b

func NewResult(s *capnp.Segment) (Result, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Result(st), err
}

func NewRootResult(s *capnp.Segment) (Result, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Result(st), err
}

func ReadRootResult(msg *capnp.Message) (Result, error) {
	root, err := msg.Root()
	return Result(root.Struct()), err
}

func (s Result) String() string {
	str, _ := text.Marshal(0x85366ce08c8fc52b, capnp.Struct(s))
	return str
}

func (s Result) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Result) DecodeFromPtr(p capnp.Ptr) Result {
	return Result(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Result) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Result) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Result) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Result) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Result) Stack() (capnp.UInt64List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.UInt64List(p.List()), err
}

func (s Result) HasStack() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Result) SetStack(v capnp.UInt64List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewStack sets the stack field to a newly
// allocated capnp.UInt64List, preferring placement in s's segment.
func (s Result) NewStack(n int32) (capnp.UInt64List, error) {
	l, err := capnp.NewUInt64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.UInt64List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Result) Status() Result_Status {
	return Result_Status(capnp.Struct(s).Uint16(0))
}

func (s Result) SetStatus(v Result_Status) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s Result) Info() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Result) HasInfo() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Result) InfoBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Result) SetInfo(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// Result_List is a list of Result.
type Result_List = capnp.StructList[Result]

// NewResult creates a new list of Result.
func NewResult_List(s *capnp.Segment, sz int32) (Result_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[Result](l), err
}

// Result_Future is a wrapper for a Result promised by a client call.
type Result_Future struct{ *capnp.Future }

func (f Result_Future) Struct() (Result, error) {
	p, err := f.Future.Ptr()
	return Result(p.Struct()), err
}

type Result_Status uint16

// Result_Status_TypeID is the unique identifier for the type Result_Status.
const Result_Status_TypeID = 0xe56103a0267e998a

// Values of Result_Status.
const (
	Result_Status_unset          Result_Status = 0
	Result_Status_ok             Result_Status = 1
	Result_Status_invalidRequest Result_Status = 2
	Result_Status_routingError   Result_Status = 3
	Result_Status_procNotFound   Result_Status = 4
	Result_Status_invalidMethod  Result_Status = 5
	Result_Status_methodNotFound Result_Status = 6
	Result_Status_guestError     Result_Status = 7
)

// String returns the enum's constant name.
func (c Result_Status) String() string {
	switch c {
	case Result_Status_unset:
		return "unset"
	case Result_Status_ok:
		return "ok"
	case Result_Status_invalidRequest:
		return "invalidRequest"
	case Result_Status_routingError:
		return "routingError"
	case Result_Status_procNotFound:
		return "procNotFound"
	case Result_Status_invalidMethod:
		return "invalidMethod"
	case Result_Status_methodNotFound:
		return "methodNotFound"
	case Result_Status_guestError:
		return "guestError"

	default:
		return ""
	}
}

// Result_StatusFromString returns the enum value with a name,
// or the zero value if there's no such value.
func Result_StatusFromString(c string) Result_Status {
	switch c {
	case "unset":
		return Result_Status_unset
	case "ok":
		return Result_Status_ok
	case "invalidRequest":
		return Result_Status_invalidRequest
	case "routingError":
		return Result_Status_routingError
	case "procNotFound":
		return Result_Status_procNotFound
	case "invalidMethod":
		return Result_Status_invalidMethod
	case "methodNotFound":
		return Result_Status_methodNotFound
	case "guestError":
		return Result_Status_guestError

	default:
		return 0
	}
}

type Result_Status_List = capnp.EnumList[Result_Status]

func NewResult_Status_List(s *capnp.Segment, sz int32) (Result_Status_List, error) {
	return capnp.NewEnumList[Result_Status](s, sz)
}

const schema_f381800d6f8057ad = "x\xdal\x90\xc1k\x13A\x18\xc5\xdf\x9b\xd9\xb4H\x12" +
	"\xb7\xe3\x06\x04Q\xe2E\x0fJ\x0b\x16\x14\x0cH*\x92" +
	"\xa2\x87\x96N\x15\xb4R\xa1KvM\xd6\xa6;qw" +
	"\xd6\x83\x07\xa9\xa2\x17\x11\x84\xde\xbc\xf9\x0f\x88\xfe\x03=" +
	"\x16\xd1\xbb\x07\x0f\x82\x17\x11\xcf\x9eee\x12\xd2V\xf0" +
	"\xb4\xdf~\xf3x\xef\xf7\xbe\x99?\x0b\xde\x85\xba\x11\x10" +
	"\xfade\xaa<\xbf\xf7\xfa\xd5\xf7\xc1\xa5\x17\xd0U\xb2" +
	"|w{\xdb\xd4\xb7\x9f\xfeFEL\x03\xc1)\xee\x04" +
	"gx\x1c\x08f\xf9\x1e,\x97\x9e\xed\xfe\xba&\xaa\x1f" +
	"\xa0\xaa\x87\xb5\x9e\xd3~\xe1N\xf0\x8dn\xfa\xca\x9f`" +
	"\xf9\xf2\xcd\x93\xb3oe\xf8\x03\xea\x988H\x01\x83]" +
	"\xf19\xf84\xb2\xdf\x13\x1f1[\xf6\x06I8\xd7\x0d" +
	"\x87L\x87\xad\xd58/\x06\xb4\xda\xe3a\x03\xb6\xda7" +
	"mh\x8b\\\xd7\xa4\x07x\x04Tg\x1e\xd0\x0b\x92z" +
	"]\x90l\xd0\xed\xd6Z\x80\xbe%\xa97\x04\x95`\x83" +
	"\x02P\xf7\xce\x01\xfa\x8e\xa4\x8e\x04\x9b\xb9\x0d\xbb\x9b<" +
	"\x0a\xaeH\xf2\x08\x84\x1b\xdb\xf9\xc8\x9b\xfeA\"H\x1f" +
	"\xf4\x93\xf4\xbea\x0d\x825\xf0\x1f\xcc\xebq\x18\xc5\xcc" +
	"VH=\xb3O\x14\xba\xa0uI\xdd\x17T\x13\xa4\xd8" +
	"-7$\xf5\xc0!\x891R\xe28#I=\x14T" +
	"R6(\x01\xb5\xe5\x0a\xf5%\xf5sA\x7f\x18\xc7\x19" +
	"\xeb\x10\xac\x83\xfe03\xdd\x09F{+\xb6}\x13M" +
	"~\xff[h\x1fUL.j\xe7\xc6\xf7\x03\x1c\xf2\xe9" +
	"\x11\xc4\xda\xbc\xab\xa9\xf4\x09\x80B\xddx\x0cP\xaa\xce" +
	"\x03\x80\x9e\xba\xea>\x15u%\x038\xa5.\xbb\xb7i" +
	"u\xf1.\xd0,\xd2<\xb6\xd2l\x96I\xfa(\x1c$" +
	"\xd1*\xda\xf1\xc3\"\xcem\x99\x99\xc2&i\xaf\x03?" +
	"\xcbLV:\xe8ec\x17\xe1\x9b\"\x8d&\xf2%4" +
	"G\xfc\xe5\xb8\xc6\xb2A\xdb.\x8e\x04=g\xd2\xc92" +
	"H\x93\xfd\x0d\x00\x00\xff\xff\xaa\xff\xa1t"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_f381800d6f8057ad,
		Nodes: []uint64{
			0x85366ce08c8fc52b,
			0xb00b0243e9bd824d,
			0xe56103a0267e998a,
		},
		Compressed: true,
	})
}
