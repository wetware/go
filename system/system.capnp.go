// Code generated by capnpc-go. DO NOT EDIT.

package system

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	strconv "strconv"
)

type Console capnp.Client

// Console_TypeID is the unique identifier for the type Console.
const Console_TypeID = 0xf819f53a0739f5f5

func (c Console) Println(ctx context.Context, params func(Console_println_Params) error) (Console_println_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf819f53a0739f5f5,
			MethodID:      0,
			InterfaceName: "system.capnp:Console",
			MethodName:    "println",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Console_println_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Console_println_Results_Future{Future: ans.Future()}, release

}

func (c Console) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Console) String() string {
	return "Console(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Console) AddRef() Console {
	return Console(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Console) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Console) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Console) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Console) DecodeFromPtr(p capnp.Ptr) Console {
	return Console(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Console) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Console) IsSame(other Console) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Console) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Console) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Console_Server is a Console with a local implementation.
type Console_Server interface {
	Println(context.Context, Console_println) error
}

// Console_NewServer creates a new Server from an implementation of Console_Server.
func Console_NewServer(s Console_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Console_Methods(nil, s), s, c)
}

// Console_ServerToClient creates a new Client from an implementation of Console_Server.
// The caller is responsible for calling Release on the returned Client.
func Console_ServerToClient(s Console_Server) Console {
	return Console(capnp.NewClient(Console_NewServer(s)))
}

// Console_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Console_Methods(methods []server.Method, s Console_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf819f53a0739f5f5,
			MethodID:      0,
			InterfaceName: "system.capnp:Console",
			MethodName:    "println",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Println(ctx, Console_println{call})
		},
	})

	return methods
}

// Console_println holds the state for a server call to Console.println.
// See server.Call for documentation.
type Console_println struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Console_println) Args() Console_println_Params {
	return Console_println_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Console_println) AllocResults() (Console_println_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Console_println_Results(r), err
}

// Console_List is a list of Console.
type Console_List = capnp.CapList[Console]

// NewConsole creates a new list of Console.
func NewConsole_List(s *capnp.Segment, sz int32) (Console_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Console](l), err
}

type Console_println_Params capnp.Struct

// Console_println_Params_TypeID is the unique identifier for the type Console_println_Params.
const Console_println_Params_TypeID = 0xf43754e45cb00c82

func NewConsole_println_Params(s *capnp.Segment) (Console_println_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Console_println_Params(st), err
}

func NewRootConsole_println_Params(s *capnp.Segment) (Console_println_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Console_println_Params(st), err
}

func ReadRootConsole_println_Params(msg *capnp.Message) (Console_println_Params, error) {
	root, err := msg.Root()
	return Console_println_Params(root.Struct()), err
}

func (s Console_println_Params) String() string {
	str, _ := text.Marshal(0xf43754e45cb00c82, capnp.Struct(s))
	return str
}

func (s Console_println_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Console_println_Params) DecodeFromPtr(p capnp.Ptr) Console_println_Params {
	return Console_println_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Console_println_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Console_println_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Console_println_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Console_println_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Console_println_Params) Output() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Console_println_Params) HasOutput() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Console_println_Params) OutputBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Console_println_Params) SetOutput(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Console_println_Params_List is a list of Console_println_Params.
type Console_println_Params_List = capnp.StructList[Console_println_Params]

// NewConsole_println_Params creates a new list of Console_println_Params.
func NewConsole_println_Params_List(s *capnp.Segment, sz int32) (Console_println_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Console_println_Params](l), err
}

// Console_println_Params_Future is a wrapper for a Console_println_Params promised by a client call.
type Console_println_Params_Future struct{ *capnp.Future }

func (f Console_println_Params_Future) Struct() (Console_println_Params, error) {
	p, err := f.Future.Ptr()
	return Console_println_Params(p.Struct()), err
}

type Console_println_Results capnp.Struct

// Console_println_Results_TypeID is the unique identifier for the type Console_println_Results.
const Console_println_Results_TypeID = 0x993f8e39a739cb40

func NewConsole_println_Results(s *capnp.Segment) (Console_println_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Console_println_Results(st), err
}

func NewRootConsole_println_Results(s *capnp.Segment) (Console_println_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Console_println_Results(st), err
}

func ReadRootConsole_println_Results(msg *capnp.Message) (Console_println_Results, error) {
	root, err := msg.Root()
	return Console_println_Results(root.Struct()), err
}

func (s Console_println_Results) String() string {
	str, _ := text.Marshal(0x993f8e39a739cb40, capnp.Struct(s))
	return str
}

func (s Console_println_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Console_println_Results) DecodeFromPtr(p capnp.Ptr) Console_println_Results {
	return Console_println_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Console_println_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Console_println_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Console_println_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Console_println_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Console_println_Results) N() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s Console_println_Results) SetN(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

// Console_println_Results_List is a list of Console_println_Results.
type Console_println_Results_List = capnp.StructList[Console_println_Results]

// NewConsole_println_Results creates a new list of Console_println_Results.
func NewConsole_println_Results_List(s *capnp.Segment, sz int32) (Console_println_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Console_println_Results](l), err
}

// Console_println_Results_Future is a wrapper for a Console_println_Results promised by a client call.
type Console_println_Results_Future struct{ *capnp.Future }

func (f Console_println_Results_Future) Struct() (Console_println_Results, error) {
	p, err := f.Future.Ptr()
	return Console_println_Results(p.Struct()), err
}

type Cell capnp.Client

// Cell_TypeID is the unique identifier for the type Cell.
const Cell_TypeID = 0x83eba8ab13ee9256

func (c Cell) Wait(ctx context.Context, params func(Cell_wait_Params) error) (Cell_wait_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x83eba8ab13ee9256,
			MethodID:      0,
			InterfaceName: "system.capnp:Cell",
			MethodName:    "wait",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Cell_wait_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Cell_wait_Results_Future{Future: ans.Future()}, release

}

func (c Cell) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Cell) String() string {
	return "Cell(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Cell) AddRef() Cell {
	return Cell(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Cell) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Cell) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Cell) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Cell) DecodeFromPtr(p capnp.Ptr) Cell {
	return Cell(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Cell) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Cell) IsSame(other Cell) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Cell) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Cell) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Cell_Server is a Cell with a local implementation.
type Cell_Server interface {
	Wait(context.Context, Cell_wait) error
}

// Cell_NewServer creates a new Server from an implementation of Cell_Server.
func Cell_NewServer(s Cell_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Cell_Methods(nil, s), s, c)
}

// Cell_ServerToClient creates a new Client from an implementation of Cell_Server.
// The caller is responsible for calling Release on the returned Client.
func Cell_ServerToClient(s Cell_Server) Cell {
	return Cell(capnp.NewClient(Cell_NewServer(s)))
}

// Cell_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Cell_Methods(methods []server.Method, s Cell_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x83eba8ab13ee9256,
			MethodID:      0,
			InterfaceName: "system.capnp:Cell",
			MethodName:    "wait",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Wait(ctx, Cell_wait{call})
		},
	})

	return methods
}

// Cell_wait holds the state for a server call to Cell.wait.
// See server.Call for documentation.
type Cell_wait struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Cell_wait) Args() Cell_wait_Params {
	return Cell_wait_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Cell_wait) AllocResults() (Cell_wait_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cell_wait_Results(r), err
}

// Cell_List is a list of Cell.
type Cell_List = capnp.CapList[Cell]

// NewCell creates a new list of Cell.
func NewCell_List(s *capnp.Segment, sz int32) (Cell_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Cell](l), err
}

type Cell_MaybeError capnp.Struct
type Cell_MaybeError_err Cell_MaybeError
type Cell_MaybeError_Which uint16

const (
	Cell_MaybeError_Which_ok  Cell_MaybeError_Which = 0
	Cell_MaybeError_Which_err Cell_MaybeError_Which = 1
)

func (w Cell_MaybeError_Which) String() string {
	const s = "okerr"
	switch w {
	case Cell_MaybeError_Which_ok:
		return s[0:2]
	case Cell_MaybeError_Which_err:
		return s[2:5]

	}
	return "Cell_MaybeError_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Cell_MaybeError_TypeID is the unique identifier for the type Cell_MaybeError.
const Cell_MaybeError_TypeID = 0x831c74d453c6c7eb

func NewCell_MaybeError(s *capnp.Segment) (Cell_MaybeError, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Cell_MaybeError(st), err
}

func NewRootCell_MaybeError(s *capnp.Segment) (Cell_MaybeError, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Cell_MaybeError(st), err
}

func ReadRootCell_MaybeError(msg *capnp.Message) (Cell_MaybeError, error) {
	root, err := msg.Root()
	return Cell_MaybeError(root.Struct()), err
}

func (s Cell_MaybeError) String() string {
	str, _ := text.Marshal(0x831c74d453c6c7eb, capnp.Struct(s))
	return str
}

func (s Cell_MaybeError) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Cell_MaybeError) DecodeFromPtr(p capnp.Ptr) Cell_MaybeError {
	return Cell_MaybeError(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Cell_MaybeError) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s Cell_MaybeError) Which() Cell_MaybeError_Which {
	return Cell_MaybeError_Which(capnp.Struct(s).Uint16(0))
}
func (s Cell_MaybeError) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Cell_MaybeError) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Cell_MaybeError) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Cell_MaybeError) SetOk() {
	capnp.Struct(s).SetUint16(0, 0)

}

func (s Cell_MaybeError) Err() Cell_MaybeError_err { return Cell_MaybeError_err(s) }

func (s Cell_MaybeError) SetErr() {
	capnp.Struct(s).SetUint16(0, 1)
}

func (s Cell_MaybeError_err) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Cell_MaybeError_err) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Cell_MaybeError_err) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Cell_MaybeError_err) Status() uint32 {
	return capnp.Struct(s).Uint32(4)
}

func (s Cell_MaybeError_err) SetStatus(v uint32) {
	capnp.Struct(s).SetUint32(4, v)
}

func (s Cell_MaybeError_err) Body() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s Cell_MaybeError_err) HasBody() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Cell_MaybeError_err) SetBody(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// Cell_MaybeError_List is a list of Cell_MaybeError.
type Cell_MaybeError_List = capnp.StructList[Cell_MaybeError]

// NewCell_MaybeError creates a new list of Cell_MaybeError.
func NewCell_MaybeError_List(s *capnp.Segment, sz int32) (Cell_MaybeError_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Cell_MaybeError](l), err
}

// Cell_MaybeError_Future is a wrapper for a Cell_MaybeError promised by a client call.
type Cell_MaybeError_Future struct{ *capnp.Future }

func (f Cell_MaybeError_Future) Struct() (Cell_MaybeError, error) {
	p, err := f.Future.Ptr()
	return Cell_MaybeError(p.Struct()), err
}
func (p Cell_MaybeError_Future) Err() Cell_MaybeError_err_Future {
	return Cell_MaybeError_err_Future{p.Future}
}

// Cell_MaybeError_err_Future is a wrapper for a Cell_MaybeError_err promised by a client call.
type Cell_MaybeError_err_Future struct{ *capnp.Future }

func (f Cell_MaybeError_err_Future) Struct() (Cell_MaybeError_err, error) {
	p, err := f.Future.Ptr()
	return Cell_MaybeError_err(p.Struct()), err
}

type Cell_wait_Params capnp.Struct

// Cell_wait_Params_TypeID is the unique identifier for the type Cell_wait_Params.
const Cell_wait_Params_TypeID = 0xe7b7b5f24b1523f5

func NewCell_wait_Params(s *capnp.Segment) (Cell_wait_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Cell_wait_Params(st), err
}

func NewRootCell_wait_Params(s *capnp.Segment) (Cell_wait_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Cell_wait_Params(st), err
}

func ReadRootCell_wait_Params(msg *capnp.Message) (Cell_wait_Params, error) {
	root, err := msg.Root()
	return Cell_wait_Params(root.Struct()), err
}

func (s Cell_wait_Params) String() string {
	str, _ := text.Marshal(0xe7b7b5f24b1523f5, capnp.Struct(s))
	return str
}

func (s Cell_wait_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Cell_wait_Params) DecodeFromPtr(p capnp.Ptr) Cell_wait_Params {
	return Cell_wait_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Cell_wait_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Cell_wait_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Cell_wait_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Cell_wait_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Cell_wait_Params_List is a list of Cell_wait_Params.
type Cell_wait_Params_List = capnp.StructList[Cell_wait_Params]

// NewCell_wait_Params creates a new list of Cell_wait_Params.
func NewCell_wait_Params_List(s *capnp.Segment, sz int32) (Cell_wait_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Cell_wait_Params](l), err
}

// Cell_wait_Params_Future is a wrapper for a Cell_wait_Params promised by a client call.
type Cell_wait_Params_Future struct{ *capnp.Future }

func (f Cell_wait_Params_Future) Struct() (Cell_wait_Params, error) {
	p, err := f.Future.Ptr()
	return Cell_wait_Params(p.Struct()), err
}

type Cell_wait_Results capnp.Struct

// Cell_wait_Results_TypeID is the unique identifier for the type Cell_wait_Results.
const Cell_wait_Results_TypeID = 0xcb1c584d5e6ec593

func NewCell_wait_Results(s *capnp.Segment) (Cell_wait_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cell_wait_Results(st), err
}

func NewRootCell_wait_Results(s *capnp.Segment) (Cell_wait_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cell_wait_Results(st), err
}

func ReadRootCell_wait_Results(msg *capnp.Message) (Cell_wait_Results, error) {
	root, err := msg.Root()
	return Cell_wait_Results(root.Struct()), err
}

func (s Cell_wait_Results) String() string {
	str, _ := text.Marshal(0xcb1c584d5e6ec593, capnp.Struct(s))
	return str
}

func (s Cell_wait_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Cell_wait_Results) DecodeFromPtr(p capnp.Ptr) Cell_wait_Results {
	return Cell_wait_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Cell_wait_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Cell_wait_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Cell_wait_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Cell_wait_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Cell_wait_Results) Result() (Cell_MaybeError, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Cell_MaybeError(p.Struct()), err
}

func (s Cell_wait_Results) HasResult() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Cell_wait_Results) SetResult(v Cell_MaybeError) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewResult sets the result field to a newly
// allocated Cell_MaybeError struct, preferring placement in s's segment.
func (s Cell_wait_Results) NewResult() (Cell_MaybeError, error) {
	ss, err := NewCell_MaybeError(capnp.Struct(s).Segment())
	if err != nil {
		return Cell_MaybeError{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Cell_wait_Results_List is a list of Cell_wait_Results.
type Cell_wait_Results_List = capnp.StructList[Cell_wait_Results]

// NewCell_wait_Results creates a new list of Cell_wait_Results.
func NewCell_wait_Results_List(s *capnp.Segment, sz int32) (Cell_wait_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Cell_wait_Results](l), err
}

// Cell_wait_Results_Future is a wrapper for a Cell_wait_Results promised by a client call.
type Cell_wait_Results_Future struct{ *capnp.Future }

func (f Cell_wait_Results_Future) Struct() (Cell_wait_Results, error) {
	p, err := f.Future.Ptr()
	return Cell_wait_Results(p.Struct()), err
}
func (p Cell_wait_Results_Future) Result() Cell_MaybeError_Future {
	return Cell_MaybeError_Future{Future: p.Future.Field(0, nil)}
}

type Executor capnp.Client

// Executor_TypeID is the unique identifier for the type Executor.
const Executor_TypeID = 0xccef5e6e46834543

func (c Executor) Spawn(ctx context.Context, params func(Executor_spawn_Params) error) (Executor_spawn_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xccef5e6e46834543,
			MethodID:      0,
			InterfaceName: "system.capnp:Executor",
			MethodName:    "spawn",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 5}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Executor_spawn_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Executor_spawn_Results_Future{Future: ans.Future()}, release

}

func (c Executor) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Executor) String() string {
	return "Executor(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Executor) AddRef() Executor {
	return Executor(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Executor) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Executor) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Executor) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Executor) DecodeFromPtr(p capnp.Ptr) Executor {
	return Executor(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Executor) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Executor) IsSame(other Executor) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Executor) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Executor) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Executor_Server is a Executor with a local implementation.
type Executor_Server interface {
	Spawn(context.Context, Executor_spawn) error
}

// Executor_NewServer creates a new Server from an implementation of Executor_Server.
func Executor_NewServer(s Executor_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Executor_Methods(nil, s), s, c)
}

// Executor_ServerToClient creates a new Client from an implementation of Executor_Server.
// The caller is responsible for calling Release on the returned Client.
func Executor_ServerToClient(s Executor_Server) Executor {
	return Executor(capnp.NewClient(Executor_NewServer(s)))
}

// Executor_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Executor_Methods(methods []server.Method, s Executor_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xccef5e6e46834543,
			MethodID:      0,
			InterfaceName: "system.capnp:Executor",
			MethodName:    "spawn",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Spawn(ctx, Executor_spawn{call})
		},
	})

	return methods
}

// Executor_spawn holds the state for a server call to Executor.spawn.
// See server.Call for documentation.
type Executor_spawn struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Executor_spawn) Args() Executor_spawn_Params {
	return Executor_spawn_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Executor_spawn) AllocResults() (Executor_spawn_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_spawn_Results(r), err
}

// Executor_List is a list of Executor.
type Executor_List = capnp.CapList[Executor]

// NewExecutor creates a new list of Executor.
func NewExecutor_List(s *capnp.Segment, sz int32) (Executor_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Executor](l), err
}

type Executor_CapDescriptor capnp.Struct

// Executor_CapDescriptor_TypeID is the unique identifier for the type Executor_CapDescriptor.
const Executor_CapDescriptor_TypeID = 0xf30cce4f6b9ea63a

func NewExecutor_CapDescriptor(s *capnp.Segment) (Executor_CapDescriptor, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Executor_CapDescriptor(st), err
}

func NewRootExecutor_CapDescriptor(s *capnp.Segment) (Executor_CapDescriptor, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Executor_CapDescriptor(st), err
}

func ReadRootExecutor_CapDescriptor(msg *capnp.Message) (Executor_CapDescriptor, error) {
	root, err := msg.Root()
	return Executor_CapDescriptor(root.Struct()), err
}

func (s Executor_CapDescriptor) String() string {
	str, _ := text.Marshal(0xf30cce4f6b9ea63a, capnp.Struct(s))
	return str
}

func (s Executor_CapDescriptor) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Executor_CapDescriptor) DecodeFromPtr(p capnp.Ptr) Executor_CapDescriptor {
	return Executor_CapDescriptor(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Executor_CapDescriptor) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Executor_CapDescriptor) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Executor_CapDescriptor) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Executor_CapDescriptor) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Executor_CapDescriptor) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Executor_CapDescriptor) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Executor_CapDescriptor) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Executor_CapDescriptor) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Executor_CapDescriptor) Client() capnp.Client {
	p, _ := capnp.Struct(s).Ptr(1)
	return p.Interface().Client()
}

func (s Executor_CapDescriptor) HasClient() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Executor_CapDescriptor) SetClient(c capnp.Client) error {
	if !c.IsValid() {
		return capnp.Struct(s).SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(c))
	return capnp.Struct(s).SetPtr(1, in.ToPtr())
}

// Executor_CapDescriptor_List is a list of Executor_CapDescriptor.
type Executor_CapDescriptor_List = capnp.StructList[Executor_CapDescriptor]

// NewExecutor_CapDescriptor creates a new list of Executor_CapDescriptor.
func NewExecutor_CapDescriptor_List(s *capnp.Segment, sz int32) (Executor_CapDescriptor_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Executor_CapDescriptor](l), err
}

// Executor_CapDescriptor_Future is a wrapper for a Executor_CapDescriptor promised by a client call.
type Executor_CapDescriptor_Future struct{ *capnp.Future }

func (f Executor_CapDescriptor_Future) Struct() (Executor_CapDescriptor, error) {
	p, err := f.Future.Ptr()
	return Executor_CapDescriptor(p.Struct()), err
}
func (p Executor_CapDescriptor_Future) Client() capnp.Client {
	return p.Future.Field(1, nil).Client()
}

type Executor_OptionalCell capnp.Struct
type Executor_OptionalCell_err Executor_OptionalCell
type Executor_OptionalCell_Which uint16

const (
	Executor_OptionalCell_Which_cell Executor_OptionalCell_Which = 0
	Executor_OptionalCell_Which_err  Executor_OptionalCell_Which = 1
)

func (w Executor_OptionalCell_Which) String() string {
	const s = "cellerr"
	switch w {
	case Executor_OptionalCell_Which_cell:
		return s[0:4]
	case Executor_OptionalCell_Which_err:
		return s[4:7]

	}
	return "Executor_OptionalCell_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Executor_OptionalCell_TypeID is the unique identifier for the type Executor_OptionalCell.
const Executor_OptionalCell_TypeID = 0xb7eddbdee842c46a

func NewExecutor_OptionalCell(s *capnp.Segment) (Executor_OptionalCell, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Executor_OptionalCell(st), err
}

func NewRootExecutor_OptionalCell(s *capnp.Segment) (Executor_OptionalCell, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Executor_OptionalCell(st), err
}

func ReadRootExecutor_OptionalCell(msg *capnp.Message) (Executor_OptionalCell, error) {
	root, err := msg.Root()
	return Executor_OptionalCell(root.Struct()), err
}

func (s Executor_OptionalCell) String() string {
	str, _ := text.Marshal(0xb7eddbdee842c46a, capnp.Struct(s))
	return str
}

func (s Executor_OptionalCell) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Executor_OptionalCell) DecodeFromPtr(p capnp.Ptr) Executor_OptionalCell {
	return Executor_OptionalCell(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Executor_OptionalCell) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s Executor_OptionalCell) Which() Executor_OptionalCell_Which {
	return Executor_OptionalCell_Which(capnp.Struct(s).Uint16(0))
}
func (s Executor_OptionalCell) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Executor_OptionalCell) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Executor_OptionalCell) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Executor_OptionalCell) Cell() Cell {
	if capnp.Struct(s).Uint16(0) != 0 {
		panic("Which() != cell")
	}
	p, _ := capnp.Struct(s).Ptr(0)
	return Cell(p.Interface().Client())
}

func (s Executor_OptionalCell) HasCell() bool {
	if capnp.Struct(s).Uint16(0) != 0 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Executor_OptionalCell) SetCell(v Cell) error {
	capnp.Struct(s).SetUint16(0, 0)
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

func (s Executor_OptionalCell) Err() Executor_OptionalCell_err { return Executor_OptionalCell_err(s) }

func (s Executor_OptionalCell) SetErr() {
	capnp.Struct(s).SetUint16(0, 1)
}

func (s Executor_OptionalCell_err) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Executor_OptionalCell_err) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Executor_OptionalCell_err) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Executor_OptionalCell_err) Status() uint32 {
	return capnp.Struct(s).Uint32(4)
}

func (s Executor_OptionalCell_err) SetStatus(v uint32) {
	capnp.Struct(s).SetUint32(4, v)
}

func (s Executor_OptionalCell_err) Body() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s Executor_OptionalCell_err) HasBody() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Executor_OptionalCell_err) SetBody(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// Executor_OptionalCell_List is a list of Executor_OptionalCell.
type Executor_OptionalCell_List = capnp.StructList[Executor_OptionalCell]

// NewExecutor_OptionalCell creates a new list of Executor_OptionalCell.
func NewExecutor_OptionalCell_List(s *capnp.Segment, sz int32) (Executor_OptionalCell_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Executor_OptionalCell](l), err
}

// Executor_OptionalCell_Future is a wrapper for a Executor_OptionalCell promised by a client call.
type Executor_OptionalCell_Future struct{ *capnp.Future }

func (f Executor_OptionalCell_Future) Struct() (Executor_OptionalCell, error) {
	p, err := f.Future.Ptr()
	return Executor_OptionalCell(p.Struct()), err
}
func (p Executor_OptionalCell_Future) Cell() Cell {
	return Cell(p.Future.Field(0, nil).Client())
}

func (p Executor_OptionalCell_Future) Err() Executor_OptionalCell_err_Future {
	return Executor_OptionalCell_err_Future{p.Future}
}

// Executor_OptionalCell_err_Future is a wrapper for a Executor_OptionalCell_err promised by a client call.
type Executor_OptionalCell_err_Future struct{ *capnp.Future }

func (f Executor_OptionalCell_err_Future) Struct() (Executor_OptionalCell_err, error) {
	p, err := f.Future.Ptr()
	return Executor_OptionalCell_err(p.Struct()), err
}

type Executor_spawn_Params capnp.Struct

// Executor_spawn_Params_TypeID is the unique identifier for the type Executor_spawn_Params.
const Executor_spawn_Params_TypeID = 0xb8078038290eb30b

func NewExecutor_spawn_Params(s *capnp.Segment) (Executor_spawn_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5})
	return Executor_spawn_Params(st), err
}

func NewRootExecutor_spawn_Params(s *capnp.Segment) (Executor_spawn_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5})
	return Executor_spawn_Params(st), err
}

func ReadRootExecutor_spawn_Params(msg *capnp.Message) (Executor_spawn_Params, error) {
	root, err := msg.Root()
	return Executor_spawn_Params(root.Struct()), err
}

func (s Executor_spawn_Params) String() string {
	str, _ := text.Marshal(0xb8078038290eb30b, capnp.Struct(s))
	return str
}

func (s Executor_spawn_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Executor_spawn_Params) DecodeFromPtr(p capnp.Ptr) Executor_spawn_Params {
	return Executor_spawn_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Executor_spawn_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Executor_spawn_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Executor_spawn_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Executor_spawn_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Executor_spawn_Params) Path() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Executor_spawn_Params) HasPath() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Executor_spawn_Params) PathBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Executor_spawn_Params) SetPath(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Executor_spawn_Params) Args() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.TextList(p.List()), err
}

func (s Executor_spawn_Params) HasArgs() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Executor_spawn_Params) SetArgs(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewArgs sets the args field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Executor_spawn_Params) NewArgs(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s Executor_spawn_Params) Env() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.TextList(p.List()), err
}

func (s Executor_spawn_Params) HasEnv() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Executor_spawn_Params) SetEnv(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewEnv sets the env field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Executor_spawn_Params) NewEnv(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}
func (s Executor_spawn_Params) Dir() (string, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.Text(), err
}

func (s Executor_spawn_Params) HasDir() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Executor_spawn_Params) DirBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.TextBytes(), err
}

func (s Executor_spawn_Params) SetDir(v string) error {
	return capnp.Struct(s).SetText(3, v)
}

func (s Executor_spawn_Params) ExtraCaps() (Executor_CapDescriptor_List, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return Executor_CapDescriptor_List(p.List()), err
}

func (s Executor_spawn_Params) HasExtraCaps() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s Executor_spawn_Params) SetExtraCaps(v Executor_CapDescriptor_List) error {
	return capnp.Struct(s).SetPtr(4, v.ToPtr())
}

// NewExtraCaps sets the ExtraCaps field to a newly
// allocated Executor_CapDescriptor_List, preferring placement in s's segment.
func (s Executor_spawn_Params) NewExtraCaps(n int32) (Executor_CapDescriptor_List, error) {
	l, err := NewExecutor_CapDescriptor_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Executor_CapDescriptor_List{}, err
	}
	err = capnp.Struct(s).SetPtr(4, l.ToPtr())
	return l, err
}

// Executor_spawn_Params_List is a list of Executor_spawn_Params.
type Executor_spawn_Params_List = capnp.StructList[Executor_spawn_Params]

// NewExecutor_spawn_Params creates a new list of Executor_spawn_Params.
func NewExecutor_spawn_Params_List(s *capnp.Segment, sz int32) (Executor_spawn_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5}, sz)
	return capnp.StructList[Executor_spawn_Params](l), err
}

// Executor_spawn_Params_Future is a wrapper for a Executor_spawn_Params promised by a client call.
type Executor_spawn_Params_Future struct{ *capnp.Future }

func (f Executor_spawn_Params_Future) Struct() (Executor_spawn_Params, error) {
	p, err := f.Future.Ptr()
	return Executor_spawn_Params(p.Struct()), err
}

type Executor_spawn_Results capnp.Struct

// Executor_spawn_Results_TypeID is the unique identifier for the type Executor_spawn_Results.
const Executor_spawn_Results_TypeID = 0xa04c2cd2ed66b51c

func NewExecutor_spawn_Results(s *capnp.Segment) (Executor_spawn_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_spawn_Results(st), err
}

func NewRootExecutor_spawn_Results(s *capnp.Segment) (Executor_spawn_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_spawn_Results(st), err
}

func ReadRootExecutor_spawn_Results(msg *capnp.Message) (Executor_spawn_Results, error) {
	root, err := msg.Root()
	return Executor_spawn_Results(root.Struct()), err
}

func (s Executor_spawn_Results) String() string {
	str, _ := text.Marshal(0xa04c2cd2ed66b51c, capnp.Struct(s))
	return str
}

func (s Executor_spawn_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Executor_spawn_Results) DecodeFromPtr(p capnp.Ptr) Executor_spawn_Results {
	return Executor_spawn_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Executor_spawn_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Executor_spawn_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Executor_spawn_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Executor_spawn_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Executor_spawn_Results) Cell() (Executor_OptionalCell, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Executor_OptionalCell(p.Struct()), err
}

func (s Executor_spawn_Results) HasCell() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Executor_spawn_Results) SetCell(v Executor_OptionalCell) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewCell sets the cell field to a newly
// allocated Executor_OptionalCell struct, preferring placement in s's segment.
func (s Executor_spawn_Results) NewCell() (Executor_OptionalCell, error) {
	ss, err := NewExecutor_OptionalCell(capnp.Struct(s).Segment())
	if err != nil {
		return Executor_OptionalCell{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Executor_spawn_Results_List is a list of Executor_spawn_Results.
type Executor_spawn_Results_List = capnp.StructList[Executor_spawn_Results]

// NewExecutor_spawn_Results creates a new list of Executor_spawn_Results.
func NewExecutor_spawn_Results_List(s *capnp.Segment, sz int32) (Executor_spawn_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Executor_spawn_Results](l), err
}

// Executor_spawn_Results_Future is a wrapper for a Executor_spawn_Results promised by a client call.
type Executor_spawn_Results_Future struct{ *capnp.Future }

func (f Executor_spawn_Results_Future) Struct() (Executor_spawn_Results, error) {
	p, err := f.Future.Ptr()
	return Executor_spawn_Results(p.Struct()), err
}
func (p Executor_spawn_Results_Future) Cell() Executor_OptionalCell_Future {
	return Executor_OptionalCell_Future{Future: p.Future.Field(0, nil)}
}

type IPFS capnp.Client

// IPFS_TypeID is the unique identifier for the type IPFS.
const IPFS_TypeID = 0xf07e5f02273b1d4b

func (c IPFS) Add(ctx context.Context, params func(IPFS_add_Params) error) (IPFS_add_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf07e5f02273b1d4b,
			MethodID:      0,
			InterfaceName: "system.capnp:IPFS",
			MethodName:    "add",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(IPFS_add_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return IPFS_add_Results_Future{Future: ans.Future()}, release

}

func (c IPFS) Cat(ctx context.Context, params func(IPFS_cat_Params) error) (IPFS_cat_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf07e5f02273b1d4b,
			MethodID:      1,
			InterfaceName: "system.capnp:IPFS",
			MethodName:    "cat",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(IPFS_cat_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return IPFS_cat_Results_Future{Future: ans.Future()}, release

}

func (c IPFS) Ls(ctx context.Context, params func(IPFS_ls_Params) error) (IPFS_ls_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf07e5f02273b1d4b,
			MethodID:      2,
			InterfaceName: "system.capnp:IPFS",
			MethodName:    "ls",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(IPFS_ls_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return IPFS_ls_Results_Future{Future: ans.Future()}, release

}

func (c IPFS) Stat(ctx context.Context, params func(IPFS_stat_Params) error) (IPFS_stat_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf07e5f02273b1d4b,
			MethodID:      3,
			InterfaceName: "system.capnp:IPFS",
			MethodName:    "stat",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(IPFS_stat_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return IPFS_stat_Results_Future{Future: ans.Future()}, release

}

func (c IPFS) Pin(ctx context.Context, params func(IPFS_pin_Params) error) (IPFS_pin_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf07e5f02273b1d4b,
			MethodID:      4,
			InterfaceName: "system.capnp:IPFS",
			MethodName:    "pin",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(IPFS_pin_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return IPFS_pin_Results_Future{Future: ans.Future()}, release

}

func (c IPFS) Unpin(ctx context.Context, params func(IPFS_unpin_Params) error) (IPFS_unpin_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf07e5f02273b1d4b,
			MethodID:      5,
			InterfaceName: "system.capnp:IPFS",
			MethodName:    "unpin",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(IPFS_unpin_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return IPFS_unpin_Results_Future{Future: ans.Future()}, release

}

func (c IPFS) Pins(ctx context.Context, params func(IPFS_pins_Params) error) (IPFS_pins_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf07e5f02273b1d4b,
			MethodID:      6,
			InterfaceName: "system.capnp:IPFS",
			MethodName:    "pins",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(IPFS_pins_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return IPFS_pins_Results_Future{Future: ans.Future()}, release

}

func (c IPFS) Id(ctx context.Context, params func(IPFS_id_Params) error) (IPFS_id_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf07e5f02273b1d4b,
			MethodID:      7,
			InterfaceName: "system.capnp:IPFS",
			MethodName:    "id",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(IPFS_id_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return IPFS_id_Results_Future{Future: ans.Future()}, release

}

func (c IPFS) Connect(ctx context.Context, params func(IPFS_connect_Params) error) (IPFS_connect_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf07e5f02273b1d4b,
			MethodID:      8,
			InterfaceName: "system.capnp:IPFS",
			MethodName:    "connect",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(IPFS_connect_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return IPFS_connect_Results_Future{Future: ans.Future()}, release

}

func (c IPFS) Peers(ctx context.Context, params func(IPFS_peers_Params) error) (IPFS_peers_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf07e5f02273b1d4b,
			MethodID:      9,
			InterfaceName: "system.capnp:IPFS",
			MethodName:    "peers",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(IPFS_peers_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return IPFS_peers_Results_Future{Future: ans.Future()}, release

}

func (c IPFS) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c IPFS) String() string {
	return "IPFS(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c IPFS) AddRef() IPFS {
	return IPFS(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c IPFS) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c IPFS) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c IPFS) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (IPFS) DecodeFromPtr(p capnp.Ptr) IPFS {
	return IPFS(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c IPFS) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c IPFS) IsSame(other IPFS) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c IPFS) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c IPFS) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A IPFS_Server is a IPFS with a local implementation.
type IPFS_Server interface {
	Add(context.Context, IPFS_add) error

	Cat(context.Context, IPFS_cat) error

	Ls(context.Context, IPFS_ls) error

	Stat(context.Context, IPFS_stat) error

	Pin(context.Context, IPFS_pin) error

	Unpin(context.Context, IPFS_unpin) error

	Pins(context.Context, IPFS_pins) error

	Id(context.Context, IPFS_id) error

	Connect(context.Context, IPFS_connect) error

	Peers(context.Context, IPFS_peers) error
}

// IPFS_NewServer creates a new Server from an implementation of IPFS_Server.
func IPFS_NewServer(s IPFS_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(IPFS_Methods(nil, s), s, c)
}

// IPFS_ServerToClient creates a new Client from an implementation of IPFS_Server.
// The caller is responsible for calling Release on the returned Client.
func IPFS_ServerToClient(s IPFS_Server) IPFS {
	return IPFS(capnp.NewClient(IPFS_NewServer(s)))
}

// IPFS_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func IPFS_Methods(methods []server.Method, s IPFS_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 10)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf07e5f02273b1d4b,
			MethodID:      0,
			InterfaceName: "system.capnp:IPFS",
			MethodName:    "add",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Add(ctx, IPFS_add{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf07e5f02273b1d4b,
			MethodID:      1,
			InterfaceName: "system.capnp:IPFS",
			MethodName:    "cat",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Cat(ctx, IPFS_cat{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf07e5f02273b1d4b,
			MethodID:      2,
			InterfaceName: "system.capnp:IPFS",
			MethodName:    "ls",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Ls(ctx, IPFS_ls{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf07e5f02273b1d4b,
			MethodID:      3,
			InterfaceName: "system.capnp:IPFS",
			MethodName:    "stat",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Stat(ctx, IPFS_stat{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf07e5f02273b1d4b,
			MethodID:      4,
			InterfaceName: "system.capnp:IPFS",
			MethodName:    "pin",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Pin(ctx, IPFS_pin{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf07e5f02273b1d4b,
			MethodID:      5,
			InterfaceName: "system.capnp:IPFS",
			MethodName:    "unpin",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Unpin(ctx, IPFS_unpin{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf07e5f02273b1d4b,
			MethodID:      6,
			InterfaceName: "system.capnp:IPFS",
			MethodName:    "pins",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Pins(ctx, IPFS_pins{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf07e5f02273b1d4b,
			MethodID:      7,
			InterfaceName: "system.capnp:IPFS",
			MethodName:    "id",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Id(ctx, IPFS_id{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf07e5f02273b1d4b,
			MethodID:      8,
			InterfaceName: "system.capnp:IPFS",
			MethodName:    "connect",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Connect(ctx, IPFS_connect{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf07e5f02273b1d4b,
			MethodID:      9,
			InterfaceName: "system.capnp:IPFS",
			MethodName:    "peers",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Peers(ctx, IPFS_peers{call})
		},
	})

	return methods
}

// IPFS_add holds the state for a server call to IPFS.add.
// See server.Call for documentation.
type IPFS_add struct {
	*server.Call
}

// Args returns the call's arguments.
func (c IPFS_add) Args() IPFS_add_Params {
	return IPFS_add_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c IPFS_add) AllocResults() (IPFS_add_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IPFS_add_Results(r), err
}

// IPFS_cat holds the state for a server call to IPFS.cat.
// See server.Call for documentation.
type IPFS_cat struct {
	*server.Call
}

// Args returns the call's arguments.
func (c IPFS_cat) Args() IPFS_cat_Params {
	return IPFS_cat_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c IPFS_cat) AllocResults() (IPFS_cat_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IPFS_cat_Results(r), err
}

// IPFS_ls holds the state for a server call to IPFS.ls.
// See server.Call for documentation.
type IPFS_ls struct {
	*server.Call
}

// Args returns the call's arguments.
func (c IPFS_ls) Args() IPFS_ls_Params {
	return IPFS_ls_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c IPFS_ls) AllocResults() (IPFS_ls_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IPFS_ls_Results(r), err
}

// IPFS_stat holds the state for a server call to IPFS.stat.
// See server.Call for documentation.
type IPFS_stat struct {
	*server.Call
}

// Args returns the call's arguments.
func (c IPFS_stat) Args() IPFS_stat_Params {
	return IPFS_stat_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c IPFS_stat) AllocResults() (IPFS_stat_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IPFS_stat_Results(r), err
}

// IPFS_pin holds the state for a server call to IPFS.pin.
// See server.Call for documentation.
type IPFS_pin struct {
	*server.Call
}

// Args returns the call's arguments.
func (c IPFS_pin) Args() IPFS_pin_Params {
	return IPFS_pin_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c IPFS_pin) AllocResults() (IPFS_pin_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return IPFS_pin_Results(r), err
}

// IPFS_unpin holds the state for a server call to IPFS.unpin.
// See server.Call for documentation.
type IPFS_unpin struct {
	*server.Call
}

// Args returns the call's arguments.
func (c IPFS_unpin) Args() IPFS_unpin_Params {
	return IPFS_unpin_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c IPFS_unpin) AllocResults() (IPFS_unpin_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return IPFS_unpin_Results(r), err
}

// IPFS_pins holds the state for a server call to IPFS.pins.
// See server.Call for documentation.
type IPFS_pins struct {
	*server.Call
}

// Args returns the call's arguments.
func (c IPFS_pins) Args() IPFS_pins_Params {
	return IPFS_pins_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c IPFS_pins) AllocResults() (IPFS_pins_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IPFS_pins_Results(r), err
}

// IPFS_id holds the state for a server call to IPFS.id.
// See server.Call for documentation.
type IPFS_id struct {
	*server.Call
}

// Args returns the call's arguments.
func (c IPFS_id) Args() IPFS_id_Params {
	return IPFS_id_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c IPFS_id) AllocResults() (IPFS_id_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IPFS_id_Results(r), err
}

// IPFS_connect holds the state for a server call to IPFS.connect.
// See server.Call for documentation.
type IPFS_connect struct {
	*server.Call
}

// Args returns the call's arguments.
func (c IPFS_connect) Args() IPFS_connect_Params {
	return IPFS_connect_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c IPFS_connect) AllocResults() (IPFS_connect_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return IPFS_connect_Results(r), err
}

// IPFS_peers holds the state for a server call to IPFS.peers.
// See server.Call for documentation.
type IPFS_peers struct {
	*server.Call
}

// Args returns the call's arguments.
func (c IPFS_peers) Args() IPFS_peers_Params {
	return IPFS_peers_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c IPFS_peers) AllocResults() (IPFS_peers_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IPFS_peers_Results(r), err
}

// IPFS_List is a list of IPFS.
type IPFS_List = capnp.CapList[IPFS]

// NewIPFS creates a new list of IPFS.
func NewIPFS_List(s *capnp.Segment, sz int32) (IPFS_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[IPFS](l), err
}

type IPFS_add_Params capnp.Struct

// IPFS_add_Params_TypeID is the unique identifier for the type IPFS_add_Params.
const IPFS_add_Params_TypeID = 0xd44a8470fbc0385e

func NewIPFS_add_Params(s *capnp.Segment) (IPFS_add_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IPFS_add_Params(st), err
}

func NewRootIPFS_add_Params(s *capnp.Segment) (IPFS_add_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IPFS_add_Params(st), err
}

func ReadRootIPFS_add_Params(msg *capnp.Message) (IPFS_add_Params, error) {
	root, err := msg.Root()
	return IPFS_add_Params(root.Struct()), err
}

func (s IPFS_add_Params) String() string {
	str, _ := text.Marshal(0xd44a8470fbc0385e, capnp.Struct(s))
	return str
}

func (s IPFS_add_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (IPFS_add_Params) DecodeFromPtr(p capnp.Ptr) IPFS_add_Params {
	return IPFS_add_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s IPFS_add_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s IPFS_add_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s IPFS_add_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s IPFS_add_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s IPFS_add_Params) Data() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s IPFS_add_Params) HasData() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s IPFS_add_Params) SetData(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// IPFS_add_Params_List is a list of IPFS_add_Params.
type IPFS_add_Params_List = capnp.StructList[IPFS_add_Params]

// NewIPFS_add_Params creates a new list of IPFS_add_Params.
func NewIPFS_add_Params_List(s *capnp.Segment, sz int32) (IPFS_add_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[IPFS_add_Params](l), err
}

// IPFS_add_Params_Future is a wrapper for a IPFS_add_Params promised by a client call.
type IPFS_add_Params_Future struct{ *capnp.Future }

func (f IPFS_add_Params_Future) Struct() (IPFS_add_Params, error) {
	p, err := f.Future.Ptr()
	return IPFS_add_Params(p.Struct()), err
}

type IPFS_add_Results capnp.Struct

// IPFS_add_Results_TypeID is the unique identifier for the type IPFS_add_Results.
const IPFS_add_Results_TypeID = 0xd6c02c9d5a3500b3

func NewIPFS_add_Results(s *capnp.Segment) (IPFS_add_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IPFS_add_Results(st), err
}

func NewRootIPFS_add_Results(s *capnp.Segment) (IPFS_add_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IPFS_add_Results(st), err
}

func ReadRootIPFS_add_Results(msg *capnp.Message) (IPFS_add_Results, error) {
	root, err := msg.Root()
	return IPFS_add_Results(root.Struct()), err
}

func (s IPFS_add_Results) String() string {
	str, _ := text.Marshal(0xd6c02c9d5a3500b3, capnp.Struct(s))
	return str
}

func (s IPFS_add_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (IPFS_add_Results) DecodeFromPtr(p capnp.Ptr) IPFS_add_Results {
	return IPFS_add_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s IPFS_add_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s IPFS_add_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s IPFS_add_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s IPFS_add_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s IPFS_add_Results) Cid() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s IPFS_add_Results) HasCid() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s IPFS_add_Results) CidBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s IPFS_add_Results) SetCid(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// IPFS_add_Results_List is a list of IPFS_add_Results.
type IPFS_add_Results_List = capnp.StructList[IPFS_add_Results]

// NewIPFS_add_Results creates a new list of IPFS_add_Results.
func NewIPFS_add_Results_List(s *capnp.Segment, sz int32) (IPFS_add_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[IPFS_add_Results](l), err
}

// IPFS_add_Results_Future is a wrapper for a IPFS_add_Results promised by a client call.
type IPFS_add_Results_Future struct{ *capnp.Future }

func (f IPFS_add_Results_Future) Struct() (IPFS_add_Results, error) {
	p, err := f.Future.Ptr()
	return IPFS_add_Results(p.Struct()), err
}

type IPFS_cat_Params capnp.Struct

// IPFS_cat_Params_TypeID is the unique identifier for the type IPFS_cat_Params.
const IPFS_cat_Params_TypeID = 0xadaaae7523bdc7e4

func NewIPFS_cat_Params(s *capnp.Segment) (IPFS_cat_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IPFS_cat_Params(st), err
}

func NewRootIPFS_cat_Params(s *capnp.Segment) (IPFS_cat_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IPFS_cat_Params(st), err
}

func ReadRootIPFS_cat_Params(msg *capnp.Message) (IPFS_cat_Params, error) {
	root, err := msg.Root()
	return IPFS_cat_Params(root.Struct()), err
}

func (s IPFS_cat_Params) String() string {
	str, _ := text.Marshal(0xadaaae7523bdc7e4, capnp.Struct(s))
	return str
}

func (s IPFS_cat_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (IPFS_cat_Params) DecodeFromPtr(p capnp.Ptr) IPFS_cat_Params {
	return IPFS_cat_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s IPFS_cat_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s IPFS_cat_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s IPFS_cat_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s IPFS_cat_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s IPFS_cat_Params) Cid() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s IPFS_cat_Params) HasCid() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s IPFS_cat_Params) CidBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s IPFS_cat_Params) SetCid(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// IPFS_cat_Params_List is a list of IPFS_cat_Params.
type IPFS_cat_Params_List = capnp.StructList[IPFS_cat_Params]

// NewIPFS_cat_Params creates a new list of IPFS_cat_Params.
func NewIPFS_cat_Params_List(s *capnp.Segment, sz int32) (IPFS_cat_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[IPFS_cat_Params](l), err
}

// IPFS_cat_Params_Future is a wrapper for a IPFS_cat_Params promised by a client call.
type IPFS_cat_Params_Future struct{ *capnp.Future }

func (f IPFS_cat_Params_Future) Struct() (IPFS_cat_Params, error) {
	p, err := f.Future.Ptr()
	return IPFS_cat_Params(p.Struct()), err
}

type IPFS_cat_Results capnp.Struct

// IPFS_cat_Results_TypeID is the unique identifier for the type IPFS_cat_Results.
const IPFS_cat_Results_TypeID = 0xcb3a96057ca67436

func NewIPFS_cat_Results(s *capnp.Segment) (IPFS_cat_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IPFS_cat_Results(st), err
}

func NewRootIPFS_cat_Results(s *capnp.Segment) (IPFS_cat_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IPFS_cat_Results(st), err
}

func ReadRootIPFS_cat_Results(msg *capnp.Message) (IPFS_cat_Results, error) {
	root, err := msg.Root()
	return IPFS_cat_Results(root.Struct()), err
}

func (s IPFS_cat_Results) String() string {
	str, _ := text.Marshal(0xcb3a96057ca67436, capnp.Struct(s))
	return str
}

func (s IPFS_cat_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (IPFS_cat_Results) DecodeFromPtr(p capnp.Ptr) IPFS_cat_Results {
	return IPFS_cat_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s IPFS_cat_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s IPFS_cat_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s IPFS_cat_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s IPFS_cat_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s IPFS_cat_Results) Body() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s IPFS_cat_Results) HasBody() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s IPFS_cat_Results) SetBody(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// IPFS_cat_Results_List is a list of IPFS_cat_Results.
type IPFS_cat_Results_List = capnp.StructList[IPFS_cat_Results]

// NewIPFS_cat_Results creates a new list of IPFS_cat_Results.
func NewIPFS_cat_Results_List(s *capnp.Segment, sz int32) (IPFS_cat_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[IPFS_cat_Results](l), err
}

// IPFS_cat_Results_Future is a wrapper for a IPFS_cat_Results promised by a client call.
type IPFS_cat_Results_Future struct{ *capnp.Future }

func (f IPFS_cat_Results_Future) Struct() (IPFS_cat_Results, error) {
	p, err := f.Future.Ptr()
	return IPFS_cat_Results(p.Struct()), err
}

type IPFS_ls_Params capnp.Struct

// IPFS_ls_Params_TypeID is the unique identifier for the type IPFS_ls_Params.
const IPFS_ls_Params_TypeID = 0xaadf1b3f02f6ff23

func NewIPFS_ls_Params(s *capnp.Segment) (IPFS_ls_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IPFS_ls_Params(st), err
}

func NewRootIPFS_ls_Params(s *capnp.Segment) (IPFS_ls_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IPFS_ls_Params(st), err
}

func ReadRootIPFS_ls_Params(msg *capnp.Message) (IPFS_ls_Params, error) {
	root, err := msg.Root()
	return IPFS_ls_Params(root.Struct()), err
}

func (s IPFS_ls_Params) String() string {
	str, _ := text.Marshal(0xaadf1b3f02f6ff23, capnp.Struct(s))
	return str
}

func (s IPFS_ls_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (IPFS_ls_Params) DecodeFromPtr(p capnp.Ptr) IPFS_ls_Params {
	return IPFS_ls_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s IPFS_ls_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s IPFS_ls_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s IPFS_ls_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s IPFS_ls_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s IPFS_ls_Params) Path() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s IPFS_ls_Params) HasPath() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s IPFS_ls_Params) PathBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s IPFS_ls_Params) SetPath(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// IPFS_ls_Params_List is a list of IPFS_ls_Params.
type IPFS_ls_Params_List = capnp.StructList[IPFS_ls_Params]

// NewIPFS_ls_Params creates a new list of IPFS_ls_Params.
func NewIPFS_ls_Params_List(s *capnp.Segment, sz int32) (IPFS_ls_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[IPFS_ls_Params](l), err
}

// IPFS_ls_Params_Future is a wrapper for a IPFS_ls_Params promised by a client call.
type IPFS_ls_Params_Future struct{ *capnp.Future }

func (f IPFS_ls_Params_Future) Struct() (IPFS_ls_Params, error) {
	p, err := f.Future.Ptr()
	return IPFS_ls_Params(p.Struct()), err
}

type IPFS_ls_Results capnp.Struct

// IPFS_ls_Results_TypeID is the unique identifier for the type IPFS_ls_Results.
const IPFS_ls_Results_TypeID = 0xc65336464e949b9c

func NewIPFS_ls_Results(s *capnp.Segment) (IPFS_ls_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IPFS_ls_Results(st), err
}

func NewRootIPFS_ls_Results(s *capnp.Segment) (IPFS_ls_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IPFS_ls_Results(st), err
}

func ReadRootIPFS_ls_Results(msg *capnp.Message) (IPFS_ls_Results, error) {
	root, err := msg.Root()
	return IPFS_ls_Results(root.Struct()), err
}

func (s IPFS_ls_Results) String() string {
	str, _ := text.Marshal(0xc65336464e949b9c, capnp.Struct(s))
	return str
}

func (s IPFS_ls_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (IPFS_ls_Results) DecodeFromPtr(p capnp.Ptr) IPFS_ls_Results {
	return IPFS_ls_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s IPFS_ls_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s IPFS_ls_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s IPFS_ls_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s IPFS_ls_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s IPFS_ls_Results) Entries() (Entry_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Entry_List(p.List()), err
}

func (s IPFS_ls_Results) HasEntries() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s IPFS_ls_Results) SetEntries(v Entry_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewEntries sets the entries field to a newly
// allocated Entry_List, preferring placement in s's segment.
func (s IPFS_ls_Results) NewEntries(n int32) (Entry_List, error) {
	l, err := NewEntry_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Entry_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// IPFS_ls_Results_List is a list of IPFS_ls_Results.
type IPFS_ls_Results_List = capnp.StructList[IPFS_ls_Results]

// NewIPFS_ls_Results creates a new list of IPFS_ls_Results.
func NewIPFS_ls_Results_List(s *capnp.Segment, sz int32) (IPFS_ls_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[IPFS_ls_Results](l), err
}

// IPFS_ls_Results_Future is a wrapper for a IPFS_ls_Results promised by a client call.
type IPFS_ls_Results_Future struct{ *capnp.Future }

func (f IPFS_ls_Results_Future) Struct() (IPFS_ls_Results, error) {
	p, err := f.Future.Ptr()
	return IPFS_ls_Results(p.Struct()), err
}

type IPFS_stat_Params capnp.Struct

// IPFS_stat_Params_TypeID is the unique identifier for the type IPFS_stat_Params.
const IPFS_stat_Params_TypeID = 0x8284348c17041a84

func NewIPFS_stat_Params(s *capnp.Segment) (IPFS_stat_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IPFS_stat_Params(st), err
}

func NewRootIPFS_stat_Params(s *capnp.Segment) (IPFS_stat_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IPFS_stat_Params(st), err
}

func ReadRootIPFS_stat_Params(msg *capnp.Message) (IPFS_stat_Params, error) {
	root, err := msg.Root()
	return IPFS_stat_Params(root.Struct()), err
}

func (s IPFS_stat_Params) String() string {
	str, _ := text.Marshal(0x8284348c17041a84, capnp.Struct(s))
	return str
}

func (s IPFS_stat_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (IPFS_stat_Params) DecodeFromPtr(p capnp.Ptr) IPFS_stat_Params {
	return IPFS_stat_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s IPFS_stat_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s IPFS_stat_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s IPFS_stat_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s IPFS_stat_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s IPFS_stat_Params) Cid() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s IPFS_stat_Params) HasCid() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s IPFS_stat_Params) CidBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s IPFS_stat_Params) SetCid(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// IPFS_stat_Params_List is a list of IPFS_stat_Params.
type IPFS_stat_Params_List = capnp.StructList[IPFS_stat_Params]

// NewIPFS_stat_Params creates a new list of IPFS_stat_Params.
func NewIPFS_stat_Params_List(s *capnp.Segment, sz int32) (IPFS_stat_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[IPFS_stat_Params](l), err
}

// IPFS_stat_Params_Future is a wrapper for a IPFS_stat_Params promised by a client call.
type IPFS_stat_Params_Future struct{ *capnp.Future }

func (f IPFS_stat_Params_Future) Struct() (IPFS_stat_Params, error) {
	p, err := f.Future.Ptr()
	return IPFS_stat_Params(p.Struct()), err
}

type IPFS_stat_Results capnp.Struct

// IPFS_stat_Results_TypeID is the unique identifier for the type IPFS_stat_Results.
const IPFS_stat_Results_TypeID = 0x90338670b754f0d0

func NewIPFS_stat_Results(s *capnp.Segment) (IPFS_stat_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IPFS_stat_Results(st), err
}

func NewRootIPFS_stat_Results(s *capnp.Segment) (IPFS_stat_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IPFS_stat_Results(st), err
}

func ReadRootIPFS_stat_Results(msg *capnp.Message) (IPFS_stat_Results, error) {
	root, err := msg.Root()
	return IPFS_stat_Results(root.Struct()), err
}

func (s IPFS_stat_Results) String() string {
	str, _ := text.Marshal(0x90338670b754f0d0, capnp.Struct(s))
	return str
}

func (s IPFS_stat_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (IPFS_stat_Results) DecodeFromPtr(p capnp.Ptr) IPFS_stat_Results {
	return IPFS_stat_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s IPFS_stat_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s IPFS_stat_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s IPFS_stat_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s IPFS_stat_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s IPFS_stat_Results) Info() (NodeInfo, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return NodeInfo(p.Struct()), err
}

func (s IPFS_stat_Results) HasInfo() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s IPFS_stat_Results) SetInfo(v NodeInfo) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewInfo sets the info field to a newly
// allocated NodeInfo struct, preferring placement in s's segment.
func (s IPFS_stat_Results) NewInfo() (NodeInfo, error) {
	ss, err := NewNodeInfo(capnp.Struct(s).Segment())
	if err != nil {
		return NodeInfo{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// IPFS_stat_Results_List is a list of IPFS_stat_Results.
type IPFS_stat_Results_List = capnp.StructList[IPFS_stat_Results]

// NewIPFS_stat_Results creates a new list of IPFS_stat_Results.
func NewIPFS_stat_Results_List(s *capnp.Segment, sz int32) (IPFS_stat_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[IPFS_stat_Results](l), err
}

// IPFS_stat_Results_Future is a wrapper for a IPFS_stat_Results promised by a client call.
type IPFS_stat_Results_Future struct{ *capnp.Future }

func (f IPFS_stat_Results_Future) Struct() (IPFS_stat_Results, error) {
	p, err := f.Future.Ptr()
	return IPFS_stat_Results(p.Struct()), err
}
func (p IPFS_stat_Results_Future) Info() NodeInfo_Future {
	return NodeInfo_Future{Future: p.Future.Field(0, nil)}
}

type IPFS_pin_Params capnp.Struct

// IPFS_pin_Params_TypeID is the unique identifier for the type IPFS_pin_Params.
const IPFS_pin_Params_TypeID = 0xba93d5e4aea44e63

func NewIPFS_pin_Params(s *capnp.Segment) (IPFS_pin_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IPFS_pin_Params(st), err
}

func NewRootIPFS_pin_Params(s *capnp.Segment) (IPFS_pin_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IPFS_pin_Params(st), err
}

func ReadRootIPFS_pin_Params(msg *capnp.Message) (IPFS_pin_Params, error) {
	root, err := msg.Root()
	return IPFS_pin_Params(root.Struct()), err
}

func (s IPFS_pin_Params) String() string {
	str, _ := text.Marshal(0xba93d5e4aea44e63, capnp.Struct(s))
	return str
}

func (s IPFS_pin_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (IPFS_pin_Params) DecodeFromPtr(p capnp.Ptr) IPFS_pin_Params {
	return IPFS_pin_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s IPFS_pin_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s IPFS_pin_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s IPFS_pin_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s IPFS_pin_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s IPFS_pin_Params) Cid() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s IPFS_pin_Params) HasCid() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s IPFS_pin_Params) CidBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s IPFS_pin_Params) SetCid(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// IPFS_pin_Params_List is a list of IPFS_pin_Params.
type IPFS_pin_Params_List = capnp.StructList[IPFS_pin_Params]

// NewIPFS_pin_Params creates a new list of IPFS_pin_Params.
func NewIPFS_pin_Params_List(s *capnp.Segment, sz int32) (IPFS_pin_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[IPFS_pin_Params](l), err
}

// IPFS_pin_Params_Future is a wrapper for a IPFS_pin_Params promised by a client call.
type IPFS_pin_Params_Future struct{ *capnp.Future }

func (f IPFS_pin_Params_Future) Struct() (IPFS_pin_Params, error) {
	p, err := f.Future.Ptr()
	return IPFS_pin_Params(p.Struct()), err
}

type IPFS_pin_Results capnp.Struct

// IPFS_pin_Results_TypeID is the unique identifier for the type IPFS_pin_Results.
const IPFS_pin_Results_TypeID = 0xf81b3789a4d0575d

func NewIPFS_pin_Results(s *capnp.Segment) (IPFS_pin_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return IPFS_pin_Results(st), err
}

func NewRootIPFS_pin_Results(s *capnp.Segment) (IPFS_pin_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return IPFS_pin_Results(st), err
}

func ReadRootIPFS_pin_Results(msg *capnp.Message) (IPFS_pin_Results, error) {
	root, err := msg.Root()
	return IPFS_pin_Results(root.Struct()), err
}

func (s IPFS_pin_Results) String() string {
	str, _ := text.Marshal(0xf81b3789a4d0575d, capnp.Struct(s))
	return str
}

func (s IPFS_pin_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (IPFS_pin_Results) DecodeFromPtr(p capnp.Ptr) IPFS_pin_Results {
	return IPFS_pin_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s IPFS_pin_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s IPFS_pin_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s IPFS_pin_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s IPFS_pin_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s IPFS_pin_Results) Success() bool {
	return capnp.Struct(s).Bit(0)
}

func (s IPFS_pin_Results) SetSuccess(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// IPFS_pin_Results_List is a list of IPFS_pin_Results.
type IPFS_pin_Results_List = capnp.StructList[IPFS_pin_Results]

// NewIPFS_pin_Results creates a new list of IPFS_pin_Results.
func NewIPFS_pin_Results_List(s *capnp.Segment, sz int32) (IPFS_pin_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[IPFS_pin_Results](l), err
}

// IPFS_pin_Results_Future is a wrapper for a IPFS_pin_Results promised by a client call.
type IPFS_pin_Results_Future struct{ *capnp.Future }

func (f IPFS_pin_Results_Future) Struct() (IPFS_pin_Results, error) {
	p, err := f.Future.Ptr()
	return IPFS_pin_Results(p.Struct()), err
}

type IPFS_unpin_Params capnp.Struct

// IPFS_unpin_Params_TypeID is the unique identifier for the type IPFS_unpin_Params.
const IPFS_unpin_Params_TypeID = 0x8c76ad0fbaea12d7

func NewIPFS_unpin_Params(s *capnp.Segment) (IPFS_unpin_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IPFS_unpin_Params(st), err
}

func NewRootIPFS_unpin_Params(s *capnp.Segment) (IPFS_unpin_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IPFS_unpin_Params(st), err
}

func ReadRootIPFS_unpin_Params(msg *capnp.Message) (IPFS_unpin_Params, error) {
	root, err := msg.Root()
	return IPFS_unpin_Params(root.Struct()), err
}

func (s IPFS_unpin_Params) String() string {
	str, _ := text.Marshal(0x8c76ad0fbaea12d7, capnp.Struct(s))
	return str
}

func (s IPFS_unpin_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (IPFS_unpin_Params) DecodeFromPtr(p capnp.Ptr) IPFS_unpin_Params {
	return IPFS_unpin_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s IPFS_unpin_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s IPFS_unpin_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s IPFS_unpin_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s IPFS_unpin_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s IPFS_unpin_Params) Cid() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s IPFS_unpin_Params) HasCid() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s IPFS_unpin_Params) CidBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s IPFS_unpin_Params) SetCid(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// IPFS_unpin_Params_List is a list of IPFS_unpin_Params.
type IPFS_unpin_Params_List = capnp.StructList[IPFS_unpin_Params]

// NewIPFS_unpin_Params creates a new list of IPFS_unpin_Params.
func NewIPFS_unpin_Params_List(s *capnp.Segment, sz int32) (IPFS_unpin_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[IPFS_unpin_Params](l), err
}

// IPFS_unpin_Params_Future is a wrapper for a IPFS_unpin_Params promised by a client call.
type IPFS_unpin_Params_Future struct{ *capnp.Future }

func (f IPFS_unpin_Params_Future) Struct() (IPFS_unpin_Params, error) {
	p, err := f.Future.Ptr()
	return IPFS_unpin_Params(p.Struct()), err
}

type IPFS_unpin_Results capnp.Struct

// IPFS_unpin_Results_TypeID is the unique identifier for the type IPFS_unpin_Results.
const IPFS_unpin_Results_TypeID = 0xa72dee615d5bbb87

func NewIPFS_unpin_Results(s *capnp.Segment) (IPFS_unpin_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return IPFS_unpin_Results(st), err
}

func NewRootIPFS_unpin_Results(s *capnp.Segment) (IPFS_unpin_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return IPFS_unpin_Results(st), err
}

func ReadRootIPFS_unpin_Results(msg *capnp.Message) (IPFS_unpin_Results, error) {
	root, err := msg.Root()
	return IPFS_unpin_Results(root.Struct()), err
}

func (s IPFS_unpin_Results) String() string {
	str, _ := text.Marshal(0xa72dee615d5bbb87, capnp.Struct(s))
	return str
}

func (s IPFS_unpin_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (IPFS_unpin_Results) DecodeFromPtr(p capnp.Ptr) IPFS_unpin_Results {
	return IPFS_unpin_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s IPFS_unpin_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s IPFS_unpin_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s IPFS_unpin_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s IPFS_unpin_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s IPFS_unpin_Results) Success() bool {
	return capnp.Struct(s).Bit(0)
}

func (s IPFS_unpin_Results) SetSuccess(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// IPFS_unpin_Results_List is a list of IPFS_unpin_Results.
type IPFS_unpin_Results_List = capnp.StructList[IPFS_unpin_Results]

// NewIPFS_unpin_Results creates a new list of IPFS_unpin_Results.
func NewIPFS_unpin_Results_List(s *capnp.Segment, sz int32) (IPFS_unpin_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[IPFS_unpin_Results](l), err
}

// IPFS_unpin_Results_Future is a wrapper for a IPFS_unpin_Results promised by a client call.
type IPFS_unpin_Results_Future struct{ *capnp.Future }

func (f IPFS_unpin_Results_Future) Struct() (IPFS_unpin_Results, error) {
	p, err := f.Future.Ptr()
	return IPFS_unpin_Results(p.Struct()), err
}

type IPFS_pins_Params capnp.Struct

// IPFS_pins_Params_TypeID is the unique identifier for the type IPFS_pins_Params.
const IPFS_pins_Params_TypeID = 0xe798bea7bc0cc0ea

func NewIPFS_pins_Params(s *capnp.Segment) (IPFS_pins_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return IPFS_pins_Params(st), err
}

func NewRootIPFS_pins_Params(s *capnp.Segment) (IPFS_pins_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return IPFS_pins_Params(st), err
}

func ReadRootIPFS_pins_Params(msg *capnp.Message) (IPFS_pins_Params, error) {
	root, err := msg.Root()
	return IPFS_pins_Params(root.Struct()), err
}

func (s IPFS_pins_Params) String() string {
	str, _ := text.Marshal(0xe798bea7bc0cc0ea, capnp.Struct(s))
	return str
}

func (s IPFS_pins_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (IPFS_pins_Params) DecodeFromPtr(p capnp.Ptr) IPFS_pins_Params {
	return IPFS_pins_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s IPFS_pins_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s IPFS_pins_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s IPFS_pins_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s IPFS_pins_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// IPFS_pins_Params_List is a list of IPFS_pins_Params.
type IPFS_pins_Params_List = capnp.StructList[IPFS_pins_Params]

// NewIPFS_pins_Params creates a new list of IPFS_pins_Params.
func NewIPFS_pins_Params_List(s *capnp.Segment, sz int32) (IPFS_pins_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[IPFS_pins_Params](l), err
}

// IPFS_pins_Params_Future is a wrapper for a IPFS_pins_Params promised by a client call.
type IPFS_pins_Params_Future struct{ *capnp.Future }

func (f IPFS_pins_Params_Future) Struct() (IPFS_pins_Params, error) {
	p, err := f.Future.Ptr()
	return IPFS_pins_Params(p.Struct()), err
}

type IPFS_pins_Results capnp.Struct

// IPFS_pins_Results_TypeID is the unique identifier for the type IPFS_pins_Results.
const IPFS_pins_Results_TypeID = 0xe0f22a608a7c6e22

func NewIPFS_pins_Results(s *capnp.Segment) (IPFS_pins_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IPFS_pins_Results(st), err
}

func NewRootIPFS_pins_Results(s *capnp.Segment) (IPFS_pins_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IPFS_pins_Results(st), err
}

func ReadRootIPFS_pins_Results(msg *capnp.Message) (IPFS_pins_Results, error) {
	root, err := msg.Root()
	return IPFS_pins_Results(root.Struct()), err
}

func (s IPFS_pins_Results) String() string {
	str, _ := text.Marshal(0xe0f22a608a7c6e22, capnp.Struct(s))
	return str
}

func (s IPFS_pins_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (IPFS_pins_Results) DecodeFromPtr(p capnp.Ptr) IPFS_pins_Results {
	return IPFS_pins_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s IPFS_pins_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s IPFS_pins_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s IPFS_pins_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s IPFS_pins_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s IPFS_pins_Results) Cids() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.TextList(p.List()), err
}

func (s IPFS_pins_Results) HasCids() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s IPFS_pins_Results) SetCids(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewCids sets the cids field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s IPFS_pins_Results) NewCids(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// IPFS_pins_Results_List is a list of IPFS_pins_Results.
type IPFS_pins_Results_List = capnp.StructList[IPFS_pins_Results]

// NewIPFS_pins_Results creates a new list of IPFS_pins_Results.
func NewIPFS_pins_Results_List(s *capnp.Segment, sz int32) (IPFS_pins_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[IPFS_pins_Results](l), err
}

// IPFS_pins_Results_Future is a wrapper for a IPFS_pins_Results promised by a client call.
type IPFS_pins_Results_Future struct{ *capnp.Future }

func (f IPFS_pins_Results_Future) Struct() (IPFS_pins_Results, error) {
	p, err := f.Future.Ptr()
	return IPFS_pins_Results(p.Struct()), err
}

type IPFS_id_Params capnp.Struct

// IPFS_id_Params_TypeID is the unique identifier for the type IPFS_id_Params.
const IPFS_id_Params_TypeID = 0xb7e699451c43a067

func NewIPFS_id_Params(s *capnp.Segment) (IPFS_id_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return IPFS_id_Params(st), err
}

func NewRootIPFS_id_Params(s *capnp.Segment) (IPFS_id_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return IPFS_id_Params(st), err
}

func ReadRootIPFS_id_Params(msg *capnp.Message) (IPFS_id_Params, error) {
	root, err := msg.Root()
	return IPFS_id_Params(root.Struct()), err
}

func (s IPFS_id_Params) String() string {
	str, _ := text.Marshal(0xb7e699451c43a067, capnp.Struct(s))
	return str
}

func (s IPFS_id_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (IPFS_id_Params) DecodeFromPtr(p capnp.Ptr) IPFS_id_Params {
	return IPFS_id_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s IPFS_id_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s IPFS_id_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s IPFS_id_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s IPFS_id_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// IPFS_id_Params_List is a list of IPFS_id_Params.
type IPFS_id_Params_List = capnp.StructList[IPFS_id_Params]

// NewIPFS_id_Params creates a new list of IPFS_id_Params.
func NewIPFS_id_Params_List(s *capnp.Segment, sz int32) (IPFS_id_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[IPFS_id_Params](l), err
}

// IPFS_id_Params_Future is a wrapper for a IPFS_id_Params promised by a client call.
type IPFS_id_Params_Future struct{ *capnp.Future }

func (f IPFS_id_Params_Future) Struct() (IPFS_id_Params, error) {
	p, err := f.Future.Ptr()
	return IPFS_id_Params(p.Struct()), err
}

type IPFS_id_Results capnp.Struct

// IPFS_id_Results_TypeID is the unique identifier for the type IPFS_id_Results.
const IPFS_id_Results_TypeID = 0xf469f437c0bfc104

func NewIPFS_id_Results(s *capnp.Segment) (IPFS_id_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IPFS_id_Results(st), err
}

func NewRootIPFS_id_Results(s *capnp.Segment) (IPFS_id_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IPFS_id_Results(st), err
}

func ReadRootIPFS_id_Results(msg *capnp.Message) (IPFS_id_Results, error) {
	root, err := msg.Root()
	return IPFS_id_Results(root.Struct()), err
}

func (s IPFS_id_Results) String() string {
	str, _ := text.Marshal(0xf469f437c0bfc104, capnp.Struct(s))
	return str
}

func (s IPFS_id_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (IPFS_id_Results) DecodeFromPtr(p capnp.Ptr) IPFS_id_Results {
	return IPFS_id_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s IPFS_id_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s IPFS_id_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s IPFS_id_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s IPFS_id_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s IPFS_id_Results) PeerInfo() (PeerInfo, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return PeerInfo(p.Struct()), err
}

func (s IPFS_id_Results) HasPeerInfo() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s IPFS_id_Results) SetPeerInfo(v PeerInfo) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewPeerInfo sets the peerInfo field to a newly
// allocated PeerInfo struct, preferring placement in s's segment.
func (s IPFS_id_Results) NewPeerInfo() (PeerInfo, error) {
	ss, err := NewPeerInfo(capnp.Struct(s).Segment())
	if err != nil {
		return PeerInfo{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// IPFS_id_Results_List is a list of IPFS_id_Results.
type IPFS_id_Results_List = capnp.StructList[IPFS_id_Results]

// NewIPFS_id_Results creates a new list of IPFS_id_Results.
func NewIPFS_id_Results_List(s *capnp.Segment, sz int32) (IPFS_id_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[IPFS_id_Results](l), err
}

// IPFS_id_Results_Future is a wrapper for a IPFS_id_Results promised by a client call.
type IPFS_id_Results_Future struct{ *capnp.Future }

func (f IPFS_id_Results_Future) Struct() (IPFS_id_Results, error) {
	p, err := f.Future.Ptr()
	return IPFS_id_Results(p.Struct()), err
}
func (p IPFS_id_Results_Future) PeerInfo() PeerInfo_Future {
	return PeerInfo_Future{Future: p.Future.Field(0, nil)}
}

type IPFS_connect_Params capnp.Struct

// IPFS_connect_Params_TypeID is the unique identifier for the type IPFS_connect_Params.
const IPFS_connect_Params_TypeID = 0xadae6334690b6b6f

func NewIPFS_connect_Params(s *capnp.Segment) (IPFS_connect_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IPFS_connect_Params(st), err
}

func NewRootIPFS_connect_Params(s *capnp.Segment) (IPFS_connect_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IPFS_connect_Params(st), err
}

func ReadRootIPFS_connect_Params(msg *capnp.Message) (IPFS_connect_Params, error) {
	root, err := msg.Root()
	return IPFS_connect_Params(root.Struct()), err
}

func (s IPFS_connect_Params) String() string {
	str, _ := text.Marshal(0xadae6334690b6b6f, capnp.Struct(s))
	return str
}

func (s IPFS_connect_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (IPFS_connect_Params) DecodeFromPtr(p capnp.Ptr) IPFS_connect_Params {
	return IPFS_connect_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s IPFS_connect_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s IPFS_connect_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s IPFS_connect_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s IPFS_connect_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s IPFS_connect_Params) Addr() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s IPFS_connect_Params) HasAddr() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s IPFS_connect_Params) AddrBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s IPFS_connect_Params) SetAddr(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// IPFS_connect_Params_List is a list of IPFS_connect_Params.
type IPFS_connect_Params_List = capnp.StructList[IPFS_connect_Params]

// NewIPFS_connect_Params creates a new list of IPFS_connect_Params.
func NewIPFS_connect_Params_List(s *capnp.Segment, sz int32) (IPFS_connect_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[IPFS_connect_Params](l), err
}

// IPFS_connect_Params_Future is a wrapper for a IPFS_connect_Params promised by a client call.
type IPFS_connect_Params_Future struct{ *capnp.Future }

func (f IPFS_connect_Params_Future) Struct() (IPFS_connect_Params, error) {
	p, err := f.Future.Ptr()
	return IPFS_connect_Params(p.Struct()), err
}

type IPFS_connect_Results capnp.Struct

// IPFS_connect_Results_TypeID is the unique identifier for the type IPFS_connect_Results.
const IPFS_connect_Results_TypeID = 0xc5fe3a2c8650ed19

func NewIPFS_connect_Results(s *capnp.Segment) (IPFS_connect_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return IPFS_connect_Results(st), err
}

func NewRootIPFS_connect_Results(s *capnp.Segment) (IPFS_connect_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return IPFS_connect_Results(st), err
}

func ReadRootIPFS_connect_Results(msg *capnp.Message) (IPFS_connect_Results, error) {
	root, err := msg.Root()
	return IPFS_connect_Results(root.Struct()), err
}

func (s IPFS_connect_Results) String() string {
	str, _ := text.Marshal(0xc5fe3a2c8650ed19, capnp.Struct(s))
	return str
}

func (s IPFS_connect_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (IPFS_connect_Results) DecodeFromPtr(p capnp.Ptr) IPFS_connect_Results {
	return IPFS_connect_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s IPFS_connect_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s IPFS_connect_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s IPFS_connect_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s IPFS_connect_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s IPFS_connect_Results) Success() bool {
	return capnp.Struct(s).Bit(0)
}

func (s IPFS_connect_Results) SetSuccess(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// IPFS_connect_Results_List is a list of IPFS_connect_Results.
type IPFS_connect_Results_List = capnp.StructList[IPFS_connect_Results]

// NewIPFS_connect_Results creates a new list of IPFS_connect_Results.
func NewIPFS_connect_Results_List(s *capnp.Segment, sz int32) (IPFS_connect_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[IPFS_connect_Results](l), err
}

// IPFS_connect_Results_Future is a wrapper for a IPFS_connect_Results promised by a client call.
type IPFS_connect_Results_Future struct{ *capnp.Future }

func (f IPFS_connect_Results_Future) Struct() (IPFS_connect_Results, error) {
	p, err := f.Future.Ptr()
	return IPFS_connect_Results(p.Struct()), err
}

type IPFS_peers_Params capnp.Struct

// IPFS_peers_Params_TypeID is the unique identifier for the type IPFS_peers_Params.
const IPFS_peers_Params_TypeID = 0xdbc8c8183207fc9c

func NewIPFS_peers_Params(s *capnp.Segment) (IPFS_peers_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return IPFS_peers_Params(st), err
}

func NewRootIPFS_peers_Params(s *capnp.Segment) (IPFS_peers_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return IPFS_peers_Params(st), err
}

func ReadRootIPFS_peers_Params(msg *capnp.Message) (IPFS_peers_Params, error) {
	root, err := msg.Root()
	return IPFS_peers_Params(root.Struct()), err
}

func (s IPFS_peers_Params) String() string {
	str, _ := text.Marshal(0xdbc8c8183207fc9c, capnp.Struct(s))
	return str
}

func (s IPFS_peers_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (IPFS_peers_Params) DecodeFromPtr(p capnp.Ptr) IPFS_peers_Params {
	return IPFS_peers_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s IPFS_peers_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s IPFS_peers_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s IPFS_peers_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s IPFS_peers_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// IPFS_peers_Params_List is a list of IPFS_peers_Params.
type IPFS_peers_Params_List = capnp.StructList[IPFS_peers_Params]

// NewIPFS_peers_Params creates a new list of IPFS_peers_Params.
func NewIPFS_peers_Params_List(s *capnp.Segment, sz int32) (IPFS_peers_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[IPFS_peers_Params](l), err
}

// IPFS_peers_Params_Future is a wrapper for a IPFS_peers_Params promised by a client call.
type IPFS_peers_Params_Future struct{ *capnp.Future }

func (f IPFS_peers_Params_Future) Struct() (IPFS_peers_Params, error) {
	p, err := f.Future.Ptr()
	return IPFS_peers_Params(p.Struct()), err
}

type IPFS_peers_Results capnp.Struct

// IPFS_peers_Results_TypeID is the unique identifier for the type IPFS_peers_Results.
const IPFS_peers_Results_TypeID = 0x8e86d1c015472327

func NewIPFS_peers_Results(s *capnp.Segment) (IPFS_peers_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IPFS_peers_Results(st), err
}

func NewRootIPFS_peers_Results(s *capnp.Segment) (IPFS_peers_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IPFS_peers_Results(st), err
}

func ReadRootIPFS_peers_Results(msg *capnp.Message) (IPFS_peers_Results, error) {
	root, err := msg.Root()
	return IPFS_peers_Results(root.Struct()), err
}

func (s IPFS_peers_Results) String() string {
	str, _ := text.Marshal(0x8e86d1c015472327, capnp.Struct(s))
	return str
}

func (s IPFS_peers_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (IPFS_peers_Results) DecodeFromPtr(p capnp.Ptr) IPFS_peers_Results {
	return IPFS_peers_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s IPFS_peers_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s IPFS_peers_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s IPFS_peers_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s IPFS_peers_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s IPFS_peers_Results) PeerList() (PeerInfo_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return PeerInfo_List(p.List()), err
}

func (s IPFS_peers_Results) HasPeerList() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s IPFS_peers_Results) SetPeerList(v PeerInfo_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewPeerList sets the peerList field to a newly
// allocated PeerInfo_List, preferring placement in s's segment.
func (s IPFS_peers_Results) NewPeerList(n int32) (PeerInfo_List, error) {
	l, err := NewPeerInfo_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return PeerInfo_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// IPFS_peers_Results_List is a list of IPFS_peers_Results.
type IPFS_peers_Results_List = capnp.StructList[IPFS_peers_Results]

// NewIPFS_peers_Results creates a new list of IPFS_peers_Results.
func NewIPFS_peers_Results_List(s *capnp.Segment, sz int32) (IPFS_peers_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[IPFS_peers_Results](l), err
}

// IPFS_peers_Results_Future is a wrapper for a IPFS_peers_Results promised by a client call.
type IPFS_peers_Results_Future struct{ *capnp.Future }

func (f IPFS_peers_Results_Future) Struct() (IPFS_peers_Results, error) {
	p, err := f.Future.Ptr()
	return IPFS_peers_Results(p.Struct()), err
}

type Entry capnp.Struct

// Entry_TypeID is the unique identifier for the type Entry.
const Entry_TypeID = 0xe50956368ed67ecf

func NewEntry(s *capnp.Segment) (Entry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return Entry(st), err
}

func NewRootEntry(s *capnp.Segment) (Entry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return Entry(st), err
}

func ReadRootEntry(msg *capnp.Message) (Entry, error) {
	root, err := msg.Root()
	return Entry(root.Struct()), err
}

func (s Entry) String() string {
	str, _ := text.Marshal(0xe50956368ed67ecf, capnp.Struct(s))
	return str
}

func (s Entry) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Entry) DecodeFromPtr(p capnp.Ptr) Entry {
	return Entry(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Entry) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Entry) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Entry) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Entry) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Entry) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Entry) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Entry) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Entry) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Entry) Type() EntryType {
	return EntryType(capnp.Struct(s).Uint16(0))
}

func (s Entry) SetType(v EntryType) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s Entry) Size() uint64 {
	return capnp.Struct(s).Uint64(8)
}

func (s Entry) SetSize(v uint64) {
	capnp.Struct(s).SetUint64(8, v)
}

func (s Entry) Cid() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Entry) HasCid() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Entry) CidBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Entry) SetCid(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// Entry_List is a list of Entry.
type Entry_List = capnp.StructList[Entry]

// NewEntry creates a new list of Entry.
func NewEntry_List(s *capnp.Segment, sz int32) (Entry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2}, sz)
	return capnp.StructList[Entry](l), err
}

// Entry_Future is a wrapper for a Entry promised by a client call.
type Entry_Future struct{ *capnp.Future }

func (f Entry_Future) Struct() (Entry, error) {
	p, err := f.Future.Ptr()
	return Entry(p.Struct()), err
}

type EntryType uint16

// EntryType_TypeID is the unique identifier for the type EntryType.
const EntryType_TypeID = 0x84f03db984574d8a

// Values of EntryType.
const (
	EntryType_file      EntryType = 0
	EntryType_directory EntryType = 1
	EntryType_symlink   EntryType = 2
)

// String returns the enum's constant name.
func (c EntryType) String() string {
	switch c {
	case EntryType_file:
		return "file"
	case EntryType_directory:
		return "directory"
	case EntryType_symlink:
		return "symlink"

	default:
		return ""
	}
}

// EntryTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func EntryTypeFromString(c string) EntryType {
	switch c {
	case "file":
		return EntryType_file
	case "directory":
		return EntryType_directory
	case "symlink":
		return EntryType_symlink

	default:
		return 0
	}
}

type EntryType_List = capnp.EnumList[EntryType]

func NewEntryType_List(s *capnp.Segment, sz int32) (EntryType_List, error) {
	return capnp.NewEnumList[EntryType](s, sz)
}

type NodeInfo capnp.Struct

// NodeInfo_TypeID is the unique identifier for the type NodeInfo.
const NodeInfo_TypeID = 0xa83fd4abe6553705

func NewNodeInfo(s *capnp.Segment) (NodeInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 3})
	return NodeInfo(st), err
}

func NewRootNodeInfo(s *capnp.Segment) (NodeInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 3})
	return NodeInfo(st), err
}

func ReadRootNodeInfo(msg *capnp.Message) (NodeInfo, error) {
	root, err := msg.Root()
	return NodeInfo(root.Struct()), err
}

func (s NodeInfo) String() string {
	str, _ := text.Marshal(0xa83fd4abe6553705, capnp.Struct(s))
	return str
}

func (s NodeInfo) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (NodeInfo) DecodeFromPtr(p capnp.Ptr) NodeInfo {
	return NodeInfo(capnp.Struct{}.DecodeFromPtr(p))
}

func (s NodeInfo) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s NodeInfo) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s NodeInfo) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s NodeInfo) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s NodeInfo) Cid() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s NodeInfo) HasCid() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s NodeInfo) CidBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s NodeInfo) SetCid(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s NodeInfo) Size() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s NodeInfo) SetSize(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s NodeInfo) CumulativeSize() uint64 {
	return capnp.Struct(s).Uint64(8)
}

func (s NodeInfo) SetCumulativeSize(v uint64) {
	capnp.Struct(s).SetUint64(8, v)
}

func (s NodeInfo) Type() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s NodeInfo) HasType() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s NodeInfo) TypeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s NodeInfo) SetType(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s NodeInfo) Links() (Link_List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return Link_List(p.List()), err
}

func (s NodeInfo) HasLinks() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s NodeInfo) SetLinks(v Link_List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewLinks sets the links field to a newly
// allocated Link_List, preferring placement in s's segment.
func (s NodeInfo) NewLinks(n int32) (Link_List, error) {
	l, err := NewLink_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Link_List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}

// NodeInfo_List is a list of NodeInfo.
type NodeInfo_List = capnp.StructList[NodeInfo]

// NewNodeInfo creates a new list of NodeInfo.
func NewNodeInfo_List(s *capnp.Segment, sz int32) (NodeInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 3}, sz)
	return capnp.StructList[NodeInfo](l), err
}

// NodeInfo_Future is a wrapper for a NodeInfo promised by a client call.
type NodeInfo_Future struct{ *capnp.Future }

func (f NodeInfo_Future) Struct() (NodeInfo, error) {
	p, err := f.Future.Ptr()
	return NodeInfo(p.Struct()), err
}

type Link capnp.Struct

// Link_TypeID is the unique identifier for the type Link.
const Link_TypeID = 0xe6d3c322caf5dd4b

func NewLink(s *capnp.Segment) (Link, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Link(st), err
}

func NewRootLink(s *capnp.Segment) (Link, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Link(st), err
}

func ReadRootLink(msg *capnp.Message) (Link, error) {
	root, err := msg.Root()
	return Link(root.Struct()), err
}

func (s Link) String() string {
	str, _ := text.Marshal(0xe6d3c322caf5dd4b, capnp.Struct(s))
	return str
}

func (s Link) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Link) DecodeFromPtr(p capnp.Ptr) Link {
	return Link(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Link) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Link) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Link) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Link) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Link) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Link) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Link) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Link) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Link) Size() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s Link) SetSize(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s Link) Cid() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Link) HasCid() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Link) CidBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Link) SetCid(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// Link_List is a list of Link.
type Link_List = capnp.StructList[Link]

// NewLink creates a new list of Link.
func NewLink_List(s *capnp.Segment, sz int32) (Link_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[Link](l), err
}

// Link_Future is a wrapper for a Link promised by a client call.
type Link_Future struct{ *capnp.Future }

func (f Link_Future) Struct() (Link, error) {
	p, err := f.Future.Ptr()
	return Link(p.Struct()), err
}

type PeerInfo capnp.Struct

// PeerInfo_TypeID is the unique identifier for the type PeerInfo.
const PeerInfo_TypeID = 0xa06f294430ac72ff

func NewPeerInfo(s *capnp.Segment) (PeerInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return PeerInfo(st), err
}

func NewRootPeerInfo(s *capnp.Segment) (PeerInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return PeerInfo(st), err
}

func ReadRootPeerInfo(msg *capnp.Message) (PeerInfo, error) {
	root, err := msg.Root()
	return PeerInfo(root.Struct()), err
}

func (s PeerInfo) String() string {
	str, _ := text.Marshal(0xa06f294430ac72ff, capnp.Struct(s))
	return str
}

func (s PeerInfo) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (PeerInfo) DecodeFromPtr(p capnp.Ptr) PeerInfo {
	return PeerInfo(capnp.Struct{}.DecodeFromPtr(p))
}

func (s PeerInfo) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s PeerInfo) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s PeerInfo) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s PeerInfo) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s PeerInfo) Id() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s PeerInfo) HasId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s PeerInfo) IdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s PeerInfo) SetId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s PeerInfo) Addresses() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.TextList(p.List()), err
}

func (s PeerInfo) HasAddresses() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s PeerInfo) SetAddresses(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewAddresses sets the addresses field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s PeerInfo) NewAddresses(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s PeerInfo) Protocols() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.TextList(p.List()), err
}

func (s PeerInfo) HasProtocols() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s PeerInfo) SetProtocols(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewProtocols sets the protocols field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s PeerInfo) NewProtocols(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}

// PeerInfo_List is a list of PeerInfo.
type PeerInfo_List = capnp.StructList[PeerInfo]

// NewPeerInfo creates a new list of PeerInfo.
func NewPeerInfo_List(s *capnp.Segment, sz int32) (PeerInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[PeerInfo](l), err
}

// PeerInfo_Future is a wrapper for a PeerInfo promised by a client call.
type PeerInfo_Future struct{ *capnp.Future }

func (f PeerInfo_Future) Struct() (PeerInfo, error) {
	p, err := f.Future.Ptr()
	return PeerInfo(p.Struct()), err
}

const schema_da965b22da734daf = "x\xda\xb4X}p\x14\xf5\xf9\x7f\x9e\xdd\x0b{\xf7\xbb" +
	"\\\xf6\xf66QA\xf8e\x1a\xe2`2&\xa3F@" +
	"\xd2a\xeeJ\x08\x14!\x90\xe5E\x8b\x0au\xbd[d" +
	"\xe5\xb2w\xee\xee\x01q@\xaa\x04\x14\x07\x19\x8a\xe2H" +
	"+-\x9dAA$Ha\x1c\x0a\xad-N\x8b2Z" +
	"\xab\xb6HG-\xb5Z\xc0\x16'\x16(\xe9\xa8U\xb7" +
	"\xf3\xec\xdd\xbeds\x81:m\xff\xbb\xd9\xe7{\x9f\xef" +
	"\xf3\xf2y\xde\xbe\xd7\x1a\xc3R\xa1\xebbcx`\xa4" +
	"\xbd\x15\xc3\xac\x9e\x11\xa1\xcb\xd7\xdf\xd0\xf3\x00\x08\x09\x04" +
	"\xa8@\x0e@\xec\xe6\xce\x03\x8a+\xb9$\xa0\xf5\xd1\xcb" +
	"/\xcd9f\x8e\\\x0dR\x02\xd1\xbay\xd3\xc7\xe2\xb3" +
	";?Z\x0d\xed\xc81\x00\xe2V\xee\x8c\xf8\x0cG\xff" +
	"y\x8a[\x06>\xb9\x10c\xad\xe7:\x8cw\xean{" +
	"\xfc\x1d\x00\x14Oq\x9b\xc4>\xeer\x00\xf1Sn\xaa" +
	"\xf8\xb50\x07`=\xdcqK\xcf\xc1\x89g{@\x88" +
	"1\x03\x0eG\xc2\x87D\x81\x8e\x88\xb1\xf0,@\xeb\xf7" +
	"\x893\x87\xf8\xde\xa5\xeb\xfd:^\x15\xfe\x0cPl\x08" +
	"\x93\x8ecFO\xad9\xfc\xe6\xda\x0d>y\xcb\xb40" +
	"\x83\x80b\x87}\xe0\x8d\xb3s\x0f\xe4\xd7\xb6l\xf4\x03" +
	"\xdco\x03\xac\xb1\xe5\xa9W'\xec\x98\xb0!\xb9\x05\xa4" +
	"\x1aD\x80\x10\x01<\x15n$\x80^\xfb\xc0\xc8\xe7\x17" +
	"\xf5\xfd\xf6\x9a\x19\xdb@\xb8\xcc\xbd\xe1\xb5p\x1d\x1dx" +
	"\xcb>`\xe9\xbb\xaf\x9d\xdc\x90\xdb\x06B\x0c=[*" +
	"X\xba\xa9?\xbcO\xfc\xc26\xe7\xd3\xf0s\x80\xd6\x83" +
	"?\xbdm\x81\xfcq\xd3\x0e\xdb\xa5\xa5\xdb\x0eFlu" +
	"_\x88\x10X\xc5\xf8y\xa7\x9f=\x96\xdc\x09R\x0c\x99" +
	" \xda\x89\xc8>\xf1T\x84\xfe\xf3~\xa4\x16\x01\xad\xd1" +
	"\xd6?\x98\xe4\x95\xef\xed\xf2\x1bW\x11\xfd\x80\xfc\x18%" +
	"\xb4\x93/\xbf0\xba\xb0gW\xaf_\xde\x10=\x03(" +
	"6\xd9\xf2\xdc\x92\xa8zCz\x8f_\xde\xd2\x11\xfd?" +
	"Rg\x9e}\xe0\xaemm#\xdb\xb7\x9c>P<@" +
	"\xea\x8a\x85\xe8\x07\x10\xb2\xee\xfe\xd5\xa4\xbf\xfc\xf1\xdd\xbe" +
	"\x03 ]\x86h\xb5\xb5\xaf\x9e\xa2-\xfc\xdb\xafK\xdc" +
	"h\x99\x1f\x1d\x81\xa2\x1a\xa5\xe3J\x94\xc8\x11\xdd_\xd5" +
	"p\xe3w\xb8\x9f\x94\x9cXa{9:\x02\x01[z" +
	"\xa3\xb6)\xe9\x99\xdb\xf7\x9c|\xeb\xd1C~U\xcfU" +
	"\x92\xaa\xfd\x95\xa4\xc9\xf0\xbe\xce\xb5\xd7\xb4~y\xc4\xef" +
	"\xb9\x9aX\x82T\x1d\x15\xa3\x03O~\xff\xb1\x99S\xc6" +
	"\xcdy\xc9\x0f01F\x00\xdf\xb0\xe5\x8f\x1e\xd1\x16v" +
	"|k\xe4\xab~\xf9=1\"B\xc1\x96\x8f3\x9f^" +
	"Q\xf1x\xeb\x00\xf9\xe6\x18e\xc3\x16[\xee\xda\x18\xe4" +
	"\xf7\xc1\xd8>\xf1\xc5\xd8\x18\x8aOl\xaaXQE\xfc" +
	"^x\xe3\xe1\x7f\xe6{n:\xe6\x07\xeb\xb3\x959G" +
	"`_\xec\x1f{\xeb\xd6k\x0e\x1f\xf7I\x85*\xba\xaa" +
	"\xa6\x8a\xae\xfa\xff\xe3'\x7f\xf8\xfa\xe7\x7f~\x1b\xa4\xd1" +
	"\x88\x9e\xabk\x90C\x80\x96\xb1U\xadd\xf5\xc4*r" +
	"\xec\x93\x9fs\xd7_q\xf4\xe8\xbb\xbe\x00m\xa9\xfa\x0c" +
	"B\xd6\x09\xfd\xbd\x163\xf7\xca\x1f@\x1a\x85\xbeT." +
	"a\xac\xac\xb2\x83\xbc\xc6\xc6\xa8\xd3V<|G\xe3\xf9" +
	"?\xf9\x95}\xbf\x8a<s\xcaV\xe7\xf5\xfb\x8eo\x18" +
	"ws\xe4T\x90\x93\x0c\x1d\xac\xe1\xbf'\x8e\xe2\xe9\xd7" +
	"p\xfeC@k\xfa\x89\xfeW\xea~\xf9\xbb\xd3t\x18" +
	"\x83\x87\xfb\xf8Mb\xbf}\xf8\x1cO\xe9p\xe6p\xe5" +
	"\xcfv\xfc\xfc\x89\x0f}\xda\xaf\x8b\x9f\x87\x90\xd5?\xba" +
	"f\xfa\xf9\xe7\x0f\xf8\x05]\xb6`\xfa\xa8\xaf\x8fa\xbe" +
	"}\xdf\xd9AQ\x90\xe2\x9b\xc4\xf9qb\xc5\xbc\xf8\x83" +
	"\x8cxJ\xa00\xb4>\xfd\x83%\xb3~S\xf9w\xa2" +
	"\x9d\x17@[\x97\x96\xd7\x84:\x14O\xd01\xf1m\x81" +
	"\xdc\xf0@\xe5\xde\xdbO\xce\x1d\x7f\x01\x84\x1a7\x19\xc6" +
	"&\xecD\x9f\x98 ?\x84^\xfc\xc5\xe1\xf1\x17\xd4\x0b" +
	"~?-HPPe[\xde\xdf?\x81k\xed\x1f\xfe" +
	"\xc9 \xdd\xd6$v\x89\x8f$l\xeb\x12S\xc5\x1f\xd3" +
	"/k\xc1-ol_7\xfe\xcaO||\x16\xb7$" +
	"\x88\x03[\x13Ih\xb2\x8cn\xc3T\xba\x9a\xd3\x8c\x9c" +
	"\xd7\xf2\xad\xd3:\xa7\xcci6L\xd9\xac\xef\xac\x95u" +
	"\xb9\xcb\x90Bl\x08 \x84\x00B\xac\x0e@\x0a\xb3(" +
	"U3\xc8\xa5\xd5\x0cV\x02\x83\x95\x80\x01\x886%\x9b" +
	"m\xee\x90\xbb\xefT\xday]\xcf\xe9\x9d\x88R\x98\x0d" +
	"UZ\x96\x8d\xd20\x02@\xaagQ\xba\x96\xc1\x18~" +
	"i!z\x14\x12\x9a\xea\x80asK`\x18\xa7\xe8\xba" +
	"\x8b\x8b\x0e.f\xa5\x90\x9fd\x02\xdej\x15o\xd2u" +
	"`s\xba\x14b+\x00\xdc\xa0\xa2\x93\x8a\x82\xd0\x08\x8c" +
	"P\xc1\xf1\xcbd\xd5La'b\x00\xbb]3\x93z" +
	"\xf7\xdc\xee\xbcB\xdaV\"\x03 \x8cj\x04@\x14j" +
	"f\x03 #\x08\x93\x00\xf8EjV\xb12\xaa\xae\xa4" +
	"\xcd\x9c\x0e\xd8\xbd\xca\xe8\xee\xca\xaa\xda\x92rN,h" +
	"yU\xabOv~e/\xb2\x1eF^Qt\xa3~" +
	"\xb6b\x14\xb2\xa6\x01~\x90\x9b\x00\xa4J\x16\xa5\xab\x19" +
	"\xb4\xe8\xd4\x0c\xd50\x01\x00\xab\x00;Y\xc4\xb8\xd7," +
	"\x00\xe9\xe3\x90a\x9e\x9d,\xa2\xfb\xc1\x1b=\x0dyU" +
	"[\x94\xc3\xb8\xd7.\x001>H\xd9\xb6\x9cf\xe4\xb2" +
	"Js^W53\xab\x91\xc6|\x104\xe1\x81\xa2\x86" +
	"a`0<\x08\xa7}\xb9\x92.\x989\xbd\xd9\xc8\xcb" +
	"\xcbl\x98\x02w\x11\xdd\xd2J6\x8bq\xafn\x05t" +
	"+\x86\xb6SQj\xf5i\xda\xa2\x9c\x1dY\x17\xa8\x9d" +
	"h\x98bQ\x9a\xc1\xa0\x80XM\xb9!L\x9b\x0d " +
	"}\x93E)\xc3\xa0\xc00\xd56\x0fd\xfax\x07\x8b" +
	"\xd2\x0a\x06Y_\xbc\xe4LFW\x0cC\x014\x1c\xb7" +
	"\x93\x88\x9c\x9d\xd7sf.\x9d\xcb\x96\x11\x95\x89r\x91" +
	")\xe5\xa2<\xc93v\x95QH\xa7\x15\xc3@\x04\x06" +
	"q\x90\x953s\x99Z\xc5\xb1\xb2\xdaEXId[" +
	"\xce\xa2\xd4\xc3\xa0c\xe4\xfd\xe4\xc2\x15,J\x0f\x91\x91" +
	"X4r\xcd\xbd\x00R\x0f\x8b\xd2F\x06\x05\x16\xab\x91" +
	"\x05\x10\x1e\xa1\x93\x0f\xb1(=\xc6\xa0\x10b\xaa1\x04" +
	" |\xf7z\x00i=\x8b\xd2\xce\x81\xfc\xe5\x0d\xf5^" +
	"\x05#\xc0`\x84\xbal\xa1\xab\x90\x95M\x15\x92K\x95" +
	"9>\x01ov\xe7\x15\xe7/\xb5\x94;\x86\xc7Y\xb7" +
	"\xa4\x0f\xcd\xd9\xacQ\xdf)\xeb\\ \xa5\xfc\xa4\xc8\xcb" +
	"\xe6\xe2!*\x93\x8d\x90\xa6\xda&\xf3\xffAV\xa6s" +
	"\x9a\xa6\xa4\x09\x85@\x00\x86\xd2\x84\x08r1M\xd4\x8c" +
	"c\xcbPi0+o\xaa9M\xce\xb6)l6\x1b" +
	"\xac\xa3\x8d\x83\xea\xa8\xdb\xce\xed:ZL\x0f\xc1\x9b\x97" +
	"\xa9\x9a\x01\x0e\xa8\xace\xd3\x8e\xecb\xbb\x0c?\x8d\x1a" +
	"=\x1a\x09\x83x\xf4\x84/Y6\x93\x1f7\xb2(\xed" +
	"&\x1e\xb1E\x1e=C\x1f\xb7\xb3(\xed%\x1e\x85\x8a" +
	"<\xea\xa5\xb4\xda\xcd\xa2t4\x104^\xd6\xef\x0a\xa6" +
	"\x0d\xa7hK\x83\x9f2\xaa\xe7\xdd\xf6\xe5\xa6.\xb7\xc9" +
	"y_\xc2\xc5\xbd\xa6<4\x9d(\xf1\xfe;d(\xa6" +
	"/\x1a_5}\x07r\xbb\\\xe1tP\xea\x19\\\xa5" +
	"h\xa6\xae*>\x1b\xdd\x91\xa9\xac\x8dv+\xa6\x9eW" +
	"\xb6\xcc\xb7z\xea%\xf5\xa2\xfaq\xaf\xb7\x06\x8ai " +
	"\x83f+\xb5\x17m\x1bw\xe62\xdd\x18\x03\x06c\x83" +
	"JU\xfbr\xa5\xd6\xa6\x9b\x14F\xf4MN\x11\xdd\xab" +
	"\xe4B\xe4n\xabM\xceOV\x8c\xb4\x0e\xb5j\xde\xcc" +
	"\xe9\x96\x93\x0c\xc0\x93Y\xa5V\xef\xcc\xfb\xe8lO\x82" +
	"p\xbd\xdd\xeakm.\x0f\xec\xf5>\x1b\xe4L\xa6\\" +
	"\xe0\xfd&ddS\x1edB\x00\xa2\x9c\x1b\xfe=\xf2" +
	"\x94\xc9\xf1d6\xdb\xac\xe8:%y\xbc\x94c\x0d\xad" +
	"^\x92c\xa9T7\x91\x92W\xb3(\xdd\xc0`\x92z" +
	"x\xc1p\xdaiy\xb73\xc1\x81\xa24\x94\x04\x9b\xb8" +
	"7\xb7\xd1\xd8F\xaa\xd8\x96\xfc\xef\x94Q5\xe3\xa2\xf3" +
	"G=\xf5x53d\x0fug7V\xef\xa6\xea\x18" +
	"w!d\x82\xb8\x9dEi\xb1\xd7\xf7\x94\xc6R\x1f\xcf" +
	"\xfa\xfa\x9eJ\x1f3,Jy_\xdf\xeb\xa2\x10.f" +
	"Q2\x19\xe45\xb9\xcbmX\xc5\xee\xc5{\xaf\x0a\x80" +
	"\xc8\x07Z_\xd9\x98\x175\x9d\xa1j\xb8$0\x864" +
	"zc\x88;\x85\xd0\xb7\xc9,J\x9d>E;\xeaJ" +
	"\xa3\xc9\xdc\xa0N\x97\xbc<\xe8\xf2\xd2d?d\xad\x08" +
	"\xca\xd1\xf9?\xce!\xe5\xaf\xb6\x13\xcfY<q?\x14" +
	"WL\xf1:\xac\x03F\xbc\x0a9\xf4\xde\x03\xd0Yv" +
	"\xc5\xe1\xb64\x86\x1c2\xeek\x02:\xab\xb4\x888\x02" +
	"\x18\xa1\x9fC\xd6},B\xe7AE\xf8+\x0d\xef'" +
	"8\x0c\xb9\xbb;:K\x8d\xf0f\x1d0\xc2\x11\x0e+" +
	"\xdc\x07\x1ct\x9e>\x84\x83T\x09z9\x1c\xe6\xae\x7f" +
	"\xe8l\xa0\xc2\x8f\x08s3\x87\x9c\xfb\xf2\x80\xce\xd6%" +
	"\xac#]Vr\x18v\x9f-\xd0y\x14\x10\xee\x99\x04" +
	"\x8c\xa0p\x18q\x17bt^\x86\x84\xf9t_\x07\xc7" +
	"\xc9\x99L\x0a\xb9\xb4l\xa6\x90\xcd\x1a)\xe4)/R" +
	"\xc8\xe5U-\x85\xb5\xf6\xb4\x97B\x9eB\x91\xa2\x812" +
	"\x85\xabJM$\x85\xb5v\x82\x0e\xacZ\x81z\xe1\x94" +
	"E5\xcf\x99\xeerUb\x93\x7f&p\xfbtS\xab" +
	"\x97\xa2\x03\x98\x93LgUE31\x11b\x011q" +
	"\xc9\xa9\xbe\xcc\xe0\xe5o!\xb9\x82\x99/\x98\x97\x18x" +
	"\xca58g\x97\xb9\xa2\xb4\xcb\xd0\x18K\xbb\xcc\xc0%" +
	"f\xf0d\xdf\x96\xd3xR\x90|P\xec\x06\xcef\x8d" +
	"\xcec\x1b\xadm\xd4\x0dV\x95l\x18\xb2\x1f\x14'\xf0" +
	"\xc1\xc5\xfc\"-\xfc_\x01\x00\x00\xff\xff\x87\x18[_"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_da965b22da734daf,
		Nodes: []uint64{
			0x8284348c17041a84,
			0x831c74d453c6c7eb,
			0x83eba8ab13ee9256,
			0x84f03db984574d8a,
			0x8c76ad0fbaea12d7,
			0x8e86d1c015472327,
			0x90338670b754f0d0,
			0x993f8e39a739cb40,
			0xa04c2cd2ed66b51c,
			0xa06f294430ac72ff,
			0xa72dee615d5bbb87,
			0xa83fd4abe6553705,
			0xaadf1b3f02f6ff23,
			0xadaaae7523bdc7e4,
			0xadae6334690b6b6f,
			0xb7e699451c43a067,
			0xb7eddbdee842c46a,
			0xb8078038290eb30b,
			0xba93d5e4aea44e63,
			0xc5fe3a2c8650ed19,
			0xc65336464e949b9c,
			0xcb1c584d5e6ec593,
			0xcb3a96057ca67436,
			0xccef5e6e46834543,
			0xd44a8470fbc0385e,
			0xd6c02c9d5a3500b3,
			0xd9e3fccf9fe4d61e,
			0xdbc8c8183207fc9c,
			0xdcca6f7433df72dd,
			0xe0f22a608a7c6e22,
			0xe50956368ed67ecf,
			0xe6d3c322caf5dd4b,
			0xe798bea7bc0cc0ea,
			0xe7b7b5f24b1523f5,
			0xf07e5f02273b1d4b,
			0xf30cce4f6b9ea63a,
			0xf43754e45cb00c82,
			0xf469f437c0bfc104,
			0xf819f53a0739f5f5,
			0xf81b3789a4d0575d,
		},
		Compressed: true,
	})
}
