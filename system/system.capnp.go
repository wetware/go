// Code generated by capnpc-go. DO NOT EDIT.

package system

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type IPFS capnp.Client

// IPFS_TypeID is the unique identifier for the type IPFS.
const IPFS_TypeID = 0xf07e5f02273b1d4b

func (c IPFS) Add(ctx context.Context, params func(IPFS_add_Params) error) (IPFS_add_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf07e5f02273b1d4b,
			MethodID:      0,
			InterfaceName: "system.capnp:IPFS",
			MethodName:    "add",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(IPFS_add_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return IPFS_add_Results_Future{Future: ans.Future()}, release

}

func (c IPFS) Cat(ctx context.Context, params func(IPFS_cat_Params) error) (IPFS_cat_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf07e5f02273b1d4b,
			MethodID:      1,
			InterfaceName: "system.capnp:IPFS",
			MethodName:    "cat",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(IPFS_cat_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return IPFS_cat_Results_Future{Future: ans.Future()}, release

}

func (c IPFS) Ls(ctx context.Context, params func(IPFS_ls_Params) error) (IPFS_ls_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf07e5f02273b1d4b,
			MethodID:      2,
			InterfaceName: "system.capnp:IPFS",
			MethodName:    "ls",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(IPFS_ls_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return IPFS_ls_Results_Future{Future: ans.Future()}, release

}

func (c IPFS) Stat(ctx context.Context, params func(IPFS_stat_Params) error) (IPFS_stat_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf07e5f02273b1d4b,
			MethodID:      3,
			InterfaceName: "system.capnp:IPFS",
			MethodName:    "stat",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(IPFS_stat_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return IPFS_stat_Results_Future{Future: ans.Future()}, release

}

func (c IPFS) Pin(ctx context.Context, params func(IPFS_pin_Params) error) (IPFS_pin_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf07e5f02273b1d4b,
			MethodID:      4,
			InterfaceName: "system.capnp:IPFS",
			MethodName:    "pin",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(IPFS_pin_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return IPFS_pin_Results_Future{Future: ans.Future()}, release

}

func (c IPFS) Unpin(ctx context.Context, params func(IPFS_unpin_Params) error) (IPFS_unpin_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf07e5f02273b1d4b,
			MethodID:      5,
			InterfaceName: "system.capnp:IPFS",
			MethodName:    "unpin",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(IPFS_unpin_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return IPFS_unpin_Results_Future{Future: ans.Future()}, release

}

func (c IPFS) Pins(ctx context.Context, params func(IPFS_pins_Params) error) (IPFS_pins_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf07e5f02273b1d4b,
			MethodID:      6,
			InterfaceName: "system.capnp:IPFS",
			MethodName:    "pins",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(IPFS_pins_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return IPFS_pins_Results_Future{Future: ans.Future()}, release

}

func (c IPFS) Id(ctx context.Context, params func(IPFS_id_Params) error) (IPFS_id_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf07e5f02273b1d4b,
			MethodID:      7,
			InterfaceName: "system.capnp:IPFS",
			MethodName:    "id",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(IPFS_id_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return IPFS_id_Results_Future{Future: ans.Future()}, release

}

func (c IPFS) Connect(ctx context.Context, params func(IPFS_connect_Params) error) (IPFS_connect_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf07e5f02273b1d4b,
			MethodID:      8,
			InterfaceName: "system.capnp:IPFS",
			MethodName:    "connect",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(IPFS_connect_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return IPFS_connect_Results_Future{Future: ans.Future()}, release

}

func (c IPFS) Peers(ctx context.Context, params func(IPFS_peers_Params) error) (IPFS_peers_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf07e5f02273b1d4b,
			MethodID:      9,
			InterfaceName: "system.capnp:IPFS",
			MethodName:    "peers",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(IPFS_peers_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return IPFS_peers_Results_Future{Future: ans.Future()}, release

}

func (c IPFS) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c IPFS) String() string {
	return "IPFS(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c IPFS) AddRef() IPFS {
	return IPFS(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c IPFS) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c IPFS) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c IPFS) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (IPFS) DecodeFromPtr(p capnp.Ptr) IPFS {
	return IPFS(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c IPFS) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c IPFS) IsSame(other IPFS) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c IPFS) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c IPFS) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A IPFS_Server is a IPFS with a local implementation.
type IPFS_Server interface {
	Add(context.Context, IPFS_add) error

	Cat(context.Context, IPFS_cat) error

	Ls(context.Context, IPFS_ls) error

	Stat(context.Context, IPFS_stat) error

	Pin(context.Context, IPFS_pin) error

	Unpin(context.Context, IPFS_unpin) error

	Pins(context.Context, IPFS_pins) error

	Id(context.Context, IPFS_id) error

	Connect(context.Context, IPFS_connect) error

	Peers(context.Context, IPFS_peers) error
}

// IPFS_NewServer creates a new Server from an implementation of IPFS_Server.
func IPFS_NewServer(s IPFS_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(IPFS_Methods(nil, s), s, c)
}

// IPFS_ServerToClient creates a new Client from an implementation of IPFS_Server.
// The caller is responsible for calling Release on the returned Client.
func IPFS_ServerToClient(s IPFS_Server) IPFS {
	return IPFS(capnp.NewClient(IPFS_NewServer(s)))
}

// IPFS_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func IPFS_Methods(methods []server.Method, s IPFS_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 10)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf07e5f02273b1d4b,
			MethodID:      0,
			InterfaceName: "system.capnp:IPFS",
			MethodName:    "add",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Add(ctx, IPFS_add{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf07e5f02273b1d4b,
			MethodID:      1,
			InterfaceName: "system.capnp:IPFS",
			MethodName:    "cat",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Cat(ctx, IPFS_cat{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf07e5f02273b1d4b,
			MethodID:      2,
			InterfaceName: "system.capnp:IPFS",
			MethodName:    "ls",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Ls(ctx, IPFS_ls{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf07e5f02273b1d4b,
			MethodID:      3,
			InterfaceName: "system.capnp:IPFS",
			MethodName:    "stat",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Stat(ctx, IPFS_stat{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf07e5f02273b1d4b,
			MethodID:      4,
			InterfaceName: "system.capnp:IPFS",
			MethodName:    "pin",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Pin(ctx, IPFS_pin{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf07e5f02273b1d4b,
			MethodID:      5,
			InterfaceName: "system.capnp:IPFS",
			MethodName:    "unpin",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Unpin(ctx, IPFS_unpin{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf07e5f02273b1d4b,
			MethodID:      6,
			InterfaceName: "system.capnp:IPFS",
			MethodName:    "pins",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Pins(ctx, IPFS_pins{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf07e5f02273b1d4b,
			MethodID:      7,
			InterfaceName: "system.capnp:IPFS",
			MethodName:    "id",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Id(ctx, IPFS_id{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf07e5f02273b1d4b,
			MethodID:      8,
			InterfaceName: "system.capnp:IPFS",
			MethodName:    "connect",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Connect(ctx, IPFS_connect{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf07e5f02273b1d4b,
			MethodID:      9,
			InterfaceName: "system.capnp:IPFS",
			MethodName:    "peers",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Peers(ctx, IPFS_peers{call})
		},
	})

	return methods
}

// IPFS_add holds the state for a server call to IPFS.add.
// See server.Call for documentation.
type IPFS_add struct {
	*server.Call
}

// Args returns the call's arguments.
func (c IPFS_add) Args() IPFS_add_Params {
	return IPFS_add_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c IPFS_add) AllocResults() (IPFS_add_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IPFS_add_Results(r), err
}

// IPFS_cat holds the state for a server call to IPFS.cat.
// See server.Call for documentation.
type IPFS_cat struct {
	*server.Call
}

// Args returns the call's arguments.
func (c IPFS_cat) Args() IPFS_cat_Params {
	return IPFS_cat_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c IPFS_cat) AllocResults() (IPFS_cat_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IPFS_cat_Results(r), err
}

// IPFS_ls holds the state for a server call to IPFS.ls.
// See server.Call for documentation.
type IPFS_ls struct {
	*server.Call
}

// Args returns the call's arguments.
func (c IPFS_ls) Args() IPFS_ls_Params {
	return IPFS_ls_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c IPFS_ls) AllocResults() (IPFS_ls_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IPFS_ls_Results(r), err
}

// IPFS_stat holds the state for a server call to IPFS.stat.
// See server.Call for documentation.
type IPFS_stat struct {
	*server.Call
}

// Args returns the call's arguments.
func (c IPFS_stat) Args() IPFS_stat_Params {
	return IPFS_stat_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c IPFS_stat) AllocResults() (IPFS_stat_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IPFS_stat_Results(r), err
}

// IPFS_pin holds the state for a server call to IPFS.pin.
// See server.Call for documentation.
type IPFS_pin struct {
	*server.Call
}

// Args returns the call's arguments.
func (c IPFS_pin) Args() IPFS_pin_Params {
	return IPFS_pin_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c IPFS_pin) AllocResults() (IPFS_pin_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return IPFS_pin_Results(r), err
}

// IPFS_unpin holds the state for a server call to IPFS.unpin.
// See server.Call for documentation.
type IPFS_unpin struct {
	*server.Call
}

// Args returns the call's arguments.
func (c IPFS_unpin) Args() IPFS_unpin_Params {
	return IPFS_unpin_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c IPFS_unpin) AllocResults() (IPFS_unpin_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return IPFS_unpin_Results(r), err
}

// IPFS_pins holds the state for a server call to IPFS.pins.
// See server.Call for documentation.
type IPFS_pins struct {
	*server.Call
}

// Args returns the call's arguments.
func (c IPFS_pins) Args() IPFS_pins_Params {
	return IPFS_pins_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c IPFS_pins) AllocResults() (IPFS_pins_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IPFS_pins_Results(r), err
}

// IPFS_id holds the state for a server call to IPFS.id.
// See server.Call for documentation.
type IPFS_id struct {
	*server.Call
}

// Args returns the call's arguments.
func (c IPFS_id) Args() IPFS_id_Params {
	return IPFS_id_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c IPFS_id) AllocResults() (IPFS_id_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IPFS_id_Results(r), err
}

// IPFS_connect holds the state for a server call to IPFS.connect.
// See server.Call for documentation.
type IPFS_connect struct {
	*server.Call
}

// Args returns the call's arguments.
func (c IPFS_connect) Args() IPFS_connect_Params {
	return IPFS_connect_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c IPFS_connect) AllocResults() (IPFS_connect_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return IPFS_connect_Results(r), err
}

// IPFS_peers holds the state for a server call to IPFS.peers.
// See server.Call for documentation.
type IPFS_peers struct {
	*server.Call
}

// Args returns the call's arguments.
func (c IPFS_peers) Args() IPFS_peers_Params {
	return IPFS_peers_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c IPFS_peers) AllocResults() (IPFS_peers_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IPFS_peers_Results(r), err
}

// IPFS_List is a list of IPFS.
type IPFS_List = capnp.CapList[IPFS]

// NewIPFS creates a new list of IPFS.
func NewIPFS_List(s *capnp.Segment, sz int32) (IPFS_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[IPFS](l), err
}

type IPFS_add_Params capnp.Struct

// IPFS_add_Params_TypeID is the unique identifier for the type IPFS_add_Params.
const IPFS_add_Params_TypeID = 0xd44a8470fbc0385e

func NewIPFS_add_Params(s *capnp.Segment) (IPFS_add_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IPFS_add_Params(st), err
}

func NewRootIPFS_add_Params(s *capnp.Segment) (IPFS_add_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IPFS_add_Params(st), err
}

func ReadRootIPFS_add_Params(msg *capnp.Message) (IPFS_add_Params, error) {
	root, err := msg.Root()
	return IPFS_add_Params(root.Struct()), err
}

func (s IPFS_add_Params) String() string {
	str, _ := text.Marshal(0xd44a8470fbc0385e, capnp.Struct(s))
	return str
}

func (s IPFS_add_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (IPFS_add_Params) DecodeFromPtr(p capnp.Ptr) IPFS_add_Params {
	return IPFS_add_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s IPFS_add_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s IPFS_add_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s IPFS_add_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s IPFS_add_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s IPFS_add_Params) Data() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s IPFS_add_Params) HasData() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s IPFS_add_Params) SetData(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// IPFS_add_Params_List is a list of IPFS_add_Params.
type IPFS_add_Params_List = capnp.StructList[IPFS_add_Params]

// NewIPFS_add_Params creates a new list of IPFS_add_Params.
func NewIPFS_add_Params_List(s *capnp.Segment, sz int32) (IPFS_add_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[IPFS_add_Params](l), err
}

// IPFS_add_Params_Future is a wrapper for a IPFS_add_Params promised by a client call.
type IPFS_add_Params_Future struct{ *capnp.Future }

func (f IPFS_add_Params_Future) Struct() (IPFS_add_Params, error) {
	p, err := f.Future.Ptr()
	return IPFS_add_Params(p.Struct()), err
}

type IPFS_add_Results capnp.Struct

// IPFS_add_Results_TypeID is the unique identifier for the type IPFS_add_Results.
const IPFS_add_Results_TypeID = 0xd6c02c9d5a3500b3

func NewIPFS_add_Results(s *capnp.Segment) (IPFS_add_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IPFS_add_Results(st), err
}

func NewRootIPFS_add_Results(s *capnp.Segment) (IPFS_add_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IPFS_add_Results(st), err
}

func ReadRootIPFS_add_Results(msg *capnp.Message) (IPFS_add_Results, error) {
	root, err := msg.Root()
	return IPFS_add_Results(root.Struct()), err
}

func (s IPFS_add_Results) String() string {
	str, _ := text.Marshal(0xd6c02c9d5a3500b3, capnp.Struct(s))
	return str
}

func (s IPFS_add_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (IPFS_add_Results) DecodeFromPtr(p capnp.Ptr) IPFS_add_Results {
	return IPFS_add_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s IPFS_add_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s IPFS_add_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s IPFS_add_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s IPFS_add_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s IPFS_add_Results) Cid() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s IPFS_add_Results) HasCid() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s IPFS_add_Results) CidBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s IPFS_add_Results) SetCid(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// IPFS_add_Results_List is a list of IPFS_add_Results.
type IPFS_add_Results_List = capnp.StructList[IPFS_add_Results]

// NewIPFS_add_Results creates a new list of IPFS_add_Results.
func NewIPFS_add_Results_List(s *capnp.Segment, sz int32) (IPFS_add_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[IPFS_add_Results](l), err
}

// IPFS_add_Results_Future is a wrapper for a IPFS_add_Results promised by a client call.
type IPFS_add_Results_Future struct{ *capnp.Future }

func (f IPFS_add_Results_Future) Struct() (IPFS_add_Results, error) {
	p, err := f.Future.Ptr()
	return IPFS_add_Results(p.Struct()), err
}

type IPFS_cat_Params capnp.Struct

// IPFS_cat_Params_TypeID is the unique identifier for the type IPFS_cat_Params.
const IPFS_cat_Params_TypeID = 0xadaaae7523bdc7e4

func NewIPFS_cat_Params(s *capnp.Segment) (IPFS_cat_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IPFS_cat_Params(st), err
}

func NewRootIPFS_cat_Params(s *capnp.Segment) (IPFS_cat_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IPFS_cat_Params(st), err
}

func ReadRootIPFS_cat_Params(msg *capnp.Message) (IPFS_cat_Params, error) {
	root, err := msg.Root()
	return IPFS_cat_Params(root.Struct()), err
}

func (s IPFS_cat_Params) String() string {
	str, _ := text.Marshal(0xadaaae7523bdc7e4, capnp.Struct(s))
	return str
}

func (s IPFS_cat_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (IPFS_cat_Params) DecodeFromPtr(p capnp.Ptr) IPFS_cat_Params {
	return IPFS_cat_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s IPFS_cat_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s IPFS_cat_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s IPFS_cat_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s IPFS_cat_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s IPFS_cat_Params) Cid() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s IPFS_cat_Params) HasCid() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s IPFS_cat_Params) CidBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s IPFS_cat_Params) SetCid(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// IPFS_cat_Params_List is a list of IPFS_cat_Params.
type IPFS_cat_Params_List = capnp.StructList[IPFS_cat_Params]

// NewIPFS_cat_Params creates a new list of IPFS_cat_Params.
func NewIPFS_cat_Params_List(s *capnp.Segment, sz int32) (IPFS_cat_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[IPFS_cat_Params](l), err
}

// IPFS_cat_Params_Future is a wrapper for a IPFS_cat_Params promised by a client call.
type IPFS_cat_Params_Future struct{ *capnp.Future }

func (f IPFS_cat_Params_Future) Struct() (IPFS_cat_Params, error) {
	p, err := f.Future.Ptr()
	return IPFS_cat_Params(p.Struct()), err
}

type IPFS_cat_Results capnp.Struct

// IPFS_cat_Results_TypeID is the unique identifier for the type IPFS_cat_Results.
const IPFS_cat_Results_TypeID = 0xcb3a96057ca67436

func NewIPFS_cat_Results(s *capnp.Segment) (IPFS_cat_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IPFS_cat_Results(st), err
}

func NewRootIPFS_cat_Results(s *capnp.Segment) (IPFS_cat_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IPFS_cat_Results(st), err
}

func ReadRootIPFS_cat_Results(msg *capnp.Message) (IPFS_cat_Results, error) {
	root, err := msg.Root()
	return IPFS_cat_Results(root.Struct()), err
}

func (s IPFS_cat_Results) String() string {
	str, _ := text.Marshal(0xcb3a96057ca67436, capnp.Struct(s))
	return str
}

func (s IPFS_cat_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (IPFS_cat_Results) DecodeFromPtr(p capnp.Ptr) IPFS_cat_Results {
	return IPFS_cat_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s IPFS_cat_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s IPFS_cat_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s IPFS_cat_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s IPFS_cat_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s IPFS_cat_Results) Data() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s IPFS_cat_Results) HasData() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s IPFS_cat_Results) SetData(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// IPFS_cat_Results_List is a list of IPFS_cat_Results.
type IPFS_cat_Results_List = capnp.StructList[IPFS_cat_Results]

// NewIPFS_cat_Results creates a new list of IPFS_cat_Results.
func NewIPFS_cat_Results_List(s *capnp.Segment, sz int32) (IPFS_cat_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[IPFS_cat_Results](l), err
}

// IPFS_cat_Results_Future is a wrapper for a IPFS_cat_Results promised by a client call.
type IPFS_cat_Results_Future struct{ *capnp.Future }

func (f IPFS_cat_Results_Future) Struct() (IPFS_cat_Results, error) {
	p, err := f.Future.Ptr()
	return IPFS_cat_Results(p.Struct()), err
}

type IPFS_ls_Params capnp.Struct

// IPFS_ls_Params_TypeID is the unique identifier for the type IPFS_ls_Params.
const IPFS_ls_Params_TypeID = 0xaadf1b3f02f6ff23

func NewIPFS_ls_Params(s *capnp.Segment) (IPFS_ls_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IPFS_ls_Params(st), err
}

func NewRootIPFS_ls_Params(s *capnp.Segment) (IPFS_ls_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IPFS_ls_Params(st), err
}

func ReadRootIPFS_ls_Params(msg *capnp.Message) (IPFS_ls_Params, error) {
	root, err := msg.Root()
	return IPFS_ls_Params(root.Struct()), err
}

func (s IPFS_ls_Params) String() string {
	str, _ := text.Marshal(0xaadf1b3f02f6ff23, capnp.Struct(s))
	return str
}

func (s IPFS_ls_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (IPFS_ls_Params) DecodeFromPtr(p capnp.Ptr) IPFS_ls_Params {
	return IPFS_ls_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s IPFS_ls_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s IPFS_ls_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s IPFS_ls_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s IPFS_ls_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s IPFS_ls_Params) Path() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s IPFS_ls_Params) HasPath() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s IPFS_ls_Params) PathBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s IPFS_ls_Params) SetPath(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// IPFS_ls_Params_List is a list of IPFS_ls_Params.
type IPFS_ls_Params_List = capnp.StructList[IPFS_ls_Params]

// NewIPFS_ls_Params creates a new list of IPFS_ls_Params.
func NewIPFS_ls_Params_List(s *capnp.Segment, sz int32) (IPFS_ls_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[IPFS_ls_Params](l), err
}

// IPFS_ls_Params_Future is a wrapper for a IPFS_ls_Params promised by a client call.
type IPFS_ls_Params_Future struct{ *capnp.Future }

func (f IPFS_ls_Params_Future) Struct() (IPFS_ls_Params, error) {
	p, err := f.Future.Ptr()
	return IPFS_ls_Params(p.Struct()), err
}

type IPFS_ls_Results capnp.Struct

// IPFS_ls_Results_TypeID is the unique identifier for the type IPFS_ls_Results.
const IPFS_ls_Results_TypeID = 0xc65336464e949b9c

func NewIPFS_ls_Results(s *capnp.Segment) (IPFS_ls_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IPFS_ls_Results(st), err
}

func NewRootIPFS_ls_Results(s *capnp.Segment) (IPFS_ls_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IPFS_ls_Results(st), err
}

func ReadRootIPFS_ls_Results(msg *capnp.Message) (IPFS_ls_Results, error) {
	root, err := msg.Root()
	return IPFS_ls_Results(root.Struct()), err
}

func (s IPFS_ls_Results) String() string {
	str, _ := text.Marshal(0xc65336464e949b9c, capnp.Struct(s))
	return str
}

func (s IPFS_ls_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (IPFS_ls_Results) DecodeFromPtr(p capnp.Ptr) IPFS_ls_Results {
	return IPFS_ls_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s IPFS_ls_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s IPFS_ls_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s IPFS_ls_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s IPFS_ls_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s IPFS_ls_Results) Entries() (Entry_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Entry_List(p.List()), err
}

func (s IPFS_ls_Results) HasEntries() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s IPFS_ls_Results) SetEntries(v Entry_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewEntries sets the entries field to a newly
// allocated Entry_List, preferring placement in s's segment.
func (s IPFS_ls_Results) NewEntries(n int32) (Entry_List, error) {
	l, err := NewEntry_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Entry_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// IPFS_ls_Results_List is a list of IPFS_ls_Results.
type IPFS_ls_Results_List = capnp.StructList[IPFS_ls_Results]

// NewIPFS_ls_Results creates a new list of IPFS_ls_Results.
func NewIPFS_ls_Results_List(s *capnp.Segment, sz int32) (IPFS_ls_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[IPFS_ls_Results](l), err
}

// IPFS_ls_Results_Future is a wrapper for a IPFS_ls_Results promised by a client call.
type IPFS_ls_Results_Future struct{ *capnp.Future }

func (f IPFS_ls_Results_Future) Struct() (IPFS_ls_Results, error) {
	p, err := f.Future.Ptr()
	return IPFS_ls_Results(p.Struct()), err
}

type IPFS_stat_Params capnp.Struct

// IPFS_stat_Params_TypeID is the unique identifier for the type IPFS_stat_Params.
const IPFS_stat_Params_TypeID = 0x8284348c17041a84

func NewIPFS_stat_Params(s *capnp.Segment) (IPFS_stat_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IPFS_stat_Params(st), err
}

func NewRootIPFS_stat_Params(s *capnp.Segment) (IPFS_stat_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IPFS_stat_Params(st), err
}

func ReadRootIPFS_stat_Params(msg *capnp.Message) (IPFS_stat_Params, error) {
	root, err := msg.Root()
	return IPFS_stat_Params(root.Struct()), err
}

func (s IPFS_stat_Params) String() string {
	str, _ := text.Marshal(0x8284348c17041a84, capnp.Struct(s))
	return str
}

func (s IPFS_stat_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (IPFS_stat_Params) DecodeFromPtr(p capnp.Ptr) IPFS_stat_Params {
	return IPFS_stat_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s IPFS_stat_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s IPFS_stat_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s IPFS_stat_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s IPFS_stat_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s IPFS_stat_Params) Cid() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s IPFS_stat_Params) HasCid() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s IPFS_stat_Params) CidBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s IPFS_stat_Params) SetCid(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// IPFS_stat_Params_List is a list of IPFS_stat_Params.
type IPFS_stat_Params_List = capnp.StructList[IPFS_stat_Params]

// NewIPFS_stat_Params creates a new list of IPFS_stat_Params.
func NewIPFS_stat_Params_List(s *capnp.Segment, sz int32) (IPFS_stat_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[IPFS_stat_Params](l), err
}

// IPFS_stat_Params_Future is a wrapper for a IPFS_stat_Params promised by a client call.
type IPFS_stat_Params_Future struct{ *capnp.Future }

func (f IPFS_stat_Params_Future) Struct() (IPFS_stat_Params, error) {
	p, err := f.Future.Ptr()
	return IPFS_stat_Params(p.Struct()), err
}

type IPFS_stat_Results capnp.Struct

// IPFS_stat_Results_TypeID is the unique identifier for the type IPFS_stat_Results.
const IPFS_stat_Results_TypeID = 0x90338670b754f0d0

func NewIPFS_stat_Results(s *capnp.Segment) (IPFS_stat_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IPFS_stat_Results(st), err
}

func NewRootIPFS_stat_Results(s *capnp.Segment) (IPFS_stat_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IPFS_stat_Results(st), err
}

func ReadRootIPFS_stat_Results(msg *capnp.Message) (IPFS_stat_Results, error) {
	root, err := msg.Root()
	return IPFS_stat_Results(root.Struct()), err
}

func (s IPFS_stat_Results) String() string {
	str, _ := text.Marshal(0x90338670b754f0d0, capnp.Struct(s))
	return str
}

func (s IPFS_stat_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (IPFS_stat_Results) DecodeFromPtr(p capnp.Ptr) IPFS_stat_Results {
	return IPFS_stat_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s IPFS_stat_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s IPFS_stat_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s IPFS_stat_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s IPFS_stat_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s IPFS_stat_Results) Info() (NodeInfo, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return NodeInfo(p.Struct()), err
}

func (s IPFS_stat_Results) HasInfo() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s IPFS_stat_Results) SetInfo(v NodeInfo) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewInfo sets the info field to a newly
// allocated NodeInfo struct, preferring placement in s's segment.
func (s IPFS_stat_Results) NewInfo() (NodeInfo, error) {
	ss, err := NewNodeInfo(capnp.Struct(s).Segment())
	if err != nil {
		return NodeInfo{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// IPFS_stat_Results_List is a list of IPFS_stat_Results.
type IPFS_stat_Results_List = capnp.StructList[IPFS_stat_Results]

// NewIPFS_stat_Results creates a new list of IPFS_stat_Results.
func NewIPFS_stat_Results_List(s *capnp.Segment, sz int32) (IPFS_stat_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[IPFS_stat_Results](l), err
}

// IPFS_stat_Results_Future is a wrapper for a IPFS_stat_Results promised by a client call.
type IPFS_stat_Results_Future struct{ *capnp.Future }

func (f IPFS_stat_Results_Future) Struct() (IPFS_stat_Results, error) {
	p, err := f.Future.Ptr()
	return IPFS_stat_Results(p.Struct()), err
}
func (p IPFS_stat_Results_Future) Info() NodeInfo_Future {
	return NodeInfo_Future{Future: p.Future.Field(0, nil)}
}

type IPFS_pin_Params capnp.Struct

// IPFS_pin_Params_TypeID is the unique identifier for the type IPFS_pin_Params.
const IPFS_pin_Params_TypeID = 0xba93d5e4aea44e63

func NewIPFS_pin_Params(s *capnp.Segment) (IPFS_pin_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IPFS_pin_Params(st), err
}

func NewRootIPFS_pin_Params(s *capnp.Segment) (IPFS_pin_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IPFS_pin_Params(st), err
}

func ReadRootIPFS_pin_Params(msg *capnp.Message) (IPFS_pin_Params, error) {
	root, err := msg.Root()
	return IPFS_pin_Params(root.Struct()), err
}

func (s IPFS_pin_Params) String() string {
	str, _ := text.Marshal(0xba93d5e4aea44e63, capnp.Struct(s))
	return str
}

func (s IPFS_pin_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (IPFS_pin_Params) DecodeFromPtr(p capnp.Ptr) IPFS_pin_Params {
	return IPFS_pin_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s IPFS_pin_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s IPFS_pin_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s IPFS_pin_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s IPFS_pin_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s IPFS_pin_Params) Cid() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s IPFS_pin_Params) HasCid() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s IPFS_pin_Params) CidBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s IPFS_pin_Params) SetCid(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// IPFS_pin_Params_List is a list of IPFS_pin_Params.
type IPFS_pin_Params_List = capnp.StructList[IPFS_pin_Params]

// NewIPFS_pin_Params creates a new list of IPFS_pin_Params.
func NewIPFS_pin_Params_List(s *capnp.Segment, sz int32) (IPFS_pin_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[IPFS_pin_Params](l), err
}

// IPFS_pin_Params_Future is a wrapper for a IPFS_pin_Params promised by a client call.
type IPFS_pin_Params_Future struct{ *capnp.Future }

func (f IPFS_pin_Params_Future) Struct() (IPFS_pin_Params, error) {
	p, err := f.Future.Ptr()
	return IPFS_pin_Params(p.Struct()), err
}

type IPFS_pin_Results capnp.Struct

// IPFS_pin_Results_TypeID is the unique identifier for the type IPFS_pin_Results.
const IPFS_pin_Results_TypeID = 0xf81b3789a4d0575d

func NewIPFS_pin_Results(s *capnp.Segment) (IPFS_pin_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return IPFS_pin_Results(st), err
}

func NewRootIPFS_pin_Results(s *capnp.Segment) (IPFS_pin_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return IPFS_pin_Results(st), err
}

func ReadRootIPFS_pin_Results(msg *capnp.Message) (IPFS_pin_Results, error) {
	root, err := msg.Root()
	return IPFS_pin_Results(root.Struct()), err
}

func (s IPFS_pin_Results) String() string {
	str, _ := text.Marshal(0xf81b3789a4d0575d, capnp.Struct(s))
	return str
}

func (s IPFS_pin_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (IPFS_pin_Results) DecodeFromPtr(p capnp.Ptr) IPFS_pin_Results {
	return IPFS_pin_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s IPFS_pin_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s IPFS_pin_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s IPFS_pin_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s IPFS_pin_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s IPFS_pin_Results) Success() bool {
	return capnp.Struct(s).Bit(0)
}

func (s IPFS_pin_Results) SetSuccess(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// IPFS_pin_Results_List is a list of IPFS_pin_Results.
type IPFS_pin_Results_List = capnp.StructList[IPFS_pin_Results]

// NewIPFS_pin_Results creates a new list of IPFS_pin_Results.
func NewIPFS_pin_Results_List(s *capnp.Segment, sz int32) (IPFS_pin_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[IPFS_pin_Results](l), err
}

// IPFS_pin_Results_Future is a wrapper for a IPFS_pin_Results promised by a client call.
type IPFS_pin_Results_Future struct{ *capnp.Future }

func (f IPFS_pin_Results_Future) Struct() (IPFS_pin_Results, error) {
	p, err := f.Future.Ptr()
	return IPFS_pin_Results(p.Struct()), err
}

type IPFS_unpin_Params capnp.Struct

// IPFS_unpin_Params_TypeID is the unique identifier for the type IPFS_unpin_Params.
const IPFS_unpin_Params_TypeID = 0x8c76ad0fbaea12d7

func NewIPFS_unpin_Params(s *capnp.Segment) (IPFS_unpin_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IPFS_unpin_Params(st), err
}

func NewRootIPFS_unpin_Params(s *capnp.Segment) (IPFS_unpin_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IPFS_unpin_Params(st), err
}

func ReadRootIPFS_unpin_Params(msg *capnp.Message) (IPFS_unpin_Params, error) {
	root, err := msg.Root()
	return IPFS_unpin_Params(root.Struct()), err
}

func (s IPFS_unpin_Params) String() string {
	str, _ := text.Marshal(0x8c76ad0fbaea12d7, capnp.Struct(s))
	return str
}

func (s IPFS_unpin_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (IPFS_unpin_Params) DecodeFromPtr(p capnp.Ptr) IPFS_unpin_Params {
	return IPFS_unpin_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s IPFS_unpin_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s IPFS_unpin_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s IPFS_unpin_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s IPFS_unpin_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s IPFS_unpin_Params) Cid() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s IPFS_unpin_Params) HasCid() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s IPFS_unpin_Params) CidBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s IPFS_unpin_Params) SetCid(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// IPFS_unpin_Params_List is a list of IPFS_unpin_Params.
type IPFS_unpin_Params_List = capnp.StructList[IPFS_unpin_Params]

// NewIPFS_unpin_Params creates a new list of IPFS_unpin_Params.
func NewIPFS_unpin_Params_List(s *capnp.Segment, sz int32) (IPFS_unpin_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[IPFS_unpin_Params](l), err
}

// IPFS_unpin_Params_Future is a wrapper for a IPFS_unpin_Params promised by a client call.
type IPFS_unpin_Params_Future struct{ *capnp.Future }

func (f IPFS_unpin_Params_Future) Struct() (IPFS_unpin_Params, error) {
	p, err := f.Future.Ptr()
	return IPFS_unpin_Params(p.Struct()), err
}

type IPFS_unpin_Results capnp.Struct

// IPFS_unpin_Results_TypeID is the unique identifier for the type IPFS_unpin_Results.
const IPFS_unpin_Results_TypeID = 0xa72dee615d5bbb87

func NewIPFS_unpin_Results(s *capnp.Segment) (IPFS_unpin_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return IPFS_unpin_Results(st), err
}

func NewRootIPFS_unpin_Results(s *capnp.Segment) (IPFS_unpin_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return IPFS_unpin_Results(st), err
}

func ReadRootIPFS_unpin_Results(msg *capnp.Message) (IPFS_unpin_Results, error) {
	root, err := msg.Root()
	return IPFS_unpin_Results(root.Struct()), err
}

func (s IPFS_unpin_Results) String() string {
	str, _ := text.Marshal(0xa72dee615d5bbb87, capnp.Struct(s))
	return str
}

func (s IPFS_unpin_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (IPFS_unpin_Results) DecodeFromPtr(p capnp.Ptr) IPFS_unpin_Results {
	return IPFS_unpin_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s IPFS_unpin_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s IPFS_unpin_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s IPFS_unpin_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s IPFS_unpin_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s IPFS_unpin_Results) Success() bool {
	return capnp.Struct(s).Bit(0)
}

func (s IPFS_unpin_Results) SetSuccess(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// IPFS_unpin_Results_List is a list of IPFS_unpin_Results.
type IPFS_unpin_Results_List = capnp.StructList[IPFS_unpin_Results]

// NewIPFS_unpin_Results creates a new list of IPFS_unpin_Results.
func NewIPFS_unpin_Results_List(s *capnp.Segment, sz int32) (IPFS_unpin_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[IPFS_unpin_Results](l), err
}

// IPFS_unpin_Results_Future is a wrapper for a IPFS_unpin_Results promised by a client call.
type IPFS_unpin_Results_Future struct{ *capnp.Future }

func (f IPFS_unpin_Results_Future) Struct() (IPFS_unpin_Results, error) {
	p, err := f.Future.Ptr()
	return IPFS_unpin_Results(p.Struct()), err
}

type IPFS_pins_Params capnp.Struct

// IPFS_pins_Params_TypeID is the unique identifier for the type IPFS_pins_Params.
const IPFS_pins_Params_TypeID = 0xe798bea7bc0cc0ea

func NewIPFS_pins_Params(s *capnp.Segment) (IPFS_pins_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return IPFS_pins_Params(st), err
}

func NewRootIPFS_pins_Params(s *capnp.Segment) (IPFS_pins_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return IPFS_pins_Params(st), err
}

func ReadRootIPFS_pins_Params(msg *capnp.Message) (IPFS_pins_Params, error) {
	root, err := msg.Root()
	return IPFS_pins_Params(root.Struct()), err
}

func (s IPFS_pins_Params) String() string {
	str, _ := text.Marshal(0xe798bea7bc0cc0ea, capnp.Struct(s))
	return str
}

func (s IPFS_pins_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (IPFS_pins_Params) DecodeFromPtr(p capnp.Ptr) IPFS_pins_Params {
	return IPFS_pins_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s IPFS_pins_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s IPFS_pins_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s IPFS_pins_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s IPFS_pins_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// IPFS_pins_Params_List is a list of IPFS_pins_Params.
type IPFS_pins_Params_List = capnp.StructList[IPFS_pins_Params]

// NewIPFS_pins_Params creates a new list of IPFS_pins_Params.
func NewIPFS_pins_Params_List(s *capnp.Segment, sz int32) (IPFS_pins_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[IPFS_pins_Params](l), err
}

// IPFS_pins_Params_Future is a wrapper for a IPFS_pins_Params promised by a client call.
type IPFS_pins_Params_Future struct{ *capnp.Future }

func (f IPFS_pins_Params_Future) Struct() (IPFS_pins_Params, error) {
	p, err := f.Future.Ptr()
	return IPFS_pins_Params(p.Struct()), err
}

type IPFS_pins_Results capnp.Struct

// IPFS_pins_Results_TypeID is the unique identifier for the type IPFS_pins_Results.
const IPFS_pins_Results_TypeID = 0xe0f22a608a7c6e22

func NewIPFS_pins_Results(s *capnp.Segment) (IPFS_pins_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IPFS_pins_Results(st), err
}

func NewRootIPFS_pins_Results(s *capnp.Segment) (IPFS_pins_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IPFS_pins_Results(st), err
}

func ReadRootIPFS_pins_Results(msg *capnp.Message) (IPFS_pins_Results, error) {
	root, err := msg.Root()
	return IPFS_pins_Results(root.Struct()), err
}

func (s IPFS_pins_Results) String() string {
	str, _ := text.Marshal(0xe0f22a608a7c6e22, capnp.Struct(s))
	return str
}

func (s IPFS_pins_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (IPFS_pins_Results) DecodeFromPtr(p capnp.Ptr) IPFS_pins_Results {
	return IPFS_pins_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s IPFS_pins_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s IPFS_pins_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s IPFS_pins_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s IPFS_pins_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s IPFS_pins_Results) Cids() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.TextList(p.List()), err
}

func (s IPFS_pins_Results) HasCids() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s IPFS_pins_Results) SetCids(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewCids sets the cids field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s IPFS_pins_Results) NewCids(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// IPFS_pins_Results_List is a list of IPFS_pins_Results.
type IPFS_pins_Results_List = capnp.StructList[IPFS_pins_Results]

// NewIPFS_pins_Results creates a new list of IPFS_pins_Results.
func NewIPFS_pins_Results_List(s *capnp.Segment, sz int32) (IPFS_pins_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[IPFS_pins_Results](l), err
}

// IPFS_pins_Results_Future is a wrapper for a IPFS_pins_Results promised by a client call.
type IPFS_pins_Results_Future struct{ *capnp.Future }

func (f IPFS_pins_Results_Future) Struct() (IPFS_pins_Results, error) {
	p, err := f.Future.Ptr()
	return IPFS_pins_Results(p.Struct()), err
}

type IPFS_id_Params capnp.Struct

// IPFS_id_Params_TypeID is the unique identifier for the type IPFS_id_Params.
const IPFS_id_Params_TypeID = 0xb7e699451c43a067

func NewIPFS_id_Params(s *capnp.Segment) (IPFS_id_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return IPFS_id_Params(st), err
}

func NewRootIPFS_id_Params(s *capnp.Segment) (IPFS_id_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return IPFS_id_Params(st), err
}

func ReadRootIPFS_id_Params(msg *capnp.Message) (IPFS_id_Params, error) {
	root, err := msg.Root()
	return IPFS_id_Params(root.Struct()), err
}

func (s IPFS_id_Params) String() string {
	str, _ := text.Marshal(0xb7e699451c43a067, capnp.Struct(s))
	return str
}

func (s IPFS_id_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (IPFS_id_Params) DecodeFromPtr(p capnp.Ptr) IPFS_id_Params {
	return IPFS_id_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s IPFS_id_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s IPFS_id_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s IPFS_id_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s IPFS_id_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// IPFS_id_Params_List is a list of IPFS_id_Params.
type IPFS_id_Params_List = capnp.StructList[IPFS_id_Params]

// NewIPFS_id_Params creates a new list of IPFS_id_Params.
func NewIPFS_id_Params_List(s *capnp.Segment, sz int32) (IPFS_id_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[IPFS_id_Params](l), err
}

// IPFS_id_Params_Future is a wrapper for a IPFS_id_Params promised by a client call.
type IPFS_id_Params_Future struct{ *capnp.Future }

func (f IPFS_id_Params_Future) Struct() (IPFS_id_Params, error) {
	p, err := f.Future.Ptr()
	return IPFS_id_Params(p.Struct()), err
}

type IPFS_id_Results capnp.Struct

// IPFS_id_Results_TypeID is the unique identifier for the type IPFS_id_Results.
const IPFS_id_Results_TypeID = 0xf469f437c0bfc104

func NewIPFS_id_Results(s *capnp.Segment) (IPFS_id_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IPFS_id_Results(st), err
}

func NewRootIPFS_id_Results(s *capnp.Segment) (IPFS_id_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IPFS_id_Results(st), err
}

func ReadRootIPFS_id_Results(msg *capnp.Message) (IPFS_id_Results, error) {
	root, err := msg.Root()
	return IPFS_id_Results(root.Struct()), err
}

func (s IPFS_id_Results) String() string {
	str, _ := text.Marshal(0xf469f437c0bfc104, capnp.Struct(s))
	return str
}

func (s IPFS_id_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (IPFS_id_Results) DecodeFromPtr(p capnp.Ptr) IPFS_id_Results {
	return IPFS_id_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s IPFS_id_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s IPFS_id_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s IPFS_id_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s IPFS_id_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s IPFS_id_Results) PeerInfo() (PeerInfo, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return PeerInfo(p.Struct()), err
}

func (s IPFS_id_Results) HasPeerInfo() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s IPFS_id_Results) SetPeerInfo(v PeerInfo) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewPeerInfo sets the peerInfo field to a newly
// allocated PeerInfo struct, preferring placement in s's segment.
func (s IPFS_id_Results) NewPeerInfo() (PeerInfo, error) {
	ss, err := NewPeerInfo(capnp.Struct(s).Segment())
	if err != nil {
		return PeerInfo{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// IPFS_id_Results_List is a list of IPFS_id_Results.
type IPFS_id_Results_List = capnp.StructList[IPFS_id_Results]

// NewIPFS_id_Results creates a new list of IPFS_id_Results.
func NewIPFS_id_Results_List(s *capnp.Segment, sz int32) (IPFS_id_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[IPFS_id_Results](l), err
}

// IPFS_id_Results_Future is a wrapper for a IPFS_id_Results promised by a client call.
type IPFS_id_Results_Future struct{ *capnp.Future }

func (f IPFS_id_Results_Future) Struct() (IPFS_id_Results, error) {
	p, err := f.Future.Ptr()
	return IPFS_id_Results(p.Struct()), err
}
func (p IPFS_id_Results_Future) PeerInfo() PeerInfo_Future {
	return PeerInfo_Future{Future: p.Future.Field(0, nil)}
}

type IPFS_connect_Params capnp.Struct

// IPFS_connect_Params_TypeID is the unique identifier for the type IPFS_connect_Params.
const IPFS_connect_Params_TypeID = 0xadae6334690b6b6f

func NewIPFS_connect_Params(s *capnp.Segment) (IPFS_connect_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IPFS_connect_Params(st), err
}

func NewRootIPFS_connect_Params(s *capnp.Segment) (IPFS_connect_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IPFS_connect_Params(st), err
}

func ReadRootIPFS_connect_Params(msg *capnp.Message) (IPFS_connect_Params, error) {
	root, err := msg.Root()
	return IPFS_connect_Params(root.Struct()), err
}

func (s IPFS_connect_Params) String() string {
	str, _ := text.Marshal(0xadae6334690b6b6f, capnp.Struct(s))
	return str
}

func (s IPFS_connect_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (IPFS_connect_Params) DecodeFromPtr(p capnp.Ptr) IPFS_connect_Params {
	return IPFS_connect_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s IPFS_connect_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s IPFS_connect_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s IPFS_connect_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s IPFS_connect_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s IPFS_connect_Params) Addr() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s IPFS_connect_Params) HasAddr() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s IPFS_connect_Params) AddrBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s IPFS_connect_Params) SetAddr(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// IPFS_connect_Params_List is a list of IPFS_connect_Params.
type IPFS_connect_Params_List = capnp.StructList[IPFS_connect_Params]

// NewIPFS_connect_Params creates a new list of IPFS_connect_Params.
func NewIPFS_connect_Params_List(s *capnp.Segment, sz int32) (IPFS_connect_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[IPFS_connect_Params](l), err
}

// IPFS_connect_Params_Future is a wrapper for a IPFS_connect_Params promised by a client call.
type IPFS_connect_Params_Future struct{ *capnp.Future }

func (f IPFS_connect_Params_Future) Struct() (IPFS_connect_Params, error) {
	p, err := f.Future.Ptr()
	return IPFS_connect_Params(p.Struct()), err
}

type IPFS_connect_Results capnp.Struct

// IPFS_connect_Results_TypeID is the unique identifier for the type IPFS_connect_Results.
const IPFS_connect_Results_TypeID = 0xc5fe3a2c8650ed19

func NewIPFS_connect_Results(s *capnp.Segment) (IPFS_connect_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return IPFS_connect_Results(st), err
}

func NewRootIPFS_connect_Results(s *capnp.Segment) (IPFS_connect_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return IPFS_connect_Results(st), err
}

func ReadRootIPFS_connect_Results(msg *capnp.Message) (IPFS_connect_Results, error) {
	root, err := msg.Root()
	return IPFS_connect_Results(root.Struct()), err
}

func (s IPFS_connect_Results) String() string {
	str, _ := text.Marshal(0xc5fe3a2c8650ed19, capnp.Struct(s))
	return str
}

func (s IPFS_connect_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (IPFS_connect_Results) DecodeFromPtr(p capnp.Ptr) IPFS_connect_Results {
	return IPFS_connect_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s IPFS_connect_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s IPFS_connect_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s IPFS_connect_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s IPFS_connect_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s IPFS_connect_Results) Success() bool {
	return capnp.Struct(s).Bit(0)
}

func (s IPFS_connect_Results) SetSuccess(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// IPFS_connect_Results_List is a list of IPFS_connect_Results.
type IPFS_connect_Results_List = capnp.StructList[IPFS_connect_Results]

// NewIPFS_connect_Results creates a new list of IPFS_connect_Results.
func NewIPFS_connect_Results_List(s *capnp.Segment, sz int32) (IPFS_connect_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[IPFS_connect_Results](l), err
}

// IPFS_connect_Results_Future is a wrapper for a IPFS_connect_Results promised by a client call.
type IPFS_connect_Results_Future struct{ *capnp.Future }

func (f IPFS_connect_Results_Future) Struct() (IPFS_connect_Results, error) {
	p, err := f.Future.Ptr()
	return IPFS_connect_Results(p.Struct()), err
}

type IPFS_peers_Params capnp.Struct

// IPFS_peers_Params_TypeID is the unique identifier for the type IPFS_peers_Params.
const IPFS_peers_Params_TypeID = 0xdbc8c8183207fc9c

func NewIPFS_peers_Params(s *capnp.Segment) (IPFS_peers_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return IPFS_peers_Params(st), err
}

func NewRootIPFS_peers_Params(s *capnp.Segment) (IPFS_peers_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return IPFS_peers_Params(st), err
}

func ReadRootIPFS_peers_Params(msg *capnp.Message) (IPFS_peers_Params, error) {
	root, err := msg.Root()
	return IPFS_peers_Params(root.Struct()), err
}

func (s IPFS_peers_Params) String() string {
	str, _ := text.Marshal(0xdbc8c8183207fc9c, capnp.Struct(s))
	return str
}

func (s IPFS_peers_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (IPFS_peers_Params) DecodeFromPtr(p capnp.Ptr) IPFS_peers_Params {
	return IPFS_peers_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s IPFS_peers_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s IPFS_peers_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s IPFS_peers_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s IPFS_peers_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// IPFS_peers_Params_List is a list of IPFS_peers_Params.
type IPFS_peers_Params_List = capnp.StructList[IPFS_peers_Params]

// NewIPFS_peers_Params creates a new list of IPFS_peers_Params.
func NewIPFS_peers_Params_List(s *capnp.Segment, sz int32) (IPFS_peers_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[IPFS_peers_Params](l), err
}

// IPFS_peers_Params_Future is a wrapper for a IPFS_peers_Params promised by a client call.
type IPFS_peers_Params_Future struct{ *capnp.Future }

func (f IPFS_peers_Params_Future) Struct() (IPFS_peers_Params, error) {
	p, err := f.Future.Ptr()
	return IPFS_peers_Params(p.Struct()), err
}

type IPFS_peers_Results capnp.Struct

// IPFS_peers_Results_TypeID is the unique identifier for the type IPFS_peers_Results.
const IPFS_peers_Results_TypeID = 0x8e86d1c015472327

func NewIPFS_peers_Results(s *capnp.Segment) (IPFS_peers_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IPFS_peers_Results(st), err
}

func NewRootIPFS_peers_Results(s *capnp.Segment) (IPFS_peers_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IPFS_peers_Results(st), err
}

func ReadRootIPFS_peers_Results(msg *capnp.Message) (IPFS_peers_Results, error) {
	root, err := msg.Root()
	return IPFS_peers_Results(root.Struct()), err
}

func (s IPFS_peers_Results) String() string {
	str, _ := text.Marshal(0x8e86d1c015472327, capnp.Struct(s))
	return str
}

func (s IPFS_peers_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (IPFS_peers_Results) DecodeFromPtr(p capnp.Ptr) IPFS_peers_Results {
	return IPFS_peers_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s IPFS_peers_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s IPFS_peers_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s IPFS_peers_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s IPFS_peers_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s IPFS_peers_Results) PeerList() (PeerInfo_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return PeerInfo_List(p.List()), err
}

func (s IPFS_peers_Results) HasPeerList() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s IPFS_peers_Results) SetPeerList(v PeerInfo_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewPeerList sets the peerList field to a newly
// allocated PeerInfo_List, preferring placement in s's segment.
func (s IPFS_peers_Results) NewPeerList(n int32) (PeerInfo_List, error) {
	l, err := NewPeerInfo_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return PeerInfo_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// IPFS_peers_Results_List is a list of IPFS_peers_Results.
type IPFS_peers_Results_List = capnp.StructList[IPFS_peers_Results]

// NewIPFS_peers_Results creates a new list of IPFS_peers_Results.
func NewIPFS_peers_Results_List(s *capnp.Segment, sz int32) (IPFS_peers_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[IPFS_peers_Results](l), err
}

// IPFS_peers_Results_Future is a wrapper for a IPFS_peers_Results promised by a client call.
type IPFS_peers_Results_Future struct{ *capnp.Future }

func (f IPFS_peers_Results_Future) Struct() (IPFS_peers_Results, error) {
	p, err := f.Future.Ptr()
	return IPFS_peers_Results(p.Struct()), err
}

type Entry capnp.Struct

// Entry_TypeID is the unique identifier for the type Entry.
const Entry_TypeID = 0xe50956368ed67ecf

func NewEntry(s *capnp.Segment) (Entry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return Entry(st), err
}

func NewRootEntry(s *capnp.Segment) (Entry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return Entry(st), err
}

func ReadRootEntry(msg *capnp.Message) (Entry, error) {
	root, err := msg.Root()
	return Entry(root.Struct()), err
}

func (s Entry) String() string {
	str, _ := text.Marshal(0xe50956368ed67ecf, capnp.Struct(s))
	return str
}

func (s Entry) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Entry) DecodeFromPtr(p capnp.Ptr) Entry {
	return Entry(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Entry) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Entry) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Entry) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Entry) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Entry) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Entry) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Entry) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Entry) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Entry) Type() EntryType {
	return EntryType(capnp.Struct(s).Uint16(0))
}

func (s Entry) SetType(v EntryType) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s Entry) Size() uint64 {
	return capnp.Struct(s).Uint64(8)
}

func (s Entry) SetSize(v uint64) {
	capnp.Struct(s).SetUint64(8, v)
}

func (s Entry) Cid() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Entry) HasCid() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Entry) CidBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Entry) SetCid(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// Entry_List is a list of Entry.
type Entry_List = capnp.StructList[Entry]

// NewEntry creates a new list of Entry.
func NewEntry_List(s *capnp.Segment, sz int32) (Entry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2}, sz)
	return capnp.StructList[Entry](l), err
}

// Entry_Future is a wrapper for a Entry promised by a client call.
type Entry_Future struct{ *capnp.Future }

func (f Entry_Future) Struct() (Entry, error) {
	p, err := f.Future.Ptr()
	return Entry(p.Struct()), err
}

type EntryType uint16

// EntryType_TypeID is the unique identifier for the type EntryType.
const EntryType_TypeID = 0x84f03db984574d8a

// Values of EntryType.
const (
	EntryType_file      EntryType = 0
	EntryType_directory EntryType = 1
	EntryType_symlink   EntryType = 2
)

// String returns the enum's constant name.
func (c EntryType) String() string {
	switch c {
	case EntryType_file:
		return "file"
	case EntryType_directory:
		return "directory"
	case EntryType_symlink:
		return "symlink"

	default:
		return ""
	}
}

// EntryTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func EntryTypeFromString(c string) EntryType {
	switch c {
	case "file":
		return EntryType_file
	case "directory":
		return EntryType_directory
	case "symlink":
		return EntryType_symlink

	default:
		return 0
	}
}

type EntryType_List = capnp.EnumList[EntryType]

func NewEntryType_List(s *capnp.Segment, sz int32) (EntryType_List, error) {
	return capnp.NewEnumList[EntryType](s, sz)
}

type NodeInfo capnp.Struct

// NodeInfo_TypeID is the unique identifier for the type NodeInfo.
const NodeInfo_TypeID = 0xa83fd4abe6553705

func NewNodeInfo(s *capnp.Segment) (NodeInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 3})
	return NodeInfo(st), err
}

func NewRootNodeInfo(s *capnp.Segment) (NodeInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 3})
	return NodeInfo(st), err
}

func ReadRootNodeInfo(msg *capnp.Message) (NodeInfo, error) {
	root, err := msg.Root()
	return NodeInfo(root.Struct()), err
}

func (s NodeInfo) String() string {
	str, _ := text.Marshal(0xa83fd4abe6553705, capnp.Struct(s))
	return str
}

func (s NodeInfo) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (NodeInfo) DecodeFromPtr(p capnp.Ptr) NodeInfo {
	return NodeInfo(capnp.Struct{}.DecodeFromPtr(p))
}

func (s NodeInfo) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s NodeInfo) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s NodeInfo) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s NodeInfo) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s NodeInfo) Cid() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s NodeInfo) HasCid() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s NodeInfo) CidBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s NodeInfo) SetCid(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s NodeInfo) Size() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s NodeInfo) SetSize(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s NodeInfo) CumulativeSize() uint64 {
	return capnp.Struct(s).Uint64(8)
}

func (s NodeInfo) SetCumulativeSize(v uint64) {
	capnp.Struct(s).SetUint64(8, v)
}

func (s NodeInfo) Type() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s NodeInfo) HasType() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s NodeInfo) TypeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s NodeInfo) SetType(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s NodeInfo) Links() (Link_List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return Link_List(p.List()), err
}

func (s NodeInfo) HasLinks() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s NodeInfo) SetLinks(v Link_List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewLinks sets the links field to a newly
// allocated Link_List, preferring placement in s's segment.
func (s NodeInfo) NewLinks(n int32) (Link_List, error) {
	l, err := NewLink_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Link_List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}

// NodeInfo_List is a list of NodeInfo.
type NodeInfo_List = capnp.StructList[NodeInfo]

// NewNodeInfo creates a new list of NodeInfo.
func NewNodeInfo_List(s *capnp.Segment, sz int32) (NodeInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 3}, sz)
	return capnp.StructList[NodeInfo](l), err
}

// NodeInfo_Future is a wrapper for a NodeInfo promised by a client call.
type NodeInfo_Future struct{ *capnp.Future }

func (f NodeInfo_Future) Struct() (NodeInfo, error) {
	p, err := f.Future.Ptr()
	return NodeInfo(p.Struct()), err
}

type Link capnp.Struct

// Link_TypeID is the unique identifier for the type Link.
const Link_TypeID = 0xe6d3c322caf5dd4b

func NewLink(s *capnp.Segment) (Link, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Link(st), err
}

func NewRootLink(s *capnp.Segment) (Link, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Link(st), err
}

func ReadRootLink(msg *capnp.Message) (Link, error) {
	root, err := msg.Root()
	return Link(root.Struct()), err
}

func (s Link) String() string {
	str, _ := text.Marshal(0xe6d3c322caf5dd4b, capnp.Struct(s))
	return str
}

func (s Link) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Link) DecodeFromPtr(p capnp.Ptr) Link {
	return Link(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Link) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Link) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Link) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Link) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Link) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Link) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Link) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Link) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Link) Size() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s Link) SetSize(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s Link) Cid() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Link) HasCid() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Link) CidBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Link) SetCid(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// Link_List is a list of Link.
type Link_List = capnp.StructList[Link]

// NewLink creates a new list of Link.
func NewLink_List(s *capnp.Segment, sz int32) (Link_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[Link](l), err
}

// Link_Future is a wrapper for a Link promised by a client call.
type Link_Future struct{ *capnp.Future }

func (f Link_Future) Struct() (Link, error) {
	p, err := f.Future.Ptr()
	return Link(p.Struct()), err
}

type PeerInfo capnp.Struct

// PeerInfo_TypeID is the unique identifier for the type PeerInfo.
const PeerInfo_TypeID = 0xa06f294430ac72ff

func NewPeerInfo(s *capnp.Segment) (PeerInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return PeerInfo(st), err
}

func NewRootPeerInfo(s *capnp.Segment) (PeerInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return PeerInfo(st), err
}

func ReadRootPeerInfo(msg *capnp.Message) (PeerInfo, error) {
	root, err := msg.Root()
	return PeerInfo(root.Struct()), err
}

func (s PeerInfo) String() string {
	str, _ := text.Marshal(0xa06f294430ac72ff, capnp.Struct(s))
	return str
}

func (s PeerInfo) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (PeerInfo) DecodeFromPtr(p capnp.Ptr) PeerInfo {
	return PeerInfo(capnp.Struct{}.DecodeFromPtr(p))
}

func (s PeerInfo) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s PeerInfo) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s PeerInfo) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s PeerInfo) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s PeerInfo) Id() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s PeerInfo) HasId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s PeerInfo) IdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s PeerInfo) SetId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s PeerInfo) Addresses() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.TextList(p.List()), err
}

func (s PeerInfo) HasAddresses() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s PeerInfo) SetAddresses(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewAddresses sets the addresses field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s PeerInfo) NewAddresses(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s PeerInfo) Protocols() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.TextList(p.List()), err
}

func (s PeerInfo) HasProtocols() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s PeerInfo) SetProtocols(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewProtocols sets the protocols field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s PeerInfo) NewProtocols(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}

// PeerInfo_List is a list of PeerInfo.
type PeerInfo_List = capnp.StructList[PeerInfo]

// NewPeerInfo creates a new list of PeerInfo.
func NewPeerInfo_List(s *capnp.Segment, sz int32) (PeerInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[PeerInfo](l), err
}

// PeerInfo_Future is a wrapper for a PeerInfo promised by a client call.
type PeerInfo_Future struct{ *capnp.Future }

func (f PeerInfo_Future) Struct() (PeerInfo, error) {
	p, err := f.Future.Ptr()
	return PeerInfo(p.Struct()), err
}

const schema_da965b22da734daf = "x\xda\xacVkl\x14U\x14>\xe7\xceNgw\xdd" +
	"u{;m\xe4!\xd9XJ\x80\x06\x08\xaf\x82`\xc8" +
	"\xae\x08h\x81\xe2N\x0b\x12D\x94\xc9\xce \x13\xb6\xb3" +
	"\xeb\xce\x94\xb0\xa4\xd0`\xca3H\x00\x81\x88\x8f\x04\x13" +
	"\"\x04-D\x88!E\xd1\x12\x83\x12\xfd!D\xc0\x80" +
	"!*\xe1\x11I4\x84\x801(\x8e\xb9\xd3\xce\xect" +
	"\xd9-!\xfao2\xe7\xdc\xef\x9e\xf3\x9d\xc7\xfdF\xc7" +
	"}q\xdf\x98\xf0\xfc \x10i\x05_f\xb5\x0f\xf0=" +
	"\xb6y|\xfb\xeb@+\x10\x80G\x01@\xa4\xfc-@" +
	"\xb1\x8a\x8f\x01Z\x9b\x1a\xe6\xb7wN\xb9\xd9\x0e4L" +
	"\xacC\x0d\xc6\xc5\xea\x85\xbb.\x02\xa0X\xc7\x1f\x13\xa7" +
	"\xf0\xcc}\x12\xff<\xa0\xf5C\xc5\x8dc\x91\x8e\xe5\x9b" +
	"\xbd@\x12\x7f\x17P\x9cg\x03\x0d\x1d\xfclU\xd7\x99" +
	"u[<\xf6q-<A@1g;\x9c\xbe9\xf7" +
	"hf\xdd\xb8\xad^\x80\x0e\x1b\xe0c\xdbne?\x1a" +
	"=mxz\x0f\xd00\xe6#\xe19\xe6w\x86?," +
	"^\xb0\x839\xc7\x1f\x02\xb4\xd6\x7f\xbap\x91\xfc\xfb\xc8" +
	"} U \x02\xf8\xd8e;\xcb\xec\xcbv\x9710" +
	"~\xe2\xbck\x1f\x9e\x8d\xed\x07)\x8c\xa4\x10\xad\xb3\xec" +
	"\xb0x\xa2\x8c\x9d9^\x16E@k\xb0\xf5\x07\x89\x0d" +
	"\xfc\xe9\x807\xb4_\x84\xcb\x80\xe2U\x81\xa1]\xf9\xfa" +
	"\xf8\xe0\x96\x83\x07:\xbcv\xde\x7f\x03P\x0c\xf8\x99=" +
	"\xbd\xec\x11m|\xf2\xa0\xd7>n\xb8?\xc8\xc2\x19c" +
	";\xbc\xba\xe7\x99\xc7\xa7\xef\xbev\xb4\xdb\xc1gs\xe7" +
	"\xbf\x0c>+9g\xef\xc1+\xe7\xde<\xe6E\xae\xb3" +
	"\x91'\xd9\x07\xfb\xff\x96X7b\xf2?'\xbd\x89." +
	"\xf0W0d\xd9vx\xf7\x9d\x1dsfLh\xfa\xca" +
	"\x0b\xb0\xc6\x06Xk\xdb'\x98\x1f\xb4\xf2\xbb&\x7f\xeb" +
	"\xb5\x7f\xe2g\xf5\xef\xb4\xed/?\xd9\xf5W\xa6}\xe6" +
	"Y\xaf\xfd\x82}\xfe\x12\xb3\xdf;R\xf7\xe2{#\xba" +
	"\xce{\xac\xf7\xec\xd3\x18\xb0o\xff[\x18\xdb\xef\xd4\xa9" +
	"\x1f=y=\x11\xb8\x0b>\xabZo\xdd\xb4\xb8\xf6\xd6" +
	"\xcf\xbd\x18\x0b\xb0b\x07\xec\x83\xdf\xad>\xbfe\xc2\x0b" +
	"\x81\xab\x85\xf5!v\xc3\x05\xde\x16\x9f\x0e\xb0\xaf)\x81" +
	"\xeb\x80\xd6\xacKw\xbe\xa9\xfe\xf2\xfbk\xcc\x19\x0b\x9d" +
	"ip\xbb\xd8?\xc8\xbe\xaa\x82\xac5nt\x85>\xdb" +
	"\xf7\xf9[\xd7=!u\x04o\x81\xcf\x9a5\xe8\xa9\xa1" +
	"\xe4\x95\xd57\x81\x86\xb9^\x9d\xbe-\xb8]\xdc\x1d\xb4" +
	"[(\xb8\x9e\x88CB\x02\x80\xe5;\xf1E\xd7\xc4\xdb" +
	"\xdamo\x02\xe1\x10\xe3\x85\x86X\x02\x8b\xe6\x9f\xde\xbb" +
	"q\xe2\xc0?=\x85\x11\xebB\x8c\x99I\xa1\x18\x8c\xb4" +
	"\x8c\x9ca\xaa\xcd\xa3\x92D\xce\xe8\x99\xc9\xf5\x89\x19M" +
	"\xa3\x0cS6k\x12Q9+7\x1b\x92\x8f\xf3\x01\xf8" +
	"\x10\x80\x86\xab\x01$?\x87R%A!\xa9)\x18\x02" +
	"\x82!@\x17\x02m\x88\xe9\xba\x19\xcb\xe6\xe6\xe62j" +
	"\x02Q\x0a!\x01\xa0\x83j\x01\x10iU#\x00\x12J" +
	"\xa7\x02D\x96h)\xd5R\xb4\xac\x9a4\xd3Y\xc0\\" +
	"\x9b\x91kNi\xfa\xb2b\x01\xb5\xe8\x19M\xaf\x89%" +
	"\x1e:\".\x8f\x91Q\xd5\xacQ\xd3\xa8\x1a-)\xd3" +
	"\x00/\xc8L\x00)\xc4\xa14\x8c\xa0\xc5\xbcfk\x86" +
	"\x09\x00\xf8(`\x82C,\xcf\x0f< \xfbY\x92\xb2" +
	"\xc6X7\xba\x17\xbc6\x1faD\xd3\x97\xa4\xb1<?" +
	"\xf2\x80X~\x1f}\x09U\x8df\xeb\xf5%i\x9b=" +
	"\x17h\xfa\x00\x00)\xce\xa14\x9b E\xacd\xb5\xa4" +
	"\xf5\x8d\x00\xd2s\x1cJ\x0aAJH\xa5\xcd\xb5\xcc~" +
	".\xe6Pj%\xc8y8\x91\x15%\xab\x1a\x86\x0ah" +
	"8\xa91\x13K(\x93M\x9b\xe9d:U\xc4T\x84" +
	"\xc9\xeej\x14crj>\xd96\xa3%\x99T\x0d\x03" +
	"\x11\x08\xe2}Y\xceI+Q\xd5\xc9\xb2\xd2EX\xc5" +
	"\x0a\xba\x82C\xa9\x9d\xa0\x93\xe4\x1aFa+\x87\xd2\x06" +
	"\x96$v'\xb9v%\x80\xd4\xce\xa1\xb4\x95 \xe5\xb0" +
	"\x129\x00\xfa\x06\xf3\xdc\xc0\xa1\xb4\x83 \xf5\x91J\xf4" +
	"\x01\xd0mc\x01\xa4\xcd\x1cJ\xfb{\xf7H\xc4\xd0V" +
	"\xaa\x18\x00\x82\x01@+\xd9\xd2\xdc\x92\x92M\x0db\xcb" +
	"\xd5&\x8f!b\xe62\xaas$\xca\xfa\xd3\xc8\xf7\x85" +
	";\xee\xa5\xfb\"e\xd4$\xe4\xacP\xd0\xb6\xde\xa6\xc8" +
	"\xc8\xe6\xd2\xfb\xfa\xd6\x83\x90d\xb3(G\xfeC\xe7'" +
	"\xd3\xba\xae&\x19\x0a\x03\x01(\x15\x09k\x90\xbe\"\xd1" +
	"\x14'\x97bV\xd6\x13\xffO\x9c\xdd\x9d\x85\xc6\xc3v" +
	"Vo\xda\x1bU#R8\x8c\x0eJ\x0d\xc16U7" +
	"\xb3\x9a\xea\xa9\xa6\xbb\xe9KW\x93\xd5\xa2Q\x8d\xf69" +
	"\xe4\x8al\xca\x18\x06\x82\xe1\xe2\x18\xb2\xa2\x14\xe3\xe9a" +
	"!\x8a\x85\xf1 \xaeI\xe16\xec\xd9\xa8%\xcai\xf4" +
	"\xb9\xd0j\x08F\x92\x9aRra\xb8\x8f\x01\x97\xcd\xb1" +
	"!/w!d\x06\xf1\x12\x87\xd2\xd2\xfc\x90\xab\xb5=" +
	"K+\xe5\x19r\x8d\xfdT8\x942\x9e!ofY" +
	".\xe5P2\x09Ft\xb9\xd9\x9d\xce\xeeQ\x8d\xe4\x85" +
	"\" F\x0a\xe6\xbc\x8fgk\xb6\xa6\xe3\xb2\x82\x9d[" +
	"\x9b\xdf\xb9\xee\xcae\xff\xa6q(%<\x816T\xf7" +
	"\xec\xe1\xb9\x851=\xf0\xf2B\xca{\x9e\xdd\x82\xe0\xea" +
	"\x133\xb0\x89\x057\x8c\xe3\x01\\-\x84G\xa0[\xf5" +
	"\x88c\xb0\x1a\x888\x04\x05\xcc\x8b@t$\x95\xd8\xdf" +
	"\xb6\x86Q@\xe2JHt\x04\x99\x888\x00\x08\xbd#" +
	" \xe7\x8apt40\xfd\xb5\x16\x08\xbd$`^\x01" +
	"\xa2\xa3(\xe8\x99j \xf4\xa4\x80\xbc\xab\xb9\xd1\xd1\xbb" +
	"\xb4s,\x10\xda!`\x99\xabs\xd0\x91Z\xf4}\x86" +
	"\xb9S@\xc1\x95\x9b\xe8\xa8\x18\xba\x91\xc5\xb2J@\xbf" +
	"\xabU\xd1\x91\x96\xf4\xb5\xa9@\xa8*`\xc0\x95s\xe8" +
	"\x88y\xba\x80\xdd\xd7 \x08\xb2\xa2\xc4QH\xcaf\x1c" +
	"\xb9\x94\x11\xc7\x08{\x99\xe3(d4=\x8eQ\xfb\xe9" +
	"\x8ac\x84Q\x1dg\xafc\x1c\xdbz\xd6N\x1c\xa3\xf6" +
	"P\xc41\x81\xa5\xd6_\xb1\x9d\xe2\xa8\x87~=\xea\x81" +
	"=jL=\xf4\x96\x0d\xe5%K^t\x92\xfbXw" +
	"\xff\x06\x00\x00\xff\xffm\xb0>\\"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_da965b22da734daf,
		Nodes: []uint64{
			0x8284348c17041a84,
			0x84f03db984574d8a,
			0x8c76ad0fbaea12d7,
			0x8e86d1c015472327,
			0x90338670b754f0d0,
			0xa06f294430ac72ff,
			0xa72dee615d5bbb87,
			0xa83fd4abe6553705,
			0xaadf1b3f02f6ff23,
			0xadaaae7523bdc7e4,
			0xadae6334690b6b6f,
			0xb7e699451c43a067,
			0xba93d5e4aea44e63,
			0xc5fe3a2c8650ed19,
			0xc65336464e949b9c,
			0xcb3a96057ca67436,
			0xd44a8470fbc0385e,
			0xd6c02c9d5a3500b3,
			0xdbc8c8183207fc9c,
			0xe0f22a608a7c6e22,
			0xe50956368ed67ecf,
			0xe6d3c322caf5dd4b,
			0xe798bea7bc0cc0ea,
			0xf07e5f02273b1d4b,
			0xf469f437c0bfc104,
			0xf81b3789a4d0575d,
		},
		Compressed: true,
	})
}
