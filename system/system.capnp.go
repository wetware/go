// Code generated by capnpc-go. DO NOT EDIT.

package system

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type Importer capnp.Client

// Importer_TypeID is the unique identifier for the type Importer.
const Importer_TypeID = 0xebcb79faf0a0efeb

func (c Importer) Import(ctx context.Context, params func(Importer_import_Params) error) (Importer_import_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xebcb79faf0a0efeb,
			MethodID:      0,
			InterfaceName: "system.capnp:Importer",
			MethodName:    "import",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Importer_import_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Importer_import_Results_Future{Future: ans.Future()}, release

}

func (c Importer) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Importer) String() string {
	return "Importer(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Importer) AddRef() Importer {
	return Importer(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Importer) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Importer) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Importer) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Importer) DecodeFromPtr(p capnp.Ptr) Importer {
	return Importer(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Importer) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Importer) IsSame(other Importer) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Importer) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Importer) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Importer_Server is a Importer with a local implementation.
type Importer_Server interface {
	Import(context.Context, Importer_import) error
}

// Importer_NewServer creates a new Server from an implementation of Importer_Server.
func Importer_NewServer(s Importer_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Importer_Methods(nil, s), s, c)
}

// Importer_ServerToClient creates a new Client from an implementation of Importer_Server.
// The caller is responsible for calling Release on the returned Client.
func Importer_ServerToClient(s Importer_Server) Importer {
	return Importer(capnp.NewClient(Importer_NewServer(s)))
}

// Importer_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Importer_Methods(methods []server.Method, s Importer_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xebcb79faf0a0efeb,
			MethodID:      0,
			InterfaceName: "system.capnp:Importer",
			MethodName:    "import",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Import(ctx, Importer_import{call})
		},
	})

	return methods
}

// Importer_import holds the state for a server call to Importer.import.
// See server.Call for documentation.
type Importer_import struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Importer_import) Args() Importer_import_Params {
	return Importer_import_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Importer_import) AllocResults() (Importer_import_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Importer_import_Results(r), err
}

// Importer_List is a list of Importer.
type Importer_List = capnp.CapList[Importer]

// NewImporter creates a new list of Importer.
func NewImporter_List(s *capnp.Segment, sz int32) (Importer_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Importer](l), err
}

type Importer_import_Params capnp.Struct

// Importer_import_Params_TypeID is the unique identifier for the type Importer_import_Params.
const Importer_import_Params_TypeID = 0x922a32e89bfe28a6

func NewImporter_import_Params(s *capnp.Segment) (Importer_import_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Importer_import_Params(st), err
}

func NewRootImporter_import_Params(s *capnp.Segment) (Importer_import_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Importer_import_Params(st), err
}

func ReadRootImporter_import_Params(msg *capnp.Message) (Importer_import_Params, error) {
	root, err := msg.Root()
	return Importer_import_Params(root.Struct()), err
}

func (s Importer_import_Params) String() string {
	str, _ := text.Marshal(0x922a32e89bfe28a6, capnp.Struct(s))
	return str
}

func (s Importer_import_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Importer_import_Params) DecodeFromPtr(p capnp.Ptr) Importer_import_Params {
	return Importer_import_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Importer_import_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Importer_import_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Importer_import_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Importer_import_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Importer_import_Params) Envelope() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s Importer_import_Params) HasEnvelope() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Importer_import_Params) SetEnvelope(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// Importer_import_Params_List is a list of Importer_import_Params.
type Importer_import_Params_List = capnp.StructList[Importer_import_Params]

// NewImporter_import_Params creates a new list of Importer_import_Params.
func NewImporter_import_Params_List(s *capnp.Segment, sz int32) (Importer_import_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Importer_import_Params](l), err
}

// Importer_import_Params_Future is a wrapper for a Importer_import_Params promised by a client call.
type Importer_import_Params_Future struct{ *capnp.Future }

func (f Importer_import_Params_Future) Struct() (Importer_import_Params, error) {
	p, err := f.Future.Ptr()
	return Importer_import_Params(p.Struct()), err
}

type Importer_import_Results capnp.Struct

// Importer_import_Results_TypeID is the unique identifier for the type Importer_import_Results.
const Importer_import_Results_TypeID = 0xd501af14a0bc9e76

func NewImporter_import_Results(s *capnp.Segment) (Importer_import_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Importer_import_Results(st), err
}

func NewRootImporter_import_Results(s *capnp.Segment) (Importer_import_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Importer_import_Results(st), err
}

func ReadRootImporter_import_Results(msg *capnp.Message) (Importer_import_Results, error) {
	root, err := msg.Root()
	return Importer_import_Results(root.Struct()), err
}

func (s Importer_import_Results) String() string {
	str, _ := text.Marshal(0xd501af14a0bc9e76, capnp.Struct(s))
	return str
}

func (s Importer_import_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Importer_import_Results) DecodeFromPtr(p capnp.Ptr) Importer_import_Results {
	return Importer_import_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Importer_import_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Importer_import_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Importer_import_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Importer_import_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Importer_import_Results) Service() capnp.Client {
	p, _ := capnp.Struct(s).Ptr(0)
	return p.Interface().Client()
}

func (s Importer_import_Results) HasService() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Importer_import_Results) SetService(c capnp.Client) error {
	if !c.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(c))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Importer_import_Results_List is a list of Importer_import_Results.
type Importer_import_Results_List = capnp.StructList[Importer_import_Results]

// NewImporter_import_Results creates a new list of Importer_import_Results.
func NewImporter_import_Results_List(s *capnp.Segment, sz int32) (Importer_import_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Importer_import_Results](l), err
}

// Importer_import_Results_Future is a wrapper for a Importer_import_Results promised by a client call.
type Importer_import_Results_Future struct{ *capnp.Future }

func (f Importer_import_Results_Future) Struct() (Importer_import_Results, error) {
	p, err := f.Future.Ptr()
	return Importer_import_Results(p.Struct()), err
}
func (p Importer_import_Results_Future) Service() capnp.Client {
	return p.Future.Field(0, nil).Client()
}

const schema_da965b22da734daf = "x\xda\x84\xd0\xbdJ\x03A\x14\xc5\xf1sff]\x0b" +
	"\x17\x9dl\x10\x0bE\x08\x0a\x12$\xa0vi\x12l$" +
	"\x82\x90\xb1\xb5\x0aa\x8a@>\xd6\x9d$\xb0\x95o`" +
	"aa#J*\xdb\x80\xb5o`m\x93'\x10Rh" +
	"m\xe1JV\"\xb1\xb2\xbb\xc5\x9f\xdf\x85\xb3v]U" +
	"\x07AO@\x98Mo)}\xdc\xfb\xba{;,\xde" +
	"@\xaf\x13\xf0\xe8\x03G[,\x10\x0cwY\x01\xd3\xe1" +
	"\xc3\xf3(?\xe6\xebbPcq\x16\x98,\x98\xbe\x8f" +
	">>\x93\x97)t \xd3\xf1\x99\x9b\x14.n'\x00" +
	"\xc3K>\x85\xc9\xac\x0f\x07<\x09\xef\xe9c?u\x89" +
	"\xeb\xdbN\xa9)\x1bQ7*\xd7:Q/\xee\xdb\xb8" +
	"\xd4\xca\x8e\x9dz#\xf6\x1b\x1dg\x94T\x80\"\xa0\x83" +
	"S\xc0\xacH\x9a\x0d\xc1\xd4v\x87\xb6\xdd\x8b,\x00\x06" +
	"\x10\x0c\xc0\x7f\xc0s\xebV\x07\xed\xfe\x1f\xf1\x180\xcb" +
	"\x92&/x\xe5l<l5-sJ\x82\xcc-x" +
	"\x9c{\xdb\x19X'\x8d\x92\x1e\xf0;\x18\xe7\xc3h]" +
	"\x86\xd0\x9e_\xf9\xf9Ye\x9d\xfc\x0e\x00\x00\xff\xff\x98" +
	"F`."

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_da965b22da734daf,
		Nodes: []uint64{
			0x922a32e89bfe28a6,
			0xd501af14a0bc9e76,
			0xebcb79faf0a0efeb,
		},
		Compressed: true,
	})
}
