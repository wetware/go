// Code generated by capnpc-go. DO NOT EDIT.

package cap

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type Greeter capnp.Client

// Greeter_TypeID is the unique identifier for the type Greeter.
const Greeter_TypeID = 0xbe2d1febcefe3193

func (c Greeter) Greet(ctx context.Context, params func(Greeter_greet_Params) error) (Greeter_greet_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbe2d1febcefe3193,
			MethodID:      0,
			InterfaceName: "export.capnp:Greeter",
			MethodName:    "greet",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Greeter_greet_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Greeter_greet_Results_Future{Future: ans.Future()}, release

}

func (c Greeter) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Greeter) String() string {
	return "Greeter(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Greeter) AddRef() Greeter {
	return Greeter(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Greeter) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Greeter) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Greeter) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Greeter) DecodeFromPtr(p capnp.Ptr) Greeter {
	return Greeter(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Greeter) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Greeter) IsSame(other Greeter) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Greeter) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Greeter) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Greeter_Server is a Greeter with a local implementation.
type Greeter_Server interface {
	Greet(context.Context, Greeter_greet) error
}

// Greeter_NewServer creates a new Server from an implementation of Greeter_Server.
func Greeter_NewServer(s Greeter_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Greeter_Methods(nil, s), s, c)
}

// Greeter_ServerToClient creates a new Client from an implementation of Greeter_Server.
// The caller is responsible for calling Release on the returned Client.
func Greeter_ServerToClient(s Greeter_Server) Greeter {
	return Greeter(capnp.NewClient(Greeter_NewServer(s)))
}

// Greeter_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Greeter_Methods(methods []server.Method, s Greeter_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbe2d1febcefe3193,
			MethodID:      0,
			InterfaceName: "export.capnp:Greeter",
			MethodName:    "greet",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Greet(ctx, Greeter_greet{call})
		},
	})

	return methods
}

// Greeter_greet holds the state for a server call to Greeter.greet.
// See server.Call for documentation.
type Greeter_greet struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Greeter_greet) Args() Greeter_greet_Params {
	return Greeter_greet_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Greeter_greet) AllocResults() (Greeter_greet_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Greeter_greet_Results(r), err
}

// Greeter_List is a list of Greeter.
type Greeter_List = capnp.CapList[Greeter]

// NewGreeter_List creates a new list of Greeter.
func NewGreeter_List(s *capnp.Segment, sz int32) (Greeter_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Greeter](l), err
}

type Greeter_greet_Params capnp.Struct

// Greeter_greet_Params_TypeID is the unique identifier for the type Greeter_greet_Params.
const Greeter_greet_Params_TypeID = 0xcb62612da96426ac

func NewGreeter_greet_Params(s *capnp.Segment) (Greeter_greet_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Greeter_greet_Params(st), err
}

func NewRootGreeter_greet_Params(s *capnp.Segment) (Greeter_greet_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Greeter_greet_Params(st), err
}

func ReadRootGreeter_greet_Params(msg *capnp.Message) (Greeter_greet_Params, error) {
	root, err := msg.Root()
	return Greeter_greet_Params(root.Struct()), err
}

func (s Greeter_greet_Params) String() string {
	str, _ := text.Marshal(0xcb62612da96426ac, capnp.Struct(s))
	return str
}

func (s Greeter_greet_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Greeter_greet_Params) DecodeFromPtr(p capnp.Ptr) Greeter_greet_Params {
	return Greeter_greet_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Greeter_greet_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Greeter_greet_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Greeter_greet_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Greeter_greet_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Greeter_greet_Params) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Greeter_greet_Params) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Greeter_greet_Params) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Greeter_greet_Params) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Greeter_greet_Params_List is a list of Greeter_greet_Params.
type Greeter_greet_Params_List = capnp.StructList[Greeter_greet_Params]

// NewGreeter_greet_Params creates a new list of Greeter_greet_Params.
func NewGreeter_greet_Params_List(s *capnp.Segment, sz int32) (Greeter_greet_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Greeter_greet_Params](l), err
}

// Greeter_greet_Params_Future is a wrapper for a Greeter_greet_Params promised by a client call.
type Greeter_greet_Params_Future struct{ *capnp.Future }

func (f Greeter_greet_Params_Future) Struct() (Greeter_greet_Params, error) {
	p, err := f.Future.Ptr()
	return Greeter_greet_Params(p.Struct()), err
}

type Greeter_greet_Results capnp.Struct

// Greeter_greet_Results_TypeID is the unique identifier for the type Greeter_greet_Results.
const Greeter_greet_Results_TypeID = 0xc0c1aae7ac34f9c6

func NewGreeter_greet_Results(s *capnp.Segment) (Greeter_greet_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Greeter_greet_Results(st), err
}

func NewRootGreeter_greet_Results(s *capnp.Segment) (Greeter_greet_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Greeter_greet_Results(st), err
}

func ReadRootGreeter_greet_Results(msg *capnp.Message) (Greeter_greet_Results, error) {
	root, err := msg.Root()
	return Greeter_greet_Results(root.Struct()), err
}

func (s Greeter_greet_Results) String() string {
	str, _ := text.Marshal(0xc0c1aae7ac34f9c6, capnp.Struct(s))
	return str
}

func (s Greeter_greet_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Greeter_greet_Results) DecodeFromPtr(p capnp.Ptr) Greeter_greet_Results {
	return Greeter_greet_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Greeter_greet_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Greeter_greet_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Greeter_greet_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Greeter_greet_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Greeter_greet_Results) Greeting() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Greeter_greet_Results) HasGreeting() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Greeter_greet_Results) GreetingBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Greeter_greet_Results) SetGreeting(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Greeter_greet_Results_List is a list of Greeter_greet_Results.
type Greeter_greet_Results_List = capnp.StructList[Greeter_greet_Results]

// NewGreeter_greet_Results creates a new list of Greeter_greet_Results.
func NewGreeter_greet_Results_List(s *capnp.Segment, sz int32) (Greeter_greet_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Greeter_greet_Results](l), err
}

// Greeter_greet_Results_Future is a wrapper for a Greeter_greet_Results promised by a client call.
type Greeter_greet_Results_Future struct{ *capnp.Future }

func (f Greeter_greet_Results_Future) Struct() (Greeter_greet_Results, error) {
	p, err := f.Future.Ptr()
	return Greeter_greet_Results(p.Struct()), err
}

const schema_a0266946850e6061 = "x\xda|\xcd\xb1J\xf3P\x18\xc6\xf1\xe79'\xf9\xfa" +
	"\x0d\xad\xf5\x18\x05\x11\xa5\x08\xdaAH!\xea\xa2K;" +
	"Yt\xcaq\x17<\xea\xa1\x14l\x1a\xd2\x08\xde\x80\xab" +
	"\x8b7\xe0j\xe95\x88..\x82\xb7\xe1\xe0\x15\xb8x" +
	"$\x85\x14]\xdc^^\xfe\xfc\x9e\xf9\xdb\x8e\x17\xd5\x86" +
	"\x02B\xaf\xfa\xff\xdc]\xf4\xf5\xf6\xd1\x08\x1f\xa1j\xd2" +
	"\x99\xd3\xb9\x9b\x83~\xf3\x1e`\xb0\xc6q\xb0\xc9\x0a\x10" +
	"\xac\xb3\x1b\x1c\x16\x97{\xf9\xdc\x9d\xbc\x8f\x9f\x9f\xa0\x96" +
	"\x08\xf8\xc5o'\xe2\x0a\xc1`\x8fm\xd0M\x9a\x17\x0f" +
	"\xa19{\xfd\x19\x9cp\xa1\x08,\xdb\x08\x9d\xbdN\x87" +
	"Y\xde:\xa7I\x93t\xbf\x9b\xd9\xba\xcdm\x16\x93\xda" +
	"\x93>0\x03XN)\xb5\x0d\xa1\xfcJ\xa3\x97Y\x9b" +
	"w\x18\x933D\x96Ha\xb4\xa6\xc1\xc6\xb1\x1d]]" +
	"\xca|\xa4=\xe9\x01\x1e\x01U;\x02tUR/\x0b" +
	"\xbai\xd5Oz\x00X\x85`\x15\x7f{\xb1\xc9\xcc\x80" +
	"\xbf\xb8-@\xff\x97\xd4\x8b\x82\xf5\xc4\x0cl\xe9|\x07" +
	"\x00\x00\xff\xff\xcaQX3"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_a0266946850e6061,
		Nodes: []uint64{
			0xbe2d1febcefe3193,
			0xc0c1aae7ac34f9c6,
			0xcb62612da96426ac,
		},
		Compressed: true,
	})
}
