// Code generated by capnpc-go. DO NOT EDIT.

package boot

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	schema "capnproto.org/go/capnp/v3/std/capnp/schema"
	context "context"
)

type Env capnp.Client

// Env_TypeID is the unique identifier for the type Env.
const Env_TypeID = 0xa799dfba4daa7d3b

func (c Env) Type(ctx context.Context, params func(Env_type_Params) error) (Env_type_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa799dfba4daa7d3b,
			MethodID:      0,
			InterfaceName: "boot.capnp:Env",
			MethodName:    "type",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Env_type_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Env_type_Results_Future{Future: ans.Future()}, release

}

func (c Env) Node(ctx context.Context, params func(Env_node_Params) error) (Env_node_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa799dfba4daa7d3b,
			MethodID:      1,
			InterfaceName: "boot.capnp:Env",
			MethodName:    "node",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Env_node_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Env_node_Results_Future{Future: ans.Future()}, release

}

func (c Env) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Env) String() string {
	return "Env(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Env) AddRef() Env {
	return Env(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Env) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Env) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Env) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Env) DecodeFromPtr(p capnp.Ptr) Env {
	return Env(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Env) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Env) IsSame(other Env) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Env) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Env) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Env_Server is a Env with a local implementation.
type Env_Server interface {
	Type(context.Context, Env_type) error

	Node(context.Context, Env_node) error
}

// Env_NewServer creates a new Server from an implementation of Env_Server.
func Env_NewServer(s Env_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Env_Methods(nil, s), s, c)
}

// Env_ServerToClient creates a new Client from an implementation of Env_Server.
// The caller is responsible for calling Release on the returned Client.
func Env_ServerToClient(s Env_Server) Env {
	return Env(capnp.NewClient(Env_NewServer(s)))
}

// Env_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Env_Methods(methods []server.Method, s Env_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa799dfba4daa7d3b,
			MethodID:      0,
			InterfaceName: "boot.capnp:Env",
			MethodName:    "type",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Type(ctx, Env_type{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa799dfba4daa7d3b,
			MethodID:      1,
			InterfaceName: "boot.capnp:Env",
			MethodName:    "node",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Node(ctx, Env_node{call})
		},
	})

	return methods
}

// Env_type holds the state for a server call to Env.type.
// See server.Call for documentation.
type Env_type struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Env_type) Args() Env_type_Params {
	return Env_type_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Env_type) AllocResults() (Env_type_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Env_type_Results(r), err
}

// Env_node holds the state for a server call to Env.node.
// See server.Call for documentation.
type Env_node struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Env_node) Args() Env_node_Params {
	return Env_node_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Env_node) AllocResults() (Env_node_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Env_node_Results(r), err
}

// Env_List is a list of Env.
type Env_List = capnp.CapList[Env]

// NewEnv creates a new list of Env.
func NewEnv_List(s *capnp.Segment, sz int32) (Env_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Env](l), err
}

type Env_type_Params capnp.Struct

// Env_type_Params_TypeID is the unique identifier for the type Env_type_Params.
const Env_type_Params_TypeID = 0xb483b00913aca16b

func NewEnv_type_Params(s *capnp.Segment) (Env_type_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Env_type_Params(st), err
}

func NewRootEnv_type_Params(s *capnp.Segment) (Env_type_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Env_type_Params(st), err
}

func ReadRootEnv_type_Params(msg *capnp.Message) (Env_type_Params, error) {
	root, err := msg.Root()
	return Env_type_Params(root.Struct()), err
}

func (s Env_type_Params) String() string {
	str, _ := text.Marshal(0xb483b00913aca16b, capnp.Struct(s))
	return str
}

func (s Env_type_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Env_type_Params) DecodeFromPtr(p capnp.Ptr) Env_type_Params {
	return Env_type_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Env_type_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Env_type_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Env_type_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Env_type_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Env_type_Params_List is a list of Env_type_Params.
type Env_type_Params_List = capnp.StructList[Env_type_Params]

// NewEnv_type_Params creates a new list of Env_type_Params.
func NewEnv_type_Params_List(s *capnp.Segment, sz int32) (Env_type_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Env_type_Params](l), err
}

// Env_type_Params_Future is a wrapper for a Env_type_Params promised by a client call.
type Env_type_Params_Future struct{ *capnp.Future }

func (f Env_type_Params_Future) Struct() (Env_type_Params, error) {
	p, err := f.Future.Ptr()
	return Env_type_Params(p.Struct()), err
}

type Env_type_Results capnp.Struct

// Env_type_Results_TypeID is the unique identifier for the type Env_type_Results.
const Env_type_Results_TypeID = 0xa86fdf1d4f98a777

func NewEnv_type_Results(s *capnp.Segment) (Env_type_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Env_type_Results(st), err
}

func NewRootEnv_type_Results(s *capnp.Segment) (Env_type_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Env_type_Results(st), err
}

func ReadRootEnv_type_Results(msg *capnp.Message) (Env_type_Results, error) {
	root, err := msg.Root()
	return Env_type_Results(root.Struct()), err
}

func (s Env_type_Results) String() string {
	str, _ := text.Marshal(0xa86fdf1d4f98a777, capnp.Struct(s))
	return str
}

func (s Env_type_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Env_type_Results) DecodeFromPtr(p capnp.Ptr) Env_type_Results {
	return Env_type_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Env_type_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Env_type_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Env_type_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Env_type_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Env_type_Results) Schema() (schema.Node, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return schema.Node(p.Struct()), err
}

func (s Env_type_Results) HasSchema() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Env_type_Results) SetSchema(v schema.Node) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewSchema sets the schema field to a newly
// allocated schema.Node struct, preferring placement in s's segment.
func (s Env_type_Results) NewSchema() (schema.Node, error) {
	ss, err := schema.NewNode(capnp.Struct(s).Segment())
	if err != nil {
		return schema.Node{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Env_type_Results_List is a list of Env_type_Results.
type Env_type_Results_List = capnp.StructList[Env_type_Results]

// NewEnv_type_Results creates a new list of Env_type_Results.
func NewEnv_type_Results_List(s *capnp.Segment, sz int32) (Env_type_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Env_type_Results](l), err
}

// Env_type_Results_Future is a wrapper for a Env_type_Results promised by a client call.
type Env_type_Results_Future struct{ *capnp.Future }

func (f Env_type_Results_Future) Struct() (Env_type_Results, error) {
	p, err := f.Future.Ptr()
	return Env_type_Results(p.Struct()), err
}
func (p Env_type_Results_Future) Schema() schema.Node_Future {
	return schema.Node_Future{Future: p.Future.Field(0, nil)}
}

type Env_node_Params capnp.Struct

// Env_node_Params_TypeID is the unique identifier for the type Env_node_Params.
const Env_node_Params_TypeID = 0xfa39cd7fc5e3b202

func NewEnv_node_Params(s *capnp.Segment) (Env_node_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Env_node_Params(st), err
}

func NewRootEnv_node_Params(s *capnp.Segment) (Env_node_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Env_node_Params(st), err
}

func ReadRootEnv_node_Params(msg *capnp.Message) (Env_node_Params, error) {
	root, err := msg.Root()
	return Env_node_Params(root.Struct()), err
}

func (s Env_node_Params) String() string {
	str, _ := text.Marshal(0xfa39cd7fc5e3b202, capnp.Struct(s))
	return str
}

func (s Env_node_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Env_node_Params) DecodeFromPtr(p capnp.Ptr) Env_node_Params {
	return Env_node_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Env_node_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Env_node_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Env_node_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Env_node_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Env_node_Params_List is a list of Env_node_Params.
type Env_node_Params_List = capnp.StructList[Env_node_Params]

// NewEnv_node_Params creates a new list of Env_node_Params.
func NewEnv_node_Params_List(s *capnp.Segment, sz int32) (Env_node_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Env_node_Params](l), err
}

// Env_node_Params_Future is a wrapper for a Env_node_Params promised by a client call.
type Env_node_Params_Future struct{ *capnp.Future }

func (f Env_node_Params_Future) Struct() (Env_node_Params, error) {
	p, err := f.Future.Ptr()
	return Env_node_Params(p.Struct()), err
}

type Env_node_Results capnp.Struct

// Env_node_Results_TypeID is the unique identifier for the type Env_node_Results.
const Env_node_Results_TypeID = 0x9ce1cd3ca86de4d8

func NewEnv_node_Results(s *capnp.Segment) (Env_node_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Env_node_Results(st), err
}

func NewRootEnv_node_Results(s *capnp.Segment) (Env_node_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Env_node_Results(st), err
}

func ReadRootEnv_node_Results(msg *capnp.Message) (Env_node_Results, error) {
	root, err := msg.Root()
	return Env_node_Results(root.Struct()), err
}

func (s Env_node_Results) String() string {
	str, _ := text.Marshal(0x9ce1cd3ca86de4d8, capnp.Struct(s))
	return str
}

func (s Env_node_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Env_node_Results) DecodeFromPtr(p capnp.Ptr) Env_node_Results {
	return Env_node_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Env_node_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Env_node_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Env_node_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Env_node_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Env_node_Results) Value() (capnp.Ptr, error) {
	return capnp.Struct(s).Ptr(0)
}

func (s Env_node_Results) HasValue() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Env_node_Results) SetValue(v capnp.Ptr) error {
	return capnp.Struct(s).SetPtr(0, v)
}

// Env_node_Results_List is a list of Env_node_Results.
type Env_node_Results_List = capnp.StructList[Env_node_Results]

// NewEnv_node_Results creates a new list of Env_node_Results.
func NewEnv_node_Results_List(s *capnp.Segment, sz int32) (Env_node_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Env_node_Results](l), err
}

// Env_node_Results_Future is a wrapper for a Env_node_Results promised by a client call.
type Env_node_Results_Future struct{ *capnp.Future }

func (f Env_node_Results_Future) Struct() (Env_node_Results, error) {
	p, err := f.Future.Ptr()
	return Env_node_Results(p.Struct()), err
}
func (p Env_node_Results_Future) Value() *capnp.Future {
	return p.Future.Field(0, nil)
}

const schema_e82706a772b0927b = "x\xda2\xd0`r`1\xe4=\xcf\xc7\xc0\x14\xb8\x86" +
	"\x95\xed\xff\x8d'\xb9+l\xce>\x9c\xc3 \xc8\xcf\xc8" +
	"\xc0\xc0\xca\xc8\xce\xc0 \xec\xcb\xfe\x88\x81Q8\x90\xdd" +
	"\x9e\x81\xf1\xbfu\xed*\xdf]\xf7g.g\x10\xe4f" +
	"\xfe_=iC\xd1r6\xf5\x17\x0c\x0c\x8c\xc2\x85\xec" +
	"U\xc2\xa5\xec \xe5\x85\xec\xed\xc2\x07A\xac\xff\xe5\xcb" +
	"g\xf8\xcb\xde\xcf_\x81l\xd8J\xb0ak\xc1\x86e" +
	"/\\#\xcc\xb9\xa1y\x0bD\x9e\x05$}\x96\xfd\x16" +
	"\x03\xcb\x7f\xa6M\x8f\x8f\xd6\x9f\xb5\xfc\x85$\xb1\x91\xfd" +
	"\x16\xc3\x7f\x86e\xff\x93\xf2\xf3K\xf4\x92\x13\x0b\x98\xf2" +
	"\x0a\xac\\\xf3\xca\xf4\xf2\xf2SRU\x82R\x8bK\xd9" +
	"sJ\x8a\x03Y\x98Y\x18\x18X\x18\x19\x18\x04y\x8d" +
	"\x18\x18\x029\x98\x19\x03E\x98\x18\xe5\xcb\x12sJS" +
	"\x19\x85\x18\x98\x18\x85\x18\x18\xe1F0\xd8C\xcc\x08`" +
	"d\x0c\xe4`fe`\x80;\x88\x11\xe6rAC-" +
	"\x06&AUvFF\xb8\x9b\x18aA$(\x09\x92" +
	"\xe3e\xe7/\xa9,Hu`\xe4\x07\xb9\xc4\x811\x80" +
	"\x91\x11\xc3\x8d \x05X\xddh\x85p\xa3}qrF" +
	"jn\"\xa3\xc0\x7f\xf1%\xca?}V7=c`" +
	"`d\x14`\xc0aZ@bQ\"sn1\xf6\xe0" +
	"\x80J\x02\x02\x00\x00\xff\xff\x19\x17\x8b\xb3"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_e82706a772b0927b,
		Nodes: []uint64{
			0x9ce1cd3ca86de4d8,
			0xa799dfba4daa7d3b,
			0xa86fdf1d4f98a777,
			0xb483b00913aca16b,
			0xfa39cd7fc5e3b202,
		},
		Compressed: true,
	})
}
